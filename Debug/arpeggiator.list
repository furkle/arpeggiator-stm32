
arpeggiator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a254  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a500  0800a500  0001a500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a540  0800a540  0001a540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a548  0800a548  0001a548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a54c  0800a54c  0001a54c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800a550  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008330  24000010  0800a560  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24008340  0800a560  00028340  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026f1e  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003c50  00000000  00000000  00046f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001620  00000000  00000000  0004abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014f8  00000000  00000000  0004c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00033756  00000000  00000000  0004d6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001b7a8  00000000  00000000  00080e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155cd9  00000000  00000000  0009c5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001f229f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005f1c  00000000  00000000  001f22f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000010 	.word	0x24000010
 80002c8:	00000000 	.word	0x00000000
 80002cc:	0800a4e8 	.word	0x0800a4e8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000014 	.word	0x24000014
 80002e8:	0800a4e8 	.word	0x0800a4e8

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b96e 	b.w	80005e0 <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468c      	mov	ip, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	f040 8083 	bne.w	8000432 <__udivmoddi4+0x116>
 800032c:	428a      	cmp	r2, r1
 800032e:	4617      	mov	r7, r2
 8000330:	d947      	bls.n	80003c2 <__udivmoddi4+0xa6>
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	b142      	cbz	r2, 800034a <__udivmoddi4+0x2e>
 8000338:	f1c2 0020 	rsb	r0, r2, #32
 800033c:	fa24 f000 	lsr.w	r0, r4, r0
 8000340:	4091      	lsls	r1, r2
 8000342:	4097      	lsls	r7, r2
 8000344:	ea40 0c01 	orr.w	ip, r0, r1
 8000348:	4094      	lsls	r4, r2
 800034a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800034e:	0c23      	lsrs	r3, r4, #16
 8000350:	fbbc f6f8 	udiv	r6, ip, r8
 8000354:	fa1f fe87 	uxth.w	lr, r7
 8000358:	fb08 c116 	mls	r1, r8, r6, ip
 800035c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000360:	fb06 f10e 	mul.w	r1, r6, lr
 8000364:	4299      	cmp	r1, r3
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x60>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f106 30ff 	add.w	r0, r6, #4294967295
 800036e:	f080 8119 	bcs.w	80005a4 <__udivmoddi4+0x288>
 8000372:	4299      	cmp	r1, r3
 8000374:	f240 8116 	bls.w	80005a4 <__udivmoddi4+0x288>
 8000378:	3e02      	subs	r6, #2
 800037a:	443b      	add	r3, r7
 800037c:	1a5b      	subs	r3, r3, r1
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000390:	45a6      	cmp	lr, r4
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x8c>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 33ff 	add.w	r3, r0, #4294967295
 800039a:	f080 8105 	bcs.w	80005a8 <__udivmoddi4+0x28c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8102 	bls.w	80005a8 <__udivmoddi4+0x28c>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	2600      	movs	r6, #0
 80003b2:	b11d      	cbz	r5, 80003bc <__udivmoddi4+0xa0>
 80003b4:	40d4      	lsrs	r4, r2
 80003b6:	2300      	movs	r3, #0
 80003b8:	e9c5 4300 	strd	r4, r3, [r5]
 80003bc:	4631      	mov	r1, r6
 80003be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xaa>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f282 	clz	r2, r2
 80003ca:	2a00      	cmp	r2, #0
 80003cc:	d150      	bne.n	8000470 <__udivmoddi4+0x154>
 80003ce:	1bcb      	subs	r3, r1, r7
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	fa1f f887 	uxth.w	r8, r7
 80003d8:	2601      	movs	r6, #1
 80003da:	fbb3 fcfe 	udiv	ip, r3, lr
 80003de:	0c21      	lsrs	r1, r4, #16
 80003e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e8:	fb08 f30c 	mul.w	r3, r8, ip
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0xe4>
 80003f0:	1879      	adds	r1, r7, r1
 80003f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0xe2>
 80003f8:	428b      	cmp	r3, r1
 80003fa:	f200 80e9 	bhi.w	80005d0 <__udivmoddi4+0x2b4>
 80003fe:	4684      	mov	ip, r0
 8000400:	1ac9      	subs	r1, r1, r3
 8000402:	b2a3      	uxth	r3, r4
 8000404:	fbb1 f0fe 	udiv	r0, r1, lr
 8000408:	fb0e 1110 	mls	r1, lr, r0, r1
 800040c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000410:	fb08 f800 	mul.w	r8, r8, r0
 8000414:	45a0      	cmp	r8, r4
 8000416:	d907      	bls.n	8000428 <__udivmoddi4+0x10c>
 8000418:	193c      	adds	r4, r7, r4
 800041a:	f100 33ff 	add.w	r3, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x10a>
 8000420:	45a0      	cmp	r8, r4
 8000422:	f200 80d9 	bhi.w	80005d8 <__udivmoddi4+0x2bc>
 8000426:	4618      	mov	r0, r3
 8000428:	eba4 0408 	sub.w	r4, r4, r8
 800042c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000430:	e7bf      	b.n	80003b2 <__udivmoddi4+0x96>
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0x12e>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80b1 	beq.w	800059e <__udivmoddi4+0x282>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x1cc>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0x140>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80b8 	bhi.w	80005cc <__udivmoddi4+0x2b0>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0103 	sbc.w	r1, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	468c      	mov	ip, r1
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0a8      	beq.n	80003bc <__udivmoddi4+0xa0>
 800046a:	e9c5 4c00 	strd	r4, ip, [r5]
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f603 	lsr.w	r6, r0, r3
 8000478:	4097      	lsls	r7, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000482:	40d9      	lsrs	r1, r3
 8000484:	4330      	orrs	r0, r6
 8000486:	0c03      	lsrs	r3, r0, #16
 8000488:	fbb1 f6fe 	udiv	r6, r1, lr
 800048c:	fa1f f887 	uxth.w	r8, r7
 8000490:	fb0e 1116 	mls	r1, lr, r6, r1
 8000494:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000498:	fb06 f108 	mul.w	r1, r6, r8
 800049c:	4299      	cmp	r1, r3
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x19c>
 80004a4:	18fb      	adds	r3, r7, r3
 80004a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80004aa:	f080 808d 	bcs.w	80005c8 <__udivmoddi4+0x2ac>
 80004ae:	4299      	cmp	r1, r3
 80004b0:	f240 808a 	bls.w	80005c8 <__udivmoddi4+0x2ac>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	443b      	add	r3, r7
 80004b8:	1a5b      	subs	r3, r3, r1
 80004ba:	b281      	uxth	r1, r0
 80004bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c8:	fb00 f308 	mul.w	r3, r0, r8
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d907      	bls.n	80004e0 <__udivmoddi4+0x1c4>
 80004d0:	1879      	adds	r1, r7, r1
 80004d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80004d6:	d273      	bcs.n	80005c0 <__udivmoddi4+0x2a4>
 80004d8:	428b      	cmp	r3, r1
 80004da:	d971      	bls.n	80005c0 <__udivmoddi4+0x2a4>
 80004dc:	3802      	subs	r0, #2
 80004de:	4439      	add	r1, r7
 80004e0:	1acb      	subs	r3, r1, r3
 80004e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004e6:	e778      	b.n	80003da <__udivmoddi4+0xbe>
 80004e8:	f1c6 0c20 	rsb	ip, r6, #32
 80004ec:	fa03 f406 	lsl.w	r4, r3, r6
 80004f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f4:	431c      	orrs	r4, r3
 80004f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000502:	fa21 f10c 	lsr.w	r1, r1, ip
 8000506:	431f      	orrs	r7, r3
 8000508:	0c3b      	lsrs	r3, r7, #16
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fa1f f884 	uxth.w	r8, r4
 8000512:	fb0e 1119 	mls	r1, lr, r9, r1
 8000516:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051a:	fb09 fa08 	mul.w	sl, r9, r8
 800051e:	458a      	cmp	sl, r1
 8000520:	fa02 f206 	lsl.w	r2, r2, r6
 8000524:	fa00 f306 	lsl.w	r3, r0, r6
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x220>
 800052a:	1861      	adds	r1, r4, r1
 800052c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000530:	d248      	bcs.n	80005c4 <__udivmoddi4+0x2a8>
 8000532:	458a      	cmp	sl, r1
 8000534:	d946      	bls.n	80005c4 <__udivmoddi4+0x2a8>
 8000536:	f1a9 0902 	sub.w	r9, r9, #2
 800053a:	4421      	add	r1, r4
 800053c:	eba1 010a 	sub.w	r1, r1, sl
 8000540:	b2bf      	uxth	r7, r7
 8000542:	fbb1 f0fe 	udiv	r0, r1, lr
 8000546:	fb0e 1110 	mls	r1, lr, r0, r1
 800054a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800054e:	fb00 f808 	mul.w	r8, r0, r8
 8000552:	45b8      	cmp	r8, r7
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x24a>
 8000556:	19e7      	adds	r7, r4, r7
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d22e      	bcs.n	80005bc <__udivmoddi4+0x2a0>
 800055e:	45b8      	cmp	r8, r7
 8000560:	d92c      	bls.n	80005bc <__udivmoddi4+0x2a0>
 8000562:	3802      	subs	r0, #2
 8000564:	4427      	add	r7, r4
 8000566:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056a:	eba7 0708 	sub.w	r7, r7, r8
 800056e:	fba0 8902 	umull	r8, r9, r0, r2
 8000572:	454f      	cmp	r7, r9
 8000574:	46c6      	mov	lr, r8
 8000576:	4649      	mov	r1, r9
 8000578:	d31a      	bcc.n	80005b0 <__udivmoddi4+0x294>
 800057a:	d017      	beq.n	80005ac <__udivmoddi4+0x290>
 800057c:	b15d      	cbz	r5, 8000596 <__udivmoddi4+0x27a>
 800057e:	ebb3 020e 	subs.w	r2, r3, lr
 8000582:	eb67 0701 	sbc.w	r7, r7, r1
 8000586:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058a:	40f2      	lsrs	r2, r6
 800058c:	ea4c 0202 	orr.w	r2, ip, r2
 8000590:	40f7      	lsrs	r7, r6
 8000592:	e9c5 2700 	strd	r2, r7, [r5]
 8000596:	2600      	movs	r6, #0
 8000598:	4631      	mov	r1, r6
 800059a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800059e:	462e      	mov	r6, r5
 80005a0:	4628      	mov	r0, r5
 80005a2:	e70b      	b.n	80003bc <__udivmoddi4+0xa0>
 80005a4:	4606      	mov	r6, r0
 80005a6:	e6e9      	b.n	800037c <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fd      	b.n	80003a8 <__udivmoddi4+0x8c>
 80005ac:	4543      	cmp	r3, r8
 80005ae:	d2e5      	bcs.n	800057c <__udivmoddi4+0x260>
 80005b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b4:	eb69 0104 	sbc.w	r1, r9, r4
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7df      	b.n	800057c <__udivmoddi4+0x260>
 80005bc:	4608      	mov	r0, r1
 80005be:	e7d2      	b.n	8000566 <__udivmoddi4+0x24a>
 80005c0:	4660      	mov	r0, ip
 80005c2:	e78d      	b.n	80004e0 <__udivmoddi4+0x1c4>
 80005c4:	4681      	mov	r9, r0
 80005c6:	e7b9      	b.n	800053c <__udivmoddi4+0x220>
 80005c8:	4666      	mov	r6, ip
 80005ca:	e775      	b.n	80004b8 <__udivmoddi4+0x19c>
 80005cc:	4630      	mov	r0, r6
 80005ce:	e74a      	b.n	8000466 <__udivmoddi4+0x14a>
 80005d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d4:	4439      	add	r1, r7
 80005d6:	e713      	b.n	8000400 <__udivmoddi4+0xe4>
 80005d8:	3802      	subs	r0, #2
 80005da:	443c      	add	r4, r7
 80005dc:	e724      	b.n	8000428 <__udivmoddi4+0x10c>
 80005de:	bf00      	nop

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <adc_init>:
#include "adc.h"

extern uint32_t adc1_avg;
extern uint32_t adc2_avg;

void adc_init(ADC_HandleTypeDef* hadc1, ADC_HandleTypeDef* hadc2, uint32_t* adc1_buf, uint32_t* adc2_buf) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
 80005f0:	603b      	str	r3, [r7, #0]
	HAL_ADC_Start_DMA(hadc1, adc1_buf, ADC_BUF_LEN);
 80005f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	68f8      	ldr	r0, [r7, #12]
 80005fa:	f001 fc2d 	bl	8001e58 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(hadc2, adc2_buf, ADC_BUF_LEN);
 80005fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000602:	6839      	ldr	r1, [r7, #0]
 8000604:	68b8      	ldr	r0, [r7, #8]
 8000606:	f001 fc27 	bl	8001e58 <HAL_ADC_Start_DMA>
}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <adc_buffer_half_full>:

void adc_buffer_half_full(ADC_HandleTypeDef* hadc, uint32_t* adc1_buf, uint32_t* adc2_buf) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0
 800061a:	60f8      	str	r0, [r7, #12]
 800061c:	60b9      	str	r1, [r7, #8]
 800061e:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2102      	movs	r1, #2
 8000624:	4820      	ldr	r0, [pc, #128]	; (80006a8 <adc_buffer_half_full+0x94>)
 8000626:	f004 ffe7 	bl	80055f8 <HAL_GPIO_WritePin>

	uint32_t adc1_sum = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
	uint32_t adc2_sum = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]

	uint16_t i;
	if (hadc->Instance == ADC1) {
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a1d      	ldr	r2, [pc, #116]	; (80006ac <adc_buffer_half_full+0x98>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d116      	bne.n	800066a <adc_buffer_half_full+0x56>
	  for (i = 0; i < ADC_BUF_LEN / 2; i += 1) {
 800063c:	2300      	movs	r3, #0
 800063e:	82fb      	strh	r3, [r7, #22]
 8000640:	e00a      	b.n	8000658 <adc_buffer_half_full+0x44>
		  adc1_sum += (uint32_t)&adc1_buf[i];
 8000642:	8afb      	ldrh	r3, [r7, #22]
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	4413      	add	r3, r2
 800064a:	461a      	mov	r2, r3
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	4413      	add	r3, r2
 8000650:	61fb      	str	r3, [r7, #28]
	  for (i = 0; i < ADC_BUF_LEN / 2; i += 1) {
 8000652:	8afb      	ldrh	r3, [r7, #22]
 8000654:	3301      	adds	r3, #1
 8000656:	82fb      	strh	r3, [r7, #22]
 8000658:	8afb      	ldrh	r3, [r7, #22]
 800065a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800065e:	d3f0      	bcc.n	8000642 <adc_buffer_half_full+0x2e>
	  }

	  adc1_avg = adc1_sum / ADC_BUF_LEN / 2;
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	0b5b      	lsrs	r3, r3, #13
 8000664:	4a12      	ldr	r2, [pc, #72]	; (80006b0 <adc_buffer_half_full+0x9c>)
 8000666:	6013      	str	r3, [r2, #0]
		  adc2_sum += (uint32_t)&adc2_buf[i];
	  }

	  adc2_avg = adc2_sum / ADC_BUF_LEN / 2;
	}
}
 8000668:	e01a      	b.n	80006a0 <adc_buffer_half_full+0x8c>
	} else if (hadc->Instance == ADC2) {
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a11      	ldr	r2, [pc, #68]	; (80006b4 <adc_buffer_half_full+0xa0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d115      	bne.n	80006a0 <adc_buffer_half_full+0x8c>
	  for (i = 0; i < ADC_BUF_LEN / 2; i += 1) {
 8000674:	2300      	movs	r3, #0
 8000676:	82fb      	strh	r3, [r7, #22]
 8000678:	e00a      	b.n	8000690 <adc_buffer_half_full+0x7c>
		  adc2_sum += (uint32_t)&adc2_buf[i];
 800067a:	8afb      	ldrh	r3, [r7, #22]
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	687a      	ldr	r2, [r7, #4]
 8000680:	4413      	add	r3, r2
 8000682:	461a      	mov	r2, r3
 8000684:	69bb      	ldr	r3, [r7, #24]
 8000686:	4413      	add	r3, r2
 8000688:	61bb      	str	r3, [r7, #24]
	  for (i = 0; i < ADC_BUF_LEN / 2; i += 1) {
 800068a:	8afb      	ldrh	r3, [r7, #22]
 800068c:	3301      	adds	r3, #1
 800068e:	82fb      	strh	r3, [r7, #22]
 8000690:	8afb      	ldrh	r3, [r7, #22]
 8000692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000696:	d3f0      	bcc.n	800067a <adc_buffer_half_full+0x66>
	  adc2_avg = adc2_sum / ADC_BUF_LEN / 2;
 8000698:	69bb      	ldr	r3, [r7, #24]
 800069a:	0b5b      	lsrs	r3, r3, #13
 800069c:	4a06      	ldr	r2, [pc, #24]	; (80006b8 <adc_buffer_half_full+0xa4>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	3720      	adds	r7, #32
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	58021000 	.word	0x58021000
 80006ac:	40022000 	.word	0x40022000
 80006b0:	24000034 	.word	0x24000034
 80006b4:	40022100 	.word	0x40022100
 80006b8:	24000030 	.word	0x24000030

080006bc <adc_buffer_full>:

void adc_buffer_full(ADC_HandleTypeDef* hadc, uint32_t* adc1_buf, uint32_t* adc2_buf) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	4821      	ldr	r0, [pc, #132]	; (8000754 <adc_buffer_full+0x98>)
 80006ce:	f004 ff93 	bl	80055f8 <HAL_GPIO_WritePin>

	uint32_t adc1_sum = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
	uint32_t adc2_sum = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
	uint16_t i;
	if (hadc->Instance == ADC1) {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a1e      	ldr	r2, [pc, #120]	; (8000758 <adc_buffer_full+0x9c>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d117      	bne.n	8000714 <adc_buffer_full+0x58>
	  for (i = ADC_BUF_LEN / 2; i < ADC_BUF_LEN; i += 1) {
 80006e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80006e8:	82fb      	strh	r3, [r7, #22]
 80006ea:	e00a      	b.n	8000702 <adc_buffer_full+0x46>
		  adc1_sum += (uint32_t)adc1_buf[i];
 80006ec:	8afb      	ldrh	r3, [r7, #22]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	4413      	add	r3, r2
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	69fa      	ldr	r2, [r7, #28]
 80006f8:	4413      	add	r3, r2
 80006fa:	61fb      	str	r3, [r7, #28]
	  for (i = ADC_BUF_LEN / 2; i < ADC_BUF_LEN; i += 1) {
 80006fc:	8afb      	ldrh	r3, [r7, #22]
 80006fe:	3301      	adds	r3, #1
 8000700:	82fb      	strh	r3, [r7, #22]
 8000702:	8afb      	ldrh	r3, [r7, #22]
 8000704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000708:	d3f0      	bcc.n	80006ec <adc_buffer_full+0x30>
	  }

	  adc1_avg = adc1_sum / ADC_BUF_LEN / 2;
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	0b5b      	lsrs	r3, r3, #13
 800070e:	4a13      	ldr	r2, [pc, #76]	; (800075c <adc_buffer_full+0xa0>)
 8000710:	6013      	str	r3, [r2, #0]
		  adc2_sum += (uint32_t)adc2_buf[i];
	  }

	  adc2_avg = adc2_sum / ADC_BUF_LEN / 2;
	}
}
 8000712:	e01b      	b.n	800074c <adc_buffer_full+0x90>
	} else if (hadc->Instance == ADC2) {
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a11      	ldr	r2, [pc, #68]	; (8000760 <adc_buffer_full+0xa4>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d116      	bne.n	800074c <adc_buffer_full+0x90>
	  for (i = ADC_BUF_LEN / 2; i < ADC_BUF_LEN; i += 1) {
 800071e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000722:	82fb      	strh	r3, [r7, #22]
 8000724:	e00a      	b.n	800073c <adc_buffer_full+0x80>
		  adc2_sum += (uint32_t)adc2_buf[i];
 8000726:	8afb      	ldrh	r3, [r7, #22]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	4413      	add	r3, r2
 8000734:	61bb      	str	r3, [r7, #24]
	  for (i = ADC_BUF_LEN / 2; i < ADC_BUF_LEN; i += 1) {
 8000736:	8afb      	ldrh	r3, [r7, #22]
 8000738:	3301      	adds	r3, #1
 800073a:	82fb      	strh	r3, [r7, #22]
 800073c:	8afb      	ldrh	r3, [r7, #22]
 800073e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000742:	d3f0      	bcc.n	8000726 <adc_buffer_full+0x6a>
	  adc2_avg = adc2_sum / ADC_BUF_LEN / 2;
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	0b5b      	lsrs	r3, r3, #13
 8000748:	4a06      	ldr	r2, [pc, #24]	; (8000764 <adc_buffer_full+0xa8>)
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	58021000 	.word	0x58021000
 8000758:	40022000 	.word	0x40022000
 800075c:	24000034 	.word	0x24000034
 8000760:	40022100 	.word	0x40022100
 8000764:	24000030 	.word	0x24000030

08000768 <arp_init>:
#include "arp.h"

extern uint32_t adc1_avg;
extern uint32_t adc2_avg;

void arp_init(ArpSettings* settings) {
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  settings->bpm = 120;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2278      	movs	r2, #120	; 0x78
 8000774:	801a      	strh	r2, [r3, #0]
  // Default, changed by code
  settings->beat_division = QUARTER_BEAT;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2208      	movs	r2, #8
 800077a:	70da      	strb	r2, [r3, #3]
  settings->direction = ARP_UP;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	715a      	strb	r2, [r3, #5]
  // Default, changed by pot
  settings->interval = PERFECT_FIFTH;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2207      	movs	r2, #7
 8000786:	709a      	strb	r2, [r3, #2]
  settings->last_seen_time = 0;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  settings->notes_played_this_iter = 0;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	731a      	strb	r2, [r3, #12]
  settings->root_note_num = 0;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	735a      	strb	r2, [r3, #13]
  settings->notes_to_play = 4;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2204      	movs	r2, #4
 800079e:	711a      	strb	r2, [r3, #4]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <HAL_ADC_ConvHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	adc_buffer_half_full(hadc, adc1_buf, adc2_buf);
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80007b6:	4905      	ldr	r1, [pc, #20]	; (80007cc <HAL_ADC_ConvHalfCpltCallback+0x20>)
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff2b 	bl	8000614 <adc_buffer_half_full>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	24004278 	.word	0x24004278
 80007cc:	24000140 	.word	0x24000140

080007d0 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	adc_buffer_full(hadc, adc1_buf, adc2_buf);
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_ADC_ConvCpltCallback+0x1c>)
 80007da:	4905      	ldr	r1, [pc, #20]	; (80007f0 <HAL_ADC_ConvCpltCallback+0x20>)
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff6d 	bl	80006bc <adc_buffer_full>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	24004278 	.word	0x24004278
 80007f0:	24000140 	.word	0x24000140

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007f8:	f000 ff20 	bl	800163c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fc:	f000 f82e 	bl	800085c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000800:	f000 f8a6 	bl	8000950 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f000 faf6 	bl	8000df4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000808:	f000 fa78 	bl	8000cfc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 800080c:	f000 fac2 	bl	8000d94 <MX_USB_OTG_HS_USB_Init>
  MX_DMA_Init();
 8000810:	f000 fac8 	bl	8000da4 <MX_DMA_Init>
  MX_ADC2_Init();
 8000814:	f000 f940 	bl	8000a98 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000818:	f000 f9d4 	bl	8000bc4 <MX_TIM1_Init>
  MX_ADC1_Init();
 800081c:	f000 f8c4 	bl	80009a8 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000820:	f000 f99e 	bl	8000b60 <MX_DAC1_Init>
  MX_TIM16_Init();
 8000824:	f000 fa20 	bl	8000c68 <MX_TIM16_Init>

  /* USER CODE BEGIN 2 */
  arp_init(&arp_settings);
 8000828:	4806      	ldr	r0, [pc, #24]	; (8000844 <main+0x50>)
 800082a:	f7ff ff9d 	bl	8000768 <arp_init>
  adc_init(&hadc1, &hadc2, adc1_buf, adc2_buf);
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <main+0x54>)
 8000830:	4a06      	ldr	r2, [pc, #24]	; (800084c <main+0x58>)
 8000832:	4907      	ldr	r1, [pc, #28]	; (8000850 <main+0x5c>)
 8000834:	4807      	ldr	r0, [pc, #28]	; (8000854 <main+0x60>)
 8000836:	f7ff fed5 	bl	80005e4 <adc_init>
  tim_init(&htim1);
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <main+0x64>)
 800083c:	f000 fec8 	bl	80015d0 <tim_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000840:	e7fe      	b.n	8000840 <main+0x4c>
 8000842:	bf00      	nop
 8000844:	24004140 	.word	0x24004140
 8000848:	24004278 	.word	0x24004278
 800084c:	24000140 	.word	0x24000140
 8000850:	240000dc 	.word	0x240000dc
 8000854:	24004150 	.word	0x24004150
 8000858:	2400422c 	.word	0x2400422c

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09c      	sub	sp, #112	; 0x70
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	224c      	movs	r2, #76	; 0x4c
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f009 fe34 	bl	800a4d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2220      	movs	r2, #32
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f009 fe2e 	bl	800a4d8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800087c:	2004      	movs	r0, #4
 800087e:	f004 fed5 	bl	800562c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <SystemClock_Config+0xec>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <SystemClock_Config+0xec>)
 800088c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b2d      	ldr	r3, [pc, #180]	; (8000948 <SystemClock_Config+0xec>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089e:	bf00      	nop
 80008a0:	4b29      	ldr	r3, [pc, #164]	; (8000948 <SystemClock_Config+0xec>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008ac:	d1f8      	bne.n	80008a0 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008ae:	4b27      	ldr	r3, [pc, #156]	; (800094c <SystemClock_Config+0xf0>)
 80008b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b2:	f023 0303 	bic.w	r3, r3, #3
 80008b6:	4a25      	ldr	r2, [pc, #148]	; (800094c <SystemClock_Config+0xf0>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 80008be:	2329      	movs	r3, #41	; 0x29
 80008c0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008c2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008cc:	2301      	movs	r3, #1
 80008ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d0:	2302      	movs	r3, #2
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80008dc:	2318      	movs	r3, #24
 80008de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008e0:	2302      	movs	r3, #2
 80008e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008e4:	2304      	movs	r3, #4
 80008e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008ec:	230c      	movs	r3, #12
 80008ee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4618      	mov	r0, r3
 80008fe:	f004 feef 	bl	80056e0 <HAL_RCC_OscConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000908:	f000 fb8e 	bl	8001028 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090c:	233f      	movs	r3, #63	; 0x3f
 800090e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000910:	2303      	movs	r3, #3
 8000912:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2102      	movs	r1, #2
 8000930:	4618      	mov	r0, r3
 8000932:	f005 fabd 	bl	8005eb0 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800093c:	f000 fb74 	bl	8001028 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3770      	adds	r7, #112	; 0x70
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58024800 	.word	0x58024800
 800094c:	58024400 	.word	0x58024400

08000950 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b0ae      	sub	sp, #184	; 0xb8
 8000954:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	22b8      	movs	r2, #184	; 0xb8
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f009 fdbb 	bl	800a4d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000962:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000966:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800096c:	2310      	movs	r3, #16
 800096e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000970:	2302      	movs	r3, #2
 8000972:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000974:	2302      	movs	r3, #2
 8000976:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000978:	2302      	movs	r3, #2
 800097a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800097c:	23c0      	movs	r3, #192	; 0xc0
 800097e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000988:	2300      	movs	r3, #0
 800098a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800098e:	463b      	mov	r3, r7
 8000990:	4618      	mov	r0, r3
 8000992:	f005 fe19 	bl	80065c8 <HAL_RCCEx_PeriphCLKConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 800099c:	f000 fb44 	bl	8001028 <Error_Handler>
  }
}
 80009a0:	bf00      	nop
 80009a2:	37b8      	adds	r7, #184	; 0xb8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ba:	463b      	mov	r3, r7
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	615a      	str	r2, [r3, #20]
 80009ca:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80009cc:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <MX_ADC1_Init+0xe4>)
 80009ce:	4a30      	ldr	r2, [pc, #192]	; (8000a90 <MX_ADC1_Init+0xe8>)
 80009d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009d2:	4b2e      	ldr	r3, [pc, #184]	; (8000a8c <MX_ADC1_Init+0xe4>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80009d8:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <MX_ADC1_Init+0xe4>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009de:	4b2b      	ldr	r3, [pc, #172]	; (8000a8c <MX_ADC1_Init+0xe4>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <MX_ADC1_Init+0xe4>)
 80009e6:	2204      	movs	r2, #4
 80009e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009ea:	4b28      	ldr	r3, [pc, #160]	; (8000a8c <MX_ADC1_Init+0xe4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009f0:	4b26      	ldr	r3, [pc, #152]	; (8000a8c <MX_ADC1_Init+0xe4>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80009f6:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <MX_ADC1_Init+0xe4>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <MX_ADC1_Init+0xe4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_ADC1_Init+0xe4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a08:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <MX_ADC1_Init+0xe4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_ADC1_Init+0xe4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a14:	4b1d      	ldr	r3, [pc, #116]	; (8000a8c <MX_ADC1_Init+0xe4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_ADC1_Init+0xe4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a20:	4b1a      	ldr	r3, [pc, #104]	; (8000a8c <MX_ADC1_Init+0xe4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a28:	4818      	ldr	r0, [pc, #96]	; (8000a8c <MX_ADC1_Init+0xe4>)
 8000a2a:	f001 f8bb 	bl	8001ba4 <HAL_ADC_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a34:	f000 faf8 	bl	8001028 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4812      	ldr	r0, [pc, #72]	; (8000a8c <MX_ADC1_Init+0xe4>)
 8000a44:	f001 ffae 	bl	80029a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000a4e:	f000 faeb 	bl	8001028 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_ADC1_Init+0xec>)
 8000a54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a56:	2306      	movs	r3, #6
 8000a58:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a5e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a62:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a64:	2304      	movs	r3, #4
 8000a66:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a70:	463b      	mov	r3, r7
 8000a72:	4619      	mov	r1, r3
 8000a74:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_ADC1_Init+0xe4>)
 8000a76:	f001 faad 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000a80:	f000 fad2 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	24004150 	.word	0x24004150
 8000a90:	40022000 	.word	0x40022000
 8000a94:	08600004 	.word	0x08600004

08000a98 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
 8000aac:	615a      	str	r2, [r3, #20]
 8000aae:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ab2:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <MX_ADC2_Init+0xc4>)
 8000ab4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ab6:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000aca:	2204      	movs	r2, #4
 8000acc:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ace:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ad4:	4b20      	ldr	r3, [pc, #128]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b0c:	4812      	ldr	r0, [pc, #72]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000b0e:	f001 f849 	bl	8001ba4 <HAL_ADC_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000b18:	f000 fa86 	bl	8001028 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b20:	2306      	movs	r3, #6
 8000b22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b2c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b2e:	2304      	movs	r3, #4
 8000b30:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <MX_ADC2_Init+0xc0>)
 8000b40:	f001 fa48 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000b4a:	f000 fa6d 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3720      	adds	r7, #32
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	240000dc 	.word	0x240000dc
 8000b5c:	40022100 	.word	0x40022100

08000b60 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2224      	movs	r2, #36	; 0x24
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f009 fcb3 	bl	800a4d8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_DAC1_Init+0x5c>)
 8000b74:	4a12      	ldr	r2, [pc, #72]	; (8000bc0 <MX_DAC1_Init+0x60>)
 8000b76:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b78:	4810      	ldr	r0, [pc, #64]	; (8000bbc <MX_DAC1_Init+0x5c>)
 8000b7a:	f002 f8be 	bl	8002cfa <HAL_DAC_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b84:	f000 fa50 	bl	8001028 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000b94:	2302      	movs	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <MX_DAC1_Init+0x5c>)
 8000ba4:	f002 f8cc 	bl	8002d40 <HAL_DAC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bae:	f000 fa3b 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	3728      	adds	r7, #40	; 0x28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	24000038 	.word	0x24000038
 8000bc0:	40007400 	.word	0x40007400

08000bc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bca:	f107 0310 	add.w	r3, r7, #16
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000be4:	4a1f      	ldr	r2, [pc, #124]	; (8000c64 <MX_TIM1_Init+0xa0>)
 8000be6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000bea:	2263      	movs	r2, #99	; 0x63
 8000bec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000bf6:	2263      	movs	r2, #99	; 0x63
 8000bf8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c0c:	4814      	ldr	r0, [pc, #80]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000c0e:	f007 fd85 	bl	800871c <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c18:	f000 fa06 	bl	8001028 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	4619      	mov	r1, r3
 8000c28:	480d      	ldr	r0, [pc, #52]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000c2a:	f007 ff35 	bl	8008a98 <HAL_TIM_ConfigClockSource>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c34:	f000 f9f8 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c40:	2300      	movs	r3, #0
 8000c42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_TIM1_Init+0x9c>)
 8000c4a:	f008 fa7b 	bl	8009144 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000c54:	f000 f9e8 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c58:	bf00      	nop
 8000c5a:	3720      	adds	r7, #32
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	2400422c 	.word	0x2400422c
 8000c64:	40010000 	.word	0x40010000

08000c68 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <MX_TIM16_Init+0x8c>)
 8000c7c:	4a1e      	ldr	r2, [pc, #120]	; (8000cf8 <MX_TIM16_Init+0x90>)
 8000c7e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_TIM16_Init+0x8c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <MX_TIM16_Init+0x8c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	; (8000cf4 <MX_TIM16_Init+0x8c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_TIM16_Init+0x8c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <MX_TIM16_Init+0x8c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c9e:	4815      	ldr	r0, [pc, #84]	; (8000cf4 <MX_TIM16_Init+0x8c>)
 8000ca0:	f007 fd3c 	bl	800871c <HAL_TIM_Base_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM16_Init+0x46>
  {
    Error_Handler();
 8000caa:	f000 f9bd 	bl	8001028 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <MX_TIM16_Init+0x8c>)
 8000cb0:	f007 fdfc 	bl	80088ac <HAL_TIM_IC_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM16_Init+0x56>
  {
    Error_Handler();
 8000cba:	f000 f9b5 	bl	8001028 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <MX_TIM16_Init+0x8c>)
 8000cd6:	f007 fe4a 	bl	800896e <HAL_TIM_IC_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM16_Init+0x7c>
  {
    Error_Handler();
 8000ce0:	f000 f9a2 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */
  htim16.Init.Period = PULSES_PER_QUARTER_NOTE - 1;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <MX_TIM16_Init+0x8c>)
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM16_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	240082f0 	.word	0x240082f0
 8000cf8:	40014400 	.word	0x40014400

08000cfc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d02:	4a23      	ldr	r2, [pc, #140]	; (8000d90 <MX_USART3_UART_Init+0x94>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2c:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d44:	4811      	ldr	r0, [pc, #68]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d46:	f008 fa85 	bl	8009254 <HAL_UART_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d50:	f000 f96a 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d54:	2100      	movs	r1, #0
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d58:	f009 fad0 	bl	800a2fc <HAL_UARTEx_SetTxFifoThreshold>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d62:	f000 f961 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d66:	2100      	movs	r1, #0
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d6a:	f009 fb05 	bl	800a378 <HAL_UARTEx_SetRxFifoThreshold>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d74:	f000 f958 	bl	8001028 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <MX_USART3_UART_Init+0x90>)
 8000d7a:	f009 fa86 	bl	800a28a <HAL_UARTEx_DisableFifoMode>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d84:	f000 f950 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2400004c 	.word	0x2400004c
 8000d90:	40004800 	.word	0x40004800

08000d94 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_DMA_Init+0x4c>)
 8000dac:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000db0:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <MX_DMA_Init+0x4c>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <MX_DMA_Init+0x4c>)
 8000dbc:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	200b      	movs	r0, #11
 8000dce:	f001 ff60 	bl	8002c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000dd2:	200b      	movs	r0, #11
 8000dd4:	f001 ff77 	bl	8002cc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	200c      	movs	r0, #12
 8000dde:	f001 ff58 	bl	8002c92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000de2:	200c      	movs	r0, #12
 8000de4:	f001 ff6f 	bl	8002cc6 <HAL_NVIC_EnableIRQ>

}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58024400 	.word	0x58024400

08000df4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08e      	sub	sp, #56	; 0x38
 8000df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0a:	4b7f      	ldr	r3, [pc, #508]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e10:	4a7d      	ldr	r2, [pc, #500]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e1a:	4b7b      	ldr	r3, [pc, #492]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e20:	f003 0304 	and.w	r3, r3, #4
 8000e24:	623b      	str	r3, [r7, #32]
 8000e26:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e28:	4b77      	ldr	r3, [pc, #476]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e2e:	4a76      	ldr	r2, [pc, #472]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e30:	f043 0320 	orr.w	r3, r3, #32
 8000e34:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e38:	4b73      	ldr	r3, [pc, #460]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e3e:	f003 0320 	and.w	r3, r3, #32
 8000e42:	61fb      	str	r3, [r7, #28]
 8000e44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e46:	4b70      	ldr	r3, [pc, #448]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e4c:	4a6e      	ldr	r2, [pc, #440]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e52:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e56:	4b6c      	ldr	r3, [pc, #432]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e58:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e64:	4b68      	ldr	r3, [pc, #416]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e66:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e6a:	4a67      	ldr	r2, [pc, #412]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e74:	4b64      	ldr	r3, [pc, #400]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e76:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	4b61      	ldr	r3, [pc, #388]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e84:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e88:	4a5f      	ldr	r2, [pc, #380]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e8a:	f043 0302 	orr.w	r3, r3, #2
 8000e8e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000e92:	4b5d      	ldr	r3, [pc, #372]	; (8001008 <MX_GPIO_Init+0x214>)
 8000e94:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea0:	4b59      	ldr	r3, [pc, #356]	; (8001008 <MX_GPIO_Init+0x214>)
 8000ea2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ea6:	4a58      	ldr	r2, [pc, #352]	; (8001008 <MX_GPIO_Init+0x214>)
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eb0:	4b55      	ldr	r3, [pc, #340]	; (8001008 <MX_GPIO_Init+0x214>)
 8000eb2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000eb6:	f003 0308 	and.w	r3, r3, #8
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ebe:	4b52      	ldr	r3, [pc, #328]	; (8001008 <MX_GPIO_Init+0x214>)
 8000ec0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ec4:	4a50      	ldr	r2, [pc, #320]	; (8001008 <MX_GPIO_Init+0x214>)
 8000ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000eca:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000ece:	4b4e      	ldr	r3, [pc, #312]	; (8001008 <MX_GPIO_Init+0x214>)
 8000ed0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000edc:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <MX_GPIO_Init+0x214>)
 8000ede:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ee2:	4a49      	ldr	r2, [pc, #292]	; (8001008 <MX_GPIO_Init+0x214>)
 8000ee4:	f043 0310 	orr.w	r3, r3, #16
 8000ee8:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000eec:	4b46      	ldr	r3, [pc, #280]	; (8001008 <MX_GPIO_Init+0x214>)
 8000eee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000ef2:	f003 0310 	and.w	r3, r3, #16
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f00:	4842      	ldr	r0, [pc, #264]	; (800100c <MX_GPIO_Init+0x218>)
 8000f02:	f004 fb79 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f0c:	4840      	ldr	r0, [pc, #256]	; (8001010 <MX_GPIO_Init+0x21c>)
 8000f0e:	f004 fb73 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2102      	movs	r1, #2
 8000f16:	483f      	ldr	r0, [pc, #252]	; (8001014 <MX_GPIO_Init+0x220>)
 8000f18:	f004 fb6e 	bl	80055f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4839      	ldr	r0, [pc, #228]	; (8001018 <MX_GPIO_Init+0x224>)
 8000f32:	f004 f9b1 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	482f      	ldr	r0, [pc, #188]	; (800100c <MX_GPIO_Init+0x218>)
 8000f50:	f004 f9a2 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000f54:	f244 0301 	movw	r3, #16385	; 0x4001
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4828      	ldr	r0, [pc, #160]	; (8001010 <MX_GPIO_Init+0x21c>)
 8000f6e:	f004 f993 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f76:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_GPIO_Init+0x228>)
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4619      	mov	r1, r3
 8000f84:	4826      	ldr	r0, [pc, #152]	; (8001020 <MX_GPIO_Init+0x22c>)
 8000f86:	f004 f987 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000f8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4821      	ldr	r0, [pc, #132]	; (8001024 <MX_GPIO_Init+0x230>)
 8000fa0:	f004 f97a 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4818      	ldr	r0, [pc, #96]	; (8001024 <MX_GPIO_Init+0x230>)
 8000fc2:	f004 f969 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_N_Pin USB_FS_P_Pin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000fc6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4811      	ldr	r0, [pc, #68]	; (8001024 <MX_GPIO_Init+0x230>)
 8000fe0:	f004 f95a 	bl	8005298 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4806      	ldr	r0, [pc, #24]	; (8001014 <MX_GPIO_Init+0x220>)
 8000ffc:	f004 f94c 	bl	8005298 <HAL_GPIO_Init>

}
 8001000:	bf00      	nop
 8001002:	3738      	adds	r7, #56	; 0x38
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	58024400 	.word	0x58024400
 800100c:	58021400 	.word	0x58021400
 8001010:	58020400 	.word	0x58020400
 8001014:	58021000 	.word	0x58021000
 8001018:	58020800 	.word	0x58020800
 800101c:	11110000 	.word	0x11110000
 8001020:	58021800 	.word	0x58021800
 8001024:	58020000 	.word	0x58020000

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_MspInit+0x30>)
 800103c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001040:	4a08      	ldr	r2, [pc, #32]	; (8001064 <HAL_MspInit+0x30>)
 8001042:	f043 0302 	orr.w	r3, r3, #2
 8001046:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_MspInit+0x30>)
 800104c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	58024400 	.word	0x58024400

08001068 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a66      	ldr	r2, [pc, #408]	; (8001220 <HAL_ADC_MspInit+0x1b8>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d164      	bne.n	8001154 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800108a:	4b66      	ldr	r3, [pc, #408]	; (8001224 <HAL_ADC_MspInit+0x1bc>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	4a64      	ldr	r2, [pc, #400]	; (8001224 <HAL_ADC_MspInit+0x1bc>)
 8001092:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001094:	4b63      	ldr	r3, [pc, #396]	; (8001224 <HAL_ADC_MspInit+0x1bc>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d10e      	bne.n	80010ba <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800109c:	4b62      	ldr	r3, [pc, #392]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 800109e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010a2:	4a61      	ldr	r2, [pc, #388]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 80010a4:	f043 0320 	orr.w	r3, r3, #32
 80010a8:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80010ac:	4b5e      	ldr	r3, [pc, #376]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 80010ae:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010b2:	f003 0320 	and.w	r3, r3, #32
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010ba:	4b5b      	ldr	r3, [pc, #364]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 80010bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010c0:	4a59      	ldr	r2, [pc, #356]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010ca:	4b57      	ldr	r3, [pc, #348]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 80010cc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	617b      	str	r3, [r7, #20]
 80010d6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	484f      	ldr	r0, [pc, #316]	; (800122c <HAL_ADC_MspInit+0x1c4>)
 80010ee:	f004 f8d3 	bl	8005298 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80010f2:	4b4f      	ldr	r3, [pc, #316]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 80010f4:	4a4f      	ldr	r2, [pc, #316]	; (8001234 <HAL_ADC_MspInit+0x1cc>)
 80010f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80010f8:	4b4d      	ldr	r3, [pc, #308]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 80010fa:	2209      	movs	r2, #9
 80010fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fe:	4b4c      	ldr	r3, [pc, #304]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001104:	4b4a      	ldr	r3, [pc, #296]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 800110c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001110:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 8001114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001118:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800111a:	4b45      	ldr	r3, [pc, #276]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 800111c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001120:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001122:	4b43      	ldr	r3, [pc, #268]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 8001124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001128:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001130:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001136:	483e      	ldr	r0, [pc, #248]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 8001138:	f001 ff32 	bl	8002fa0 <HAL_DMA_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8001142:	f7ff ff71 	bl	8001028 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a39      	ldr	r2, [pc, #228]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 800114a:	64da      	str	r2, [r3, #76]	; 0x4c
 800114c:	4a38      	ldr	r2, [pc, #224]	; (8001230 <HAL_ADC_MspInit+0x1c8>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001152:	e061      	b.n	8001218 <HAL_ADC_MspInit+0x1b0>
  else if(hadc->Instance==ADC2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a37      	ldr	r2, [pc, #220]	; (8001238 <HAL_ADC_MspInit+0x1d0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d15c      	bne.n	8001218 <HAL_ADC_MspInit+0x1b0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800115e:	4b31      	ldr	r3, [pc, #196]	; (8001224 <HAL_ADC_MspInit+0x1bc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	4a2f      	ldr	r2, [pc, #188]	; (8001224 <HAL_ADC_MspInit+0x1bc>)
 8001166:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <HAL_ADC_MspInit+0x1bc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d10e      	bne.n	800118e <HAL_ADC_MspInit+0x126>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001170:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 8001172:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001176:	4a2c      	ldr	r2, [pc, #176]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 8001182:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001186:	f003 0320 	and.w	r3, r3, #32
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118e:	4b26      	ldr	r3, [pc, #152]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 8001190:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001194:	4a24      	ldr	r2, [pc, #144]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_ADC_MspInit+0x1c0>)
 80011a0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80011ac:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80011b0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80011b4:	f000 faf8 	bl	80017a8 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc2.Instance = DMA1_Stream1;
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011ba:	4a21      	ldr	r2, [pc, #132]	; (8001240 <HAL_ADC_MspInit+0x1d8>)
 80011bc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011c0:	220a      	movs	r2, #10
 80011c2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c4:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ca:	4b1c      	ldr	r3, [pc, #112]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011de:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011e6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ee:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011fc:	480f      	ldr	r0, [pc, #60]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 80011fe:	f001 fecf 	bl	8002fa0 <HAL_DMA_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_ADC_MspInit+0x1a4>
      Error_Handler();
 8001208:	f7ff ff0e 	bl	8001028 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 8001210:	64da      	str	r2, [r3, #76]	; 0x4c
 8001212:	4a0a      	ldr	r2, [pc, #40]	; (800123c <HAL_ADC_MspInit+0x1d4>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001218:	bf00      	nop
 800121a:	3730      	adds	r7, #48	; 0x30
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40022000 	.word	0x40022000
 8001224:	2400002c 	.word	0x2400002c
 8001228:	58024400 	.word	0x58024400
 800122c:	58021400 	.word	0x58021400
 8001230:	240041b4 	.word	0x240041b4
 8001234:	40020010 	.word	0x40020010
 8001238:	40022100 	.word	0x40022100
 800123c:	24008278 	.word	0x24008278
 8001240:	40020028 	.word	0x40020028

08001244 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a18      	ldr	r2, [pc, #96]	; (80012c4 <HAL_DAC_MspInit+0x80>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d129      	bne.n	80012ba <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_DAC_MspInit+0x84>)
 8001268:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800126c:	4a16      	ldr	r2, [pc, #88]	; (80012c8 <HAL_DAC_MspInit+0x84>)
 800126e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001272:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <HAL_DAC_MspInit+0x84>)
 8001278:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800127c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_DAC_MspInit+0x84>)
 8001286:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <HAL_DAC_MspInit+0x84>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_DAC_MspInit+0x84>)
 8001296:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012a2:	2310      	movs	r3, #16
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_DAC_MspInit+0x88>)
 80012b6:	f003 ffef 	bl	8005298 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40007400 	.word	0x40007400
 80012c8:	58024400 	.word	0x58024400
 80012cc:	58020000 	.word	0x58020000

080012d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a24      	ldr	r2, [pc, #144]	; (8001380 <HAL_TIM_Base_MspInit+0xb0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10f      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <HAL_TIM_Base_MspInit+0xb4>)
 80012f4:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80012f8:	4a22      	ldr	r2, [pc, #136]	; (8001384 <HAL_TIM_Base_MspInit+0xb4>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <HAL_TIM_Base_MspInit+0xb4>)
 8001304:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001310:	e032      	b.n	8001378 <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM16)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <HAL_TIM_Base_MspInit+0xb8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d12d      	bne.n	8001378 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <HAL_TIM_Base_MspInit+0xb4>)
 800131e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001322:	4a18      	ldr	r2, [pc, #96]	; (8001384 <HAL_TIM_Base_MspInit+0xb4>)
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	f8c2 3150 	str.w	r3, [r2, #336]	; 0x150
 800132c:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_TIM_Base_MspInit+0xb4>)
 800132e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800133a:	4b12      	ldr	r3, [pc, #72]	; (8001384 <HAL_TIM_Base_MspInit+0xb4>)
 800133c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001340:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_TIM_Base_MspInit+0xb4>)
 8001342:	f043 0320 	orr.w	r3, r3, #32
 8001346:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_TIM_Base_MspInit+0xb4>)
 800134c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001358:	2340      	movs	r3, #64	; 0x40
 800135a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001368:	2301      	movs	r3, #1
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	4619      	mov	r1, r3
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <HAL_TIM_Base_MspInit+0xbc>)
 8001374:	f003 ff90 	bl	8005298 <HAL_GPIO_Init>
}
 8001378:	bf00      	nop
 800137a:	3728      	adds	r7, #40	; 0x28
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40010000 	.word	0x40010000
 8001384:	58024400 	.word	0x58024400
 8001388:	40014400 	.word	0x40014400
 800138c:	58021400 	.word	0x58021400

08001390 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0b8      	sub	sp, #224	; 0xe0
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	22b8      	movs	r2, #184	; 0xb8
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f009 f891 	bl	800a4d8 <memset>
  if(huart->Instance==USART3)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a25      	ldr	r2, [pc, #148]	; (8001450 <HAL_UART_MspInit+0xc0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d142      	bne.n	8001446 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013c0:	2302      	movs	r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4618      	mov	r0, r3
 80013d0:	f005 f8fa 	bl	80065c8 <HAL_RCCEx_PeriphCLKConfig>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013da:	f7ff fe25 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <HAL_UART_MspInit+0xc4>)
 80013e0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013e4:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <HAL_UART_MspInit+0xc4>)
 80013e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ea:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <HAL_UART_MspInit+0xc4>)
 80013f0:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80013f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f8:	613b      	str	r3, [r7, #16]
 80013fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_UART_MspInit+0xc4>)
 80013fe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001402:	4a14      	ldr	r2, [pc, #80]	; (8001454 <HAL_UART_MspInit+0xc4>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_UART_MspInit+0xc4>)
 800140e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800141a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800141e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001434:	2307      	movs	r3, #7
 8001436:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <HAL_UART_MspInit+0xc8>)
 8001442:	f003 ff29 	bl	8005298 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	37e0      	adds	r7, #224	; 0xe0
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40004800 	.word	0x40004800
 8001454:	58024400 	.word	0x58024400
 8001458:	58020c00 	.word	0x58020c00

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 f93a 	bl	8001720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014b4:	4802      	ldr	r0, [pc, #8]	; (80014c0 <DMA1_Stream0_IRQHandler+0x10>)
 80014b6:	f002 fb6d 	bl	8003b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	240041b4 	.word	0x240041b4

080014c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80014c8:	4802      	ldr	r0, [pc, #8]	; (80014d4 <DMA1_Stream1_IRQHandler+0x10>)
 80014ca:	f002 fb63 	bl	8003b94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	24008278 	.word	0x24008278

080014d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014dc:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <SystemInit+0xd8>)
 80014de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e2:	4a33      	ldr	r2, [pc, #204]	; (80015b0 <SystemInit+0xd8>)
 80014e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014ec:	4b31      	ldr	r3, [pc, #196]	; (80015b4 <SystemInit+0xdc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d807      	bhi.n	8001508 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014f8:	4b2e      	ldr	r3, [pc, #184]	; (80015b4 <SystemInit+0xdc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 030f 	bic.w	r3, r3, #15
 8001500:	4a2c      	ldr	r2, [pc, #176]	; (80015b4 <SystemInit+0xdc>)
 8001502:	f043 0303 	orr.w	r3, r3, #3
 8001506:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001508:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <SystemInit+0xe0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a2a      	ldr	r2, [pc, #168]	; (80015b8 <SystemInit+0xe0>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <SystemInit+0xe0>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <SystemInit+0xe0>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4926      	ldr	r1, [pc, #152]	; (80015b8 <SystemInit+0xe0>)
 8001520:	4b26      	ldr	r3, [pc, #152]	; (80015bc <SystemInit+0xe4>)
 8001522:	4013      	ands	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <SystemInit+0xdc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b00      	cmp	r3, #0
 8001530:	d007      	beq.n	8001542 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <SystemInit+0xdc>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f023 030f 	bic.w	r3, r3, #15
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <SystemInit+0xdc>)
 800153c:	f043 0303 	orr.w	r3, r3, #3
 8001540:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <SystemInit+0xe0>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <SystemInit+0xe0>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <SystemInit+0xe0>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <SystemInit+0xe0>)
 8001556:	4a1a      	ldr	r2, [pc, #104]	; (80015c0 <SystemInit+0xe8>)
 8001558:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <SystemInit+0xe0>)
 800155c:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <SystemInit+0xec>)
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <SystemInit+0xe0>)
 8001562:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <SystemInit+0xf0>)
 8001564:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <SystemInit+0xe0>)
 8001568:	2200      	movs	r2, #0
 800156a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <SystemInit+0xe0>)
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <SystemInit+0xf0>)
 8001570:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <SystemInit+0xe0>)
 8001574:	2200      	movs	r2, #0
 8001576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <SystemInit+0xe0>)
 800157a:	4a13      	ldr	r2, [pc, #76]	; (80015c8 <SystemInit+0xf0>)
 800157c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <SystemInit+0xe0>)
 8001580:	2200      	movs	r2, #0
 8001582:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <SystemInit+0xe0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <SystemInit+0xe0>)
 800158a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <SystemInit+0xe0>)
 8001592:	2200      	movs	r2, #0
 8001594:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <SystemInit+0xf4>)
 8001598:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800159c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SystemInit+0xd8>)
 80015a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	52002000 	.word	0x52002000
 80015b8:	58024400 	.word	0x58024400
 80015bc:	eaf6ed7f 	.word	0xeaf6ed7f
 80015c0:	02020200 	.word	0x02020200
 80015c4:	01ff0000 	.word	0x01ff0000
 80015c8:	01010280 	.word	0x01010280
 80015cc:	52004000 	.word	0x52004000

080015d0 <tim_init>:
 *      Author: furkle
 */

#include "tim.h"

void tim_init(TIM_HandleTypeDef* htim) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT(htim);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f007 f8f7 	bl	80087cc <HAL_TIM_Base_Start_IT>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001620 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015ec:	f7ff ff74 	bl	80014d8 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015f2:	490d      	ldr	r1, [pc, #52]	; (8001628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015f4:	4a0d      	ldr	r2, [pc, #52]	; (800162c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001608:	4c0a      	ldr	r4, [pc, #40]	; (8001634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001616:	f008 ff3b 	bl	800a490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800161a:	f7ff f8eb 	bl	80007f4 <main>
  bx  lr
 800161e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001620:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001624:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001628:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800162c:	0800a550 	.word	0x0800a550
  ldr r2, =_sbss
 8001630:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001634:	24008340 	.word	0x24008340

08001638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001638:	e7fe      	b.n	8001638 <ADC_IRQHandler>
	...

0800163c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001642:	2003      	movs	r0, #3
 8001644:	f001 fb1a 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001648:	f004 fde8 	bl	800621c <HAL_RCC_GetSysClockFreq>
 800164c:	4602      	mov	r2, r0
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_Init+0x68>)
 8001650:	699b      	ldr	r3, [r3, #24]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	f003 030f 	and.w	r3, r3, #15
 8001658:	4913      	ldr	r1, [pc, #76]	; (80016a8 <HAL_Init+0x6c>)
 800165a:	5ccb      	ldrb	r3, [r1, r3]
 800165c:	f003 031f 	and.w	r3, r3, #31
 8001660:	fa22 f303 	lsr.w	r3, r2, r3
 8001664:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_Init+0x68>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	4a0e      	ldr	r2, [pc, #56]	; (80016a8 <HAL_Init+0x6c>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	4a0b      	ldr	r2, [pc, #44]	; (80016ac <HAL_Init+0x70>)
 800167e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <HAL_Init+0x74>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001686:	2000      	movs	r0, #0
 8001688:	f000 f814 	bl	80016b4 <HAL_InitTick>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e002      	b.n	800169c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001696:	f7ff fccd 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	58024400 	.word	0x58024400
 80016a8:	0800a500 	.word	0x0800a500
 80016ac:	24000004 	.word	0x24000004
 80016b0:	24000000 	.word	0x24000000

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_InitTick+0x60>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e021      	b.n	800170c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_InitTick+0x64>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_InitTick+0x60>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 faff 	bl	8002ce2 <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f001 fac9 	bl	8002c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_InitTick+0x68>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	2400000c 	.word	0x2400000c
 8001718:	24000000 	.word	0x24000000
 800171c:	24000008 	.word	0x24000008

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2400000c 	.word	0x2400000c
 8001744:	2400833c 	.word	0x2400833c

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2400833c 	.word	0x2400833c

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2400000c 	.word	0x2400000c

080017a8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	401a      	ands	r2, r3
 80017bc:	4904      	ldr	r1, [pc, #16]	; (80017d0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	58000400 	.word	0x58000400

080017d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	609a      	str	r2, [r3, #8]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	609a      	str	r2, [r3, #8]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3360      	adds	r3, #96	; 0x60
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	430b      	orrs	r3, r1
 800186a:	431a      	orrs	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001870:	bf00      	nop
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	6879      	ldr	r1, [r7, #4]
 8001898:	fa01 f303 	lsl.w	r3, r1, r3
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	611a      	str	r2, [r3, #16]
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b087      	sub	sp, #28
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3360      	adds	r3, #96	; 0x60
 80018be:	461a      	mov	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	431a      	orrs	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	601a      	str	r2, [r3, #0]
  }
}
 80018d8:	bf00      	nop
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800190a:	b480      	push	{r7}
 800190c:	b087      	sub	sp, #28
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3330      	adds	r3, #48	; 0x30
 800191a:	461a      	mov	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	4413      	add	r3, r2
 8001928:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	211f      	movs	r1, #31
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	401a      	ands	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	0e9b      	lsrs	r3, r3, #26
 8001942:	f003 011f 	and.w	r1, r3, #31
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f023 0203 	bic.w	r2, r3, #3
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	60da      	str	r2, [r3, #12]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3314      	adds	r3, #20
 8001998:	461a      	mov	r2, r3
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	0e5b      	lsrs	r3, r3, #25
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	4413      	add	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	0d1b      	lsrs	r3, r3, #20
 80019b0:	f003 031f 	and.w	r3, r3, #31
 80019b4:	2107      	movs	r1, #7
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	401a      	ands	r2, r3
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	0d1b      	lsrs	r3, r3, #20
 80019c2:	f003 031f 	and.w	r3, r3, #31
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	fa01 f303 	lsl.w	r3, r1, r3
 80019cc:	431a      	orrs	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019d2:	bf00      	nop
 80019d4:	371c      	adds	r7, #28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019f8:	43db      	mvns	r3, r3
 80019fa:	401a      	ands	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f003 0318 	and.w	r3, r3, #24
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a04:	40d9      	lsrs	r1, r3
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	400b      	ands	r3, r1
 8001a0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001a16:	bf00      	nop
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	000fffff 	.word	0x000fffff

08001a28 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 031f 	and.w	r3, r3, #31
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4b04      	ldr	r3, [pc, #16]	; (8001a64 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001a52:	4013      	ands	r3, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6093      	str	r3, [r2, #8]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	5fffffc0 	.word	0x5fffffc0

08001a68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a7c:	d101      	bne.n	8001a82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <LL_ADC_EnableInternalRegulator+0x24>)
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	6fffffc0 	.word	0x6fffffc0

08001ab8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001acc:	d101      	bne.n	8001ad2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <LL_ADC_Enable+0x24>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	7fffffc0 	.word	0x7fffffc0

08001b08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <LL_ADC_IsEnabled+0x18>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <LL_ADC_IsEnabled+0x1a>
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
	...

08001b30 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <LL_ADC_REG_StartConversion+0x24>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	f043 0204 	orr.w	r2, r3, #4
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	7fffffc0 	.word	0x7fffffc0

08001b58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d101      	bne.n	8001b70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d101      	bne.n	8001b96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b089      	sub	sp, #36	; 0x24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bac:	2300      	movs	r3, #0
 8001bae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e138      	b.n	8001e30 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fa4b 	bl	8001068 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff3f 	bl	8001a68 <LL_ADC_IsDeepPowerDownEnabled>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ff25 	bl	8001a44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff5a 	bl	8001ab8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d114      	bne.n	8001c34 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff3e 	bl	8001a90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c14:	4b88      	ldr	r3, [pc, #544]	; (8001e38 <HAL_ADC_Init+0x294>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	4a88      	ldr	r2, [pc, #544]	; (8001e3c <HAL_ADC_Init+0x298>)
 8001c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c20:	099b      	lsrs	r3, r3, #6
 8001c22:	3301      	adds	r3, #1
 8001c24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c26:	e002      	b.n	8001c2e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f9      	bne.n	8001c28 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff3d 	bl	8001ab8 <LL_ADC_IsInternalRegulatorEnabled>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10d      	bne.n	8001c60 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	f043 0210 	orr.w	r2, r3, #16
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7ff ff77 	bl	8001b58 <LL_ADC_REG_IsConversionOngoing>
 8001c6a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c70:	f003 0310 	and.w	r3, r3, #16
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f040 80d2 	bne.w	8001e1e <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f040 80ce 	bne.w	8001e1e <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c8a:	f043 0202 	orr.w	r2, r3, #2
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ff36 	bl	8001b08 <LL_ADC_IsEnabled>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d110      	bne.n	8001cc4 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ca2:	4867      	ldr	r0, [pc, #412]	; (8001e40 <HAL_ADC_Init+0x29c>)
 8001ca4:	f7ff ff30 	bl	8001b08 <LL_ADC_IsEnabled>
 8001ca8:	4604      	mov	r4, r0
 8001caa:	4866      	ldr	r0, [pc, #408]	; (8001e44 <HAL_ADC_Init+0x2a0>)
 8001cac:	f7ff ff2c 	bl	8001b08 <LL_ADC_IsEnabled>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4323      	orrs	r3, r4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d105      	bne.n	8001cc4 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4862      	ldr	r0, [pc, #392]	; (8001e48 <HAL_ADC_Init+0x2a4>)
 8001cc0:	f7ff fd88 	bl	80017d4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	7d5b      	ldrb	r3, [r3, #21]
 8001cc8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cce:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8001cd4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7f1b      	ldrb	r3, [r3, #28]
 8001cda:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7f1b      	ldrb	r3, [r3, #28]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d106      	bne.n	8001cf6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	3b01      	subs	r3, #1
 8001cee:	045b      	lsls	r3, r3, #17
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d02:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68da      	ldr	r2, [r3, #12]
 8001d18:	4b4c      	ldr	r3, [pc, #304]	; (8001e4c <HAL_ADC_Init+0x2a8>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6812      	ldr	r2, [r2, #0]
 8001d20:	69b9      	ldr	r1, [r7, #24]
 8001d22:	430b      	orrs	r3, r1
 8001d24:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff14 	bl	8001b58 <LL_ADC_REG_IsConversionOngoing>
 8001d30:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff21 	bl	8001b7e <LL_ADC_INJ_IsConversionOngoing>
 8001d3c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d14a      	bne.n	8001dda <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d147      	bne.n	8001dda <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7d1b      	ldrb	r3, [r3, #20]
 8001d4e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	4b3c      	ldr	r3, [pc, #240]	; (8001e50 <HAL_ADC_Init+0x2ac>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	430b      	orrs	r3, r1
 8001d6a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d11b      	bne.n	8001dae <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691a      	ldr	r2, [r3, #16]
 8001d82:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_ADC_Init+0x2b0>)
 8001d84:	4013      	ands	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d8a:	3a01      	subs	r2, #1
 8001d8c:	0411      	lsls	r1, r2, #16
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d92:	4311      	orrs	r1, r2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	611a      	str	r2, [r3, #16]
 8001dac:	e007      	b.n	8001dbe <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fcf3 	bl	80027c0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d10c      	bne.n	8001dfc <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f023 010f 	bic.w	r1, r3, #15
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	1e5a      	subs	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dfa:	e007      	b.n	8001e0c <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 020f 	bic.w	r2, r2, #15
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f023 0303 	bic.w	r3, r3, #3
 8001e14:	f043 0201 	orr.w	r2, r3, #1
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	655a      	str	r2, [r3, #84]	; 0x54
 8001e1c:	e007      	b.n	8001e2e <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0210 	orr.w	r2, r3, #16
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3724      	adds	r7, #36	; 0x24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}
 8001e38:	24000000 	.word	0x24000000
 8001e3c:	053e2d63 	.word	0x053e2d63
 8001e40:	40022000 	.word	0x40022000
 8001e44:	40022100 	.word	0x40022100
 8001e48:	40022300 	.word	0x40022300
 8001e4c:	fff0c003 	.word	0xfff0c003
 8001e50:	ffffbffc 	.word	0xffffbffc
 8001e54:	fc00f81e 	.word	0xfc00f81e

08001e58 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e64:	484f      	ldr	r0, [pc, #316]	; (8001fa4 <HAL_ADC_Start_DMA+0x14c>)
 8001e66:	f7ff fddf 	bl	8001a28 <LL_ADC_GetMultimode>
 8001e6a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fe71 	bl	8001b58 <LL_ADC_REG_IsConversionOngoing>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 808c 	bne.w	8001f96 <HAL_ADC_Start_DMA+0x13e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_Start_DMA+0x34>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e087      	b.n	8001f9c <HAL_ADC_Start_DMA+0x144>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d002      	beq.n	8001ea6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b09      	cmp	r3, #9
 8001ea4:	d170      	bne.n	8001f88 <HAL_ADC_Start_DMA+0x130>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fb7a 	bl	80025a0 <ADC_Enable>
 8001eac:	4603      	mov	r3, r0
 8001eae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d163      	bne.n	8001f7e <HAL_ADC_Start_DMA+0x126>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001eba:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <HAL_ADC_Start_DMA+0x150>)
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a38      	ldr	r2, [pc, #224]	; (8001fac <HAL_ADC_Start_DMA+0x154>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d002      	beq.n	8001ed6 <HAL_ADC_Start_DMA+0x7e>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	e000      	b.n	8001ed8 <HAL_ADC_Start_DMA+0x80>
 8001ed6:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <HAL_ADC_Start_DMA+0x158>)
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d002      	beq.n	8001ee6 <HAL_ADC_Start_DMA+0x8e>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d105      	bne.n	8001ef2 <HAL_ADC_Start_DMA+0x9a>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <HAL_ADC_Start_DMA+0xb4>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	f023 0206 	bic.w	r2, r3, #6
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	659a      	str	r2, [r3, #88]	; 0x58
 8001f0a:	e002      	b.n	8001f12 <HAL_ADC_Start_DMA+0xba>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a27      	ldr	r2, [pc, #156]	; (8001fb4 <HAL_ADC_Start_DMA+0x15c>)
 8001f18:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1e:	4a26      	ldr	r2, [pc, #152]	; (8001fb8 <HAL_ADC_Start_DMA+0x160>)
 8001f20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	4a25      	ldr	r2, [pc, #148]	; (8001fbc <HAL_ADC_Start_DMA+0x164>)
 8001f28:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	221c      	movs	r2, #28
 8001f30:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f042 0210 	orr.w	r2, r2, #16
 8001f48:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	4619      	mov	r1, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	f7ff fd04 	bl	8001962 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3340      	adds	r3, #64	; 0x40
 8001f64:	4619      	mov	r1, r3
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f001 fba9 	bl	80036c0 <HAL_DMA_Start_IT>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fdda 	bl	8001b30 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001f7c:	e00d      	b.n	8001f9a <HAL_ADC_Start_DMA+0x142>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001f86:	e008      	b.n	8001f9a <HAL_ADC_Start_DMA+0x142>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001f94:	e001      	b.n	8001f9a <HAL_ADC_Start_DMA+0x142>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
 8001f98:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40022300 	.word	0x40022300
 8001fa8:	fffff0fe 	.word	0xfffff0fe
 8001fac:	40022100 	.word	0x40022100
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	08002699 	.word	0x08002699
 8001fb8:	08002771 	.word	0x08002771
 8001fbc:	0800278d 	.word	0x0800278d

08001fc0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b0a1      	sub	sp, #132	; 0x84
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a9a      	ldr	r2, [pc, #616]	; (8002258 <HAL_ADC_ConfigChannel+0x284>)
 8001fee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x2a>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e2bc      	b.n	8002578 <HAL_ADC_ConfigChannel+0x5a4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fda4 	bl	8001b58 <LL_ADC_REG_IsConversionOngoing>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	f040 82a1 	bne.w	800255a <HAL_ADC_ConfigChannel+0x586>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002020:	2b00      	cmp	r3, #0
 8002022:	d108      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x62>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	0e9b      	lsrs	r3, r3, #26
 800202a:	f003 031f 	and.w	r3, r3, #31
 800202e:	2201      	movs	r2, #1
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	e016      	b.n	8002064 <HAL_ADC_ConfigChannel+0x90>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002044:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002046:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002048:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800204e:	2320      	movs	r3, #32
 8002050:	e003      	b.n	800205a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002052:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	2201      	movs	r2, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	69d1      	ldr	r1, [r2, #28]
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	430b      	orrs	r3, r1
 8002070:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6818      	ldr	r0, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	6859      	ldr	r1, [r3, #4]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	461a      	mov	r2, r3
 8002080:	f7ff fc43 	bl	800190a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff fd65 	bl	8001b58 <LL_ADC_REG_IsConversionOngoing>
 800208e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fd72 	bl	8001b7e <LL_ADC_INJ_IsConversionOngoing>
 800209a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800209c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f040 80a0 	bne.w	80021e4 <HAL_ADC_ConfigChannel+0x210>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 809c 	bne.w	80021e4 <HAL_ADC_ConfigChannel+0x210>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	461a      	mov	r2, r3
 80020ba:	f7ff fc65 	bl	8001988 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0310 	and.w	r3, r3, #16
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10b      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x110>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	e00a      	b.n	80020fa <HAL_ADC_ConfigChannel+0x126>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d027      	beq.n	8002154 <HAL_ADC_ConfigChannel+0x180>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6919      	ldr	r1, [r3, #16]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002112:	f7ff fb93 	bl	800183c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6919      	ldr	r1, [r3, #16]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	7e5b      	ldrb	r3, [r3, #25]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <HAL_ADC_ConfigChannel+0x158>
 8002126:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800212a:	e000      	b.n	800212e <HAL_ADC_ConfigChannel+0x15a>
 800212c:	2300      	movs	r3, #0
 800212e:	461a      	mov	r2, r3
 8002130:	f7ff fbbd 	bl	80018ae <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	6919      	ldr	r1, [r3, #16]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	7e1b      	ldrb	r3, [r3, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d102      	bne.n	800214a <HAL_ADC_ConfigChannel+0x176>
 8002144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002148:	e000      	b.n	800214c <HAL_ADC_ConfigChannel+0x178>
 800214a:	2300      	movs	r3, #0
 800214c:	461a      	mov	r2, r3
 800214e:	f7ff fb95 	bl	800187c <LL_ADC_SetDataRightShift>
 8002152:	e047      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x210>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800215a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	069b      	lsls	r3, r3, #26
 8002164:	429a      	cmp	r2, r3
 8002166:	d107      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x1a4>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002176:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800217e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	069b      	lsls	r3, r3, #26
 8002188:	429a      	cmp	r2, r3
 800218a:	d107      	bne.n	800219c <HAL_ADC_ConfigChannel+0x1c8>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800219a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	069b      	lsls	r3, r3, #26
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d107      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x1ec>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021be:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	069b      	lsls	r3, r3, #26
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d107      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x210>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021e2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fc8d 	bl	8001b08 <LL_ADC_IsEnabled>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 81bb 	bne.w	800256c <HAL_ADC_ConfigChannel+0x598>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	6819      	ldr	r1, [r3, #0]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	461a      	mov	r2, r3
 8002204:	f7ff fbec 	bl	80019e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_ADC_ConfigChannel+0x284>)
 800220e:	4293      	cmp	r3, r2
 8002210:	f040 8130 	bne.w	8002474 <HAL_ADC_ConfigChannel+0x4a0>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10b      	bne.n	800223c <HAL_ADC_ConfigChannel+0x268>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	3301      	adds	r3, #1
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	2b09      	cmp	r3, #9
 8002232:	bf94      	ite	ls
 8002234:	2301      	movls	r3, #1
 8002236:	2300      	movhi	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e01b      	b.n	8002274 <HAL_ADC_ConfigChannel+0x2a0>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800224a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800224e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d103      	bne.n	800225c <HAL_ADC_ConfigChannel+0x288>
    return 32U;
 8002254:	2320      	movs	r3, #32
 8002256:	e005      	b.n	8002264 <HAL_ADC_ConfigChannel+0x290>
 8002258:	47ff0000 	.word	0x47ff0000
  return __builtin_clz(value);
 800225c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	3301      	adds	r3, #1
 8002266:	f003 031f 	and.w	r3, r3, #31
 800226a:	2b09      	cmp	r3, #9
 800226c:	bf94      	ite	ls
 800226e:	2301      	movls	r3, #1
 8002270:	2300      	movhi	r3, #0
 8002272:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002274:	2b00      	cmp	r3, #0
 8002276:	d079      	beq.n	800236c <HAL_ADC_ConfigChannel+0x398>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002280:	2b00      	cmp	r3, #0
 8002282:	d107      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x2c0>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	3301      	adds	r3, #1
 800228c:	069b      	lsls	r3, r3, #26
 800228e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002292:	e015      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x2ec>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80022a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022a4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80022a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x2dc>
    return 32U;
 80022ac:	2320      	movs	r3, #32
 80022ae:	e003      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x2e4>
  return __builtin_clz(value);
 80022b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	069b      	lsls	r3, r3, #26
 80022bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x30c>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	3301      	adds	r3, #1
 80022d4:	f003 031f 	and.w	r3, r3, #31
 80022d8:	2101      	movs	r1, #1
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	e017      	b.n	8002310 <HAL_ADC_ConfigChannel+0x33c>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80022f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x328>
    return 32U;
 80022f8:	2320      	movs	r3, #32
 80022fa:	e003      	b.n	8002304 <HAL_ADC_ConfigChannel+0x330>
  return __builtin_clz(value);
 80022fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	3301      	adds	r3, #1
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f303 	lsl.w	r3, r1, r3
 8002310:	ea42 0103 	orr.w	r1, r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10a      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x362>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0e9b      	lsrs	r3, r3, #26
 8002326:	3301      	adds	r3, #1
 8002328:	f003 021f 	and.w	r2, r3, #31
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	051b      	lsls	r3, r3, #20
 8002334:	e018      	b.n	8002368 <HAL_ADC_ConfigChannel+0x394>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800233e:	fa93 f3a3 	rbit	r3, r3
 8002342:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 800234e:	2320      	movs	r3, #32
 8002350:	e003      	b.n	800235a <HAL_ADC_ConfigChannel+0x386>
  return __builtin_clz(value);
 8002352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002354:	fab3 f383 	clz	r3, r3
 8002358:	b2db      	uxtb	r3, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f003 021f 	and.w	r2, r3, #31
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002368:	430b      	orrs	r3, r1
 800236a:	e07e      	b.n	800246a <HAL_ADC_ConfigChannel+0x496>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x3b4>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	3301      	adds	r3, #1
 8002380:	069b      	lsls	r3, r3, #26
 8002382:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002386:	e015      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x3e0>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023a0:	2320      	movs	r3, #32
 80023a2:	e003      	b.n	80023ac <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	fab3 f383 	clz	r3, r3
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	3301      	adds	r3, #1
 80023ae:	069b      	lsls	r3, r3, #26
 80023b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ADC_ConfigChannel+0x400>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	3301      	adds	r3, #1
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f303 	lsl.w	r3, r1, r3
 80023d2:	e017      	b.n	8002404 <HAL_ADC_ConfigChannel+0x430>
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	61bb      	str	r3, [r7, #24]
  return result;
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d101      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x41c>
    return 32U;
 80023ec:	2320      	movs	r3, #32
 80023ee:	e003      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x424>
  return __builtin_clz(value);
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	fab3 f383 	clz	r3, r3
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	3301      	adds	r3, #1
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	2101      	movs	r1, #1
 8002400:	fa01 f303 	lsl.w	r3, r1, r3
 8002404:	ea42 0103 	orr.w	r1, r2, r3
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10d      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x45c>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	0e9b      	lsrs	r3, r3, #26
 800241a:	3301      	adds	r3, #1
 800241c:	f003 021f 	and.w	r2, r3, #31
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	3b1e      	subs	r3, #30
 8002428:	051b      	lsls	r3, r3, #20
 800242a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800242e:	e01b      	b.n	8002468 <HAL_ADC_ConfigChannel+0x494>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	60fb      	str	r3, [r7, #12]
  return result;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x478>
    return 32U;
 8002448:	2320      	movs	r3, #32
 800244a:	e003      	b.n	8002454 <HAL_ADC_ConfigChannel+0x480>
  return __builtin_clz(value);
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	fab3 f383 	clz	r3, r3
 8002452:	b2db      	uxtb	r3, r3
 8002454:	3301      	adds	r3, #1
 8002456:	f003 021f 	and.w	r2, r3, #31
 800245a:	4613      	mov	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	3b1e      	subs	r3, #30
 8002462:	051b      	lsls	r3, r3, #20
 8002464:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002468:	430b      	orrs	r3, r1
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	6892      	ldr	r2, [r2, #8]
 800246e:	4619      	mov	r1, r3
 8002470:	f7ff fa8a 	bl	8001988 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	da77      	bge.n	800256c <HAL_ADC_ConfigChannel+0x598>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800247c:	4840      	ldr	r0, [pc, #256]	; (8002580 <HAL_ADC_ConfigChannel+0x5ac>)
 800247e:	f7ff f9cf 	bl	8001820 <LL_ADC_GetCommonPathInternalCh>
 8002482:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002484:	483f      	ldr	r0, [pc, #252]	; (8002584 <HAL_ADC_ConfigChannel+0x5b0>)
 8002486:	f7ff fb3f 	bl	8001b08 <LL_ADC_IsEnabled>
 800248a:	4604      	mov	r4, r0
 800248c:	483e      	ldr	r0, [pc, #248]	; (8002588 <HAL_ADC_ConfigChannel+0x5b4>)
 800248e:	f7ff fb3b 	bl	8001b08 <LL_ADC_IsEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	4323      	orrs	r3, r4
 8002496:	2b00      	cmp	r3, #0
 8002498:	d155      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x572>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a3b      	ldr	r2, [pc, #236]	; (800258c <HAL_ADC_ConfigChannel+0x5b8>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d122      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x516>
 80024a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d11d      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x516>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a35      	ldr	r2, [pc, #212]	; (8002588 <HAL_ADC_ConfigChannel+0x5b4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d159      	bne.n	800256c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024be:	4619      	mov	r1, r3
 80024c0:	482f      	ldr	r0, [pc, #188]	; (8002580 <HAL_ADC_ConfigChannel+0x5ac>)
 80024c2:	f7ff f99a 	bl	80017fa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024c6:	4b32      	ldr	r3, [pc, #200]	; (8002590 <HAL_ADC_ConfigChannel+0x5bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	099b      	lsrs	r3, r3, #6
 80024cc:	4a31      	ldr	r2, [pc, #196]	; (8002594 <HAL_ADC_ConfigChannel+0x5c0>)
 80024ce:	fba2 2303 	umull	r2, r3, r2, r3
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	3301      	adds	r3, #1
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024da:	e002      	b.n	80024e2 <HAL_ADC_ConfigChannel+0x50e>
              {
                wait_loop_index--;
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	3b01      	subs	r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f9      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x508>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e8:	e040      	b.n	800256c <HAL_ADC_ConfigChannel+0x598>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2a      	ldr	r2, [pc, #168]	; (8002598 <HAL_ADC_ConfigChannel+0x5c4>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d111      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x544>
 80024f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x544>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a21      	ldr	r2, [pc, #132]	; (8002588 <HAL_ADC_ConfigChannel+0x5b4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d131      	bne.n	800256c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800250e:	4619      	mov	r1, r3
 8002510:	481b      	ldr	r0, [pc, #108]	; (8002580 <HAL_ADC_ConfigChannel+0x5ac>)
 8002512:	f7ff f972 	bl	80017fa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002516:	e029      	b.n	800256c <HAL_ADC_ConfigChannel+0x598>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1f      	ldr	r2, [pc, #124]	; (800259c <HAL_ADC_ConfigChannel+0x5c8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d124      	bne.n	800256c <HAL_ADC_ConfigChannel+0x598>
 8002522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002524:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d11f      	bne.n	800256c <HAL_ADC_ConfigChannel+0x598>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a15      	ldr	r2, [pc, #84]	; (8002588 <HAL_ADC_ConfigChannel+0x5b4>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d11a      	bne.n	800256c <HAL_ADC_ConfigChannel+0x598>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800253c:	4619      	mov	r1, r3
 800253e:	4810      	ldr	r0, [pc, #64]	; (8002580 <HAL_ADC_ConfigChannel+0x5ac>)
 8002540:	f7ff f95b 	bl	80017fa <LL_ADC_SetCommonPathInternalCh>
 8002544:	e012      	b.n	800256c <HAL_ADC_ConfigChannel+0x598>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	f043 0220 	orr.w	r2, r3, #32
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002558:	e008      	b.n	800256c <HAL_ADC_ConfigChannel+0x598>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	f043 0220 	orr.w	r2, r3, #32
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002574:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002578:	4618      	mov	r0, r3
 800257a:	3784      	adds	r7, #132	; 0x84
 800257c:	46bd      	mov	sp, r7
 800257e:	bd90      	pop	{r4, r7, pc}
 8002580:	40022300 	.word	0x40022300
 8002584:	40022000 	.word	0x40022000
 8002588:	40022100 	.word	0x40022100
 800258c:	cb840000 	.word	0xcb840000
 8002590:	24000000 	.word	0x24000000
 8002594:	053e2d63 	.word	0x053e2d63
 8002598:	bac04000 	.word	0xbac04000
 800259c:	cfb80000 	.word	0xcfb80000

080025a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff faab 	bl	8001b08 <LL_ADC_IsEnabled>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d161      	bne.n	800267c <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	4b32      	ldr	r3, [pc, #200]	; (8002688 <ADC_Enable+0xe8>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00d      	beq.n	80025e2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f043 0210 	orr.w	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	f043 0201 	orr.w	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e04d      	b.n	800267e <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff fa7a 	bl	8001ae0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025ec:	f7ff f8ac 	bl	8001748 <HAL_GetTick>
 80025f0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025f2:	4826      	ldr	r0, [pc, #152]	; (800268c <ADC_Enable+0xec>)
 80025f4:	f7ff fa18 	bl	8001a28 <LL_ADC_GetMultimode>
 80025f8:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a24      	ldr	r2, [pc, #144]	; (8002690 <ADC_Enable+0xf0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d002      	beq.n	800260a <ADC_Enable+0x6a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	e000      	b.n	800260c <ADC_Enable+0x6c>
 800260a:	4b22      	ldr	r3, [pc, #136]	; (8002694 <ADC_Enable+0xf4>)
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	4293      	cmp	r3, r2
 8002612:	d02c      	beq.n	800266e <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d130      	bne.n	800267c <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800261a:	e028      	b.n	800266e <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fa71 	bl	8001b08 <LL_ADC_IsEnabled>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d104      	bne.n	8002636 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7ff fa55 	bl	8001ae0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002636:	f7ff f887 	bl	8001748 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d914      	bls.n	800266e <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b01      	cmp	r3, #1
 8002650:	d00d      	beq.n	800266e <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	f043 0210 	orr.w	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f043 0201 	orr.w	r2, r3, #1
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e007      	b.n	800267e <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d1cf      	bne.n	800261c <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	8000003f 	.word	0x8000003f
 800268c:	40022300 	.word	0x40022300
 8002690:	40022100 	.word	0x40022100
 8002694:	40022000 	.word	0x40022000

08002698 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d14b      	bne.n	800274a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0308 	and.w	r3, r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d021      	beq.n	8002710 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff f907 	bl	80018e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d032      	beq.n	8002742 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d12b      	bne.n	8002742 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d11f      	bne.n	8002742 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54
 800270e:	e018      	b.n	8002742 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d111      	bne.n	8002742 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7fe f844 	bl	80007d0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002748:	e00e      	b.n	8002768 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fc32 	bl	8001fc0 <HAL_ADC_ErrorCallback>
}
 800275c:	e004      	b.n	8002768 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	4798      	blx	r3
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7fe f814 	bl	80007ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002798:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027aa:	f043 0204 	orr.w	r2, r3, #4
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff fc04 	bl	8001fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027b8:	bf00      	nop
 80027ba:	3710      	adds	r7, #16
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80027c8:	4b5f      	ldr	r3, [pc, #380]	; (8002948 <ADC_ConfigureBoostMode+0x188>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01c      	beq.n	800280e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80027d4:	f003 fe9c 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 80027d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027e2:	d010      	beq.n	8002806 <ADC_ConfigureBoostMode+0x46>
 80027e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80027e8:	d871      	bhi.n	80028ce <ADC_ConfigureBoostMode+0x10e>
 80027ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ee:	d002      	beq.n	80027f6 <ADC_ConfigureBoostMode+0x36>
 80027f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027f4:	d16b      	bne.n	80028ce <ADC_ConfigureBoostMode+0x10e>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	0c1b      	lsrs	r3, r3, #16
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002802:	60fb      	str	r3, [r7, #12]
        break;
 8002804:	e066      	b.n	80028d4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	60fb      	str	r3, [r7, #12]
        break;
 800280c:	e062      	b.n	80028d4 <ADC_ConfigureBoostMode+0x114>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800280e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002812:	f004 fde5 	bl	80073e0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002816:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002820:	d051      	beq.n	80028c6 <ADC_ConfigureBoostMode+0x106>
 8002822:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002826:	d854      	bhi.n	80028d2 <ADC_ConfigureBoostMode+0x112>
 8002828:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800282c:	d047      	beq.n	80028be <ADC_ConfigureBoostMode+0xfe>
 800282e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002832:	d84e      	bhi.n	80028d2 <ADC_ConfigureBoostMode+0x112>
 8002834:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002838:	d03d      	beq.n	80028b6 <ADC_ConfigureBoostMode+0xf6>
 800283a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800283e:	d848      	bhi.n	80028d2 <ADC_ConfigureBoostMode+0x112>
 8002840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002844:	d033      	beq.n	80028ae <ADC_ConfigureBoostMode+0xee>
 8002846:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800284a:	d842      	bhi.n	80028d2 <ADC_ConfigureBoostMode+0x112>
 800284c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002850:	d029      	beq.n	80028a6 <ADC_ConfigureBoostMode+0xe6>
 8002852:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002856:	d83c      	bhi.n	80028d2 <ADC_ConfigureBoostMode+0x112>
 8002858:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800285c:	d01a      	beq.n	8002894 <ADC_ConfigureBoostMode+0xd4>
 800285e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002862:	d836      	bhi.n	80028d2 <ADC_ConfigureBoostMode+0x112>
 8002864:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002868:	d014      	beq.n	8002894 <ADC_ConfigureBoostMode+0xd4>
 800286a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800286e:	d830      	bhi.n	80028d2 <ADC_ConfigureBoostMode+0x112>
 8002870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002874:	d00e      	beq.n	8002894 <ADC_ConfigureBoostMode+0xd4>
 8002876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800287a:	d82a      	bhi.n	80028d2 <ADC_ConfigureBoostMode+0x112>
 800287c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002880:	d008      	beq.n	8002894 <ADC_ConfigureBoostMode+0xd4>
 8002882:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002886:	d824      	bhi.n	80028d2 <ADC_ConfigureBoostMode+0x112>
 8002888:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800288c:	d002      	beq.n	8002894 <ADC_ConfigureBoostMode+0xd4>
 800288e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002892:	d11e      	bne.n	80028d2 <ADC_ConfigureBoostMode+0x112>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	0c9b      	lsrs	r3, r3, #18
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	60fb      	str	r3, [r7, #12]
        break;
 80028a4:	e016      	b.n	80028d4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	091b      	lsrs	r3, r3, #4
 80028aa:	60fb      	str	r3, [r7, #12]
        break;
 80028ac:	e012      	b.n	80028d4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	60fb      	str	r3, [r7, #12]
        break;
 80028b4:	e00e      	b.n	80028d4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	60fb      	str	r3, [r7, #12]
        break;
 80028bc:	e00a      	b.n	80028d4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	09db      	lsrs	r3, r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]
        break;
 80028c4:	e006      	b.n	80028d4 <ADC_ConfigureBoostMode+0x114>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	60fb      	str	r3, [r7, #12]
        break;
 80028cc:	e002      	b.n	80028d4 <ADC_ConfigureBoostMode+0x114>
        break;
 80028ce:	bf00      	nop
 80028d0:	e000      	b.n	80028d4 <ADC_ConfigureBoostMode+0x114>
      default:
        break;
 80028d2:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	085b      	lsrs	r3, r3, #1
 80028d8:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <ADC_ConfigureBoostMode+0x18c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d808      	bhi.n	80028f4 <ADC_ConfigureBoostMode+0x134>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80028f0:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80028f2:	e025      	b.n	8002940 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 12500000UL)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <ADC_ConfigureBoostMode+0x190>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d80a      	bhi.n	8002912 <ADC_ConfigureBoostMode+0x152>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800290e:	609a      	str	r2, [r3, #8]
}
 8002910:	e016      	b.n	8002940 <ADC_ConfigureBoostMode+0x180>
  else if (freq <= 25000000UL)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <ADC_ConfigureBoostMode+0x194>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d80a      	bhi.n	8002930 <ADC_ConfigureBoostMode+0x170>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292c:	609a      	str	r2, [r3, #8]
}
 800292e:	e007      	b.n	8002940 <ADC_ConfigureBoostMode+0x180>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800293e:	609a      	str	r2, [r3, #8]
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40022300 	.word	0x40022300
 800294c:	005f5e10 	.word	0x005f5e10
 8002950:	00bebc20 	.word	0x00bebc20
 8002954:	017d7840 	.word	0x017d7840

08002958 <LL_ADC_IsEnabled>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <LL_ADC_IsEnabled+0x18>
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <LL_ADC_IsEnabled+0x1a>
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_ADC_REG_IsConversionOngoing>:
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0304 	and.w	r3, r3, #4
 800298e:	2b04      	cmp	r3, #4
 8002990:	d101      	bne.n	8002996 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b09f      	sub	sp, #124	; 0x7c
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029be:	2302      	movs	r3, #2
 80029c0:	e080      	b.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a3d      	ldr	r2, [pc, #244]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d102      	bne.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029dc:	4b3c      	ldr	r3, [pc, #240]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	e001      	b.n	80029e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10b      	bne.n	8002a04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f0:	f043 0220 	orr.w	r2, r3, #32
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e05f      	b.n	8002ac4 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff ffb9 	bl	800297e <LL_ADC_REG_IsConversionOngoing>
 8002a0c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff ffb3 	bl	800297e <LL_ADC_REG_IsConversionOngoing>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d141      	bne.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002a1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d13e      	bne.n	8002aa2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a24:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8002a26:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a40:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a42:	4822      	ldr	r0, [pc, #136]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a44:	f7ff ff88 	bl	8002958 <LL_ADC_IsEnabled>
 8002a48:	4604      	mov	r4, r0
 8002a4a:	4821      	ldr	r0, [pc, #132]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a4c:	f7ff ff84 	bl	8002958 <LL_ADC_IsEnabled>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4323      	orrs	r3, r4
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d12e      	bne.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	6811      	ldr	r1, [r2, #0]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	6892      	ldr	r2, [r2, #8]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a70:	e021      	b.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a7e:	4813      	ldr	r0, [pc, #76]	; (8002acc <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002a80:	f7ff ff6a 	bl	8002958 <LL_ADC_IsEnabled>
 8002a84:	4604      	mov	r4, r0
 8002a86:	4812      	ldr	r0, [pc, #72]	; (8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002a88:	f7ff ff66 	bl	8002958 <LL_ADC_IsEnabled>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4323      	orrs	r3, r4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d110      	bne.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a9e:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002aa0:	e009      	b.n	8002ab6 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	f043 0220 	orr.w	r2, r3, #32
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ab4:	e000      	b.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ac0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	377c      	adds	r7, #124	; 0x7c
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd90      	pop	{r4, r7, pc}
 8002acc:	40022000 	.word	0x40022000
 8002ad0:	40022100 	.word	0x40022100
 8002ad4:	40022300 	.word	0x40022300
 8002ad8:	fffff0e0 	.word	0xfffff0e0

08002adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <__NVIC_SetPriorityGrouping+0x40>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af8:	4013      	ands	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <__NVIC_SetPriorityGrouping+0x40>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00
 8002b20:	05fa0000 	.word	0x05fa0000

08002b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b28:	4b04      	ldr	r3, [pc, #16]	; (8002b3c <__NVIC_GetPriorityGrouping+0x18>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 0307 	and.w	r3, r3, #7
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db0b      	blt.n	8002b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4907      	ldr	r1, [pc, #28]	; (8002b78 <__NVIC_EnableIRQ+0x38>)
 8002b5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2001      	movs	r0, #1
 8002b62:	fa00 f202 	lsl.w	r2, r0, r2
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100

08002b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db0a      	blt.n	8002ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	490c      	ldr	r1, [pc, #48]	; (8002bc8 <__NVIC_SetPriority+0x4c>)
 8002b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba4:	e00a      	b.n	8002bbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4908      	ldr	r1, [pc, #32]	; (8002bcc <__NVIC_SetPriority+0x50>)
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	3b04      	subs	r3, #4
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	440b      	add	r3, r1
 8002bba:	761a      	strb	r2, [r3, #24]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	; 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f1c3 0307 	rsb	r3, r3, #7
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	bf28      	it	cs
 8002bee:	2304      	movcs	r3, #4
 8002bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d902      	bls.n	8002c00 <NVIC_EncodePriority+0x30>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3b03      	subs	r3, #3
 8002bfe:	e000      	b.n	8002c02 <NVIC_EncodePriority+0x32>
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	401a      	ands	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c18:	f04f 31ff 	mov.w	r1, #4294967295
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43d9      	mvns	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	4313      	orrs	r3, r2
         );
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3724      	adds	r7, #36	; 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c48:	d301      	bcc.n	8002c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00f      	b.n	8002c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <SysTick_Config+0x40>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c56:	210f      	movs	r1, #15
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f7ff ff8e 	bl	8002b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SysTick_Config+0x40>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c66:	4b04      	ldr	r3, [pc, #16]	; (8002c78 <SysTick_Config+0x40>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff29 	bl	8002adc <__NVIC_SetPriorityGrouping>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca0:	f7ff ff40 	bl	8002b24 <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff90 	bl	8002bd0 <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5f 	bl	8002b7c <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff33 	bl	8002b40 <__NVIC_EnableIRQ>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ffa4 	bl	8002c38 <SysTick_Config>
 8002cf0:	4603      	mov	r3, r0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b082      	sub	sp, #8
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e014      	b.n	8002d36 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	791b      	ldrb	r3, [r3, #4]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d105      	bne.n	8002d22 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7fe fa91 	bl	8001244 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2201      	movs	r2, #1
 8002d32:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	795b      	ldrb	r3, [r3, #5]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_DAC_ConfigChannel+0x18>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e11d      	b.n	8002f94 <HAL_DAC_ConfigChannel+0x254>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2202      	movs	r2, #2
 8002d62:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d174      	bne.n	8002e56 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fcec 	bl	8001748 <HAL_GetTick>
 8002d70:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d134      	bne.n	8002de2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d78:	e011      	b.n	8002d9e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002d7a:	f7fe fce5 	bl	8001748 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d90a      	bls.n	8002d9e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	f043 0208 	orr.w	r2, r3, #8
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2203      	movs	r2, #3
 8002d98:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e0fa      	b.n	8002f94 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002da4:	4b7d      	ldr	r3, [pc, #500]	; (8002f9c <HAL_DAC_ConfigChannel+0x25c>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e6      	bne.n	8002d7a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7fe fcd7 	bl	8001760 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	6992      	ldr	r2, [r2, #24]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
 8002dbc:	e01e      	b.n	8002dfc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002dbe:	f7fe fcc3 	bl	8001748 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d90a      	bls.n	8002de2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	f043 0208 	orr.w	r2, r3, #8
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2203      	movs	r2, #3
 8002ddc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e0d8      	b.n	8002f94 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	dbe8      	blt.n	8002dbe <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002dec:	2001      	movs	r0, #1
 8002dee:	f7fe fcb7 	bl	8001760 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68ba      	ldr	r2, [r7, #8]
 8002df8:	6992      	ldr	r2, [r2, #24]
 8002dfa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	ea02 0103 	and.w	r1, r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	69da      	ldr	r2, [r3, #28]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f003 0310 	and.w	r3, r3, #16
 8002e20:	409a      	lsls	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	430a      	orrs	r2, r1
 8002e28:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f003 0310 	and.w	r3, r3, #16
 8002e36:	21ff      	movs	r1, #255	; 0xff
 8002e38:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	ea02 0103 	and.w	r1, r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f003 0310 	and.w	r3, r3, #16
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	430a      	orrs	r2, r1
 8002e54:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d11d      	bne.n	8002e9a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	221f      	movs	r2, #31
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	4013      	ands	r3, r2
 8002e78:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f003 0310 	and.w	r3, r3, #16
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	697a      	ldr	r2, [r7, #20]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d102      	bne.n	8002ec4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
 8002ec2:	e00f      	b.n	8002ee4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d102      	bne.n	8002ed2 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	e008      	b.n	8002ee4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002eda:	2301      	movs	r3, #1
 8002edc:	61fb      	str	r3, [r7, #28]
 8002ede:	e001      	b.n	8002ee4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0310 	and.w	r3, r3, #16
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43da      	mvns	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	400a      	ands	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43db      	mvns	r3, r3
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4013      	ands	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	22c0      	movs	r2, #192	; 0xc0
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	400a      	ands	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3720      	adds	r7, #32
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20008000 	.word	0x20008000

08002fa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7fe fbce 	bl	8001748 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e37f      	b.n	80036b8 <HAL_DMA_Init+0x718>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a66      	ldr	r2, [pc, #408]	; (8003158 <HAL_DMA_Init+0x1b8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a65      	ldr	r2, [pc, #404]	; (800315c <HAL_DMA_Init+0x1bc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_DMA_Init+0x1c0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a62      	ldr	r2, [pc, #392]	; (8003164 <HAL_DMA_Init+0x1c4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a60      	ldr	r2, [pc, #384]	; (8003168 <HAL_DMA_Init+0x1c8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a5f      	ldr	r2, [pc, #380]	; (800316c <HAL_DMA_Init+0x1cc>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a5d      	ldr	r2, [pc, #372]	; (8003170 <HAL_DMA_Init+0x1d0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a5c      	ldr	r2, [pc, #368]	; (8003174 <HAL_DMA_Init+0x1d4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a5a      	ldr	r2, [pc, #360]	; (8003178 <HAL_DMA_Init+0x1d8>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a59      	ldr	r2, [pc, #356]	; (800317c <HAL_DMA_Init+0x1dc>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a57      	ldr	r2, [pc, #348]	; (8003180 <HAL_DMA_Init+0x1e0>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a56      	ldr	r2, [pc, #344]	; (8003184 <HAL_DMA_Init+0x1e4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a54      	ldr	r2, [pc, #336]	; (8003188 <HAL_DMA_Init+0x1e8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a53      	ldr	r2, [pc, #332]	; (800318c <HAL_DMA_Init+0x1ec>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a51      	ldr	r2, [pc, #324]	; (8003190 <HAL_DMA_Init+0x1f0>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_DMA_Init+0xb8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a50      	ldr	r2, [pc, #320]	; (8003194 <HAL_DMA_Init+0x1f4>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <HAL_DMA_Init+0xbc>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_DMA_Init+0xbe>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 813c 	beq.w	80032dc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a37      	ldr	r2, [pc, #220]	; (8003158 <HAL_DMA_Init+0x1b8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d04a      	beq.n	8003114 <HAL_DMA_Init+0x174>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a36      	ldr	r2, [pc, #216]	; (800315c <HAL_DMA_Init+0x1bc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d045      	beq.n	8003114 <HAL_DMA_Init+0x174>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a34      	ldr	r2, [pc, #208]	; (8003160 <HAL_DMA_Init+0x1c0>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d040      	beq.n	8003114 <HAL_DMA_Init+0x174>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a33      	ldr	r2, [pc, #204]	; (8003164 <HAL_DMA_Init+0x1c4>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d03b      	beq.n	8003114 <HAL_DMA_Init+0x174>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a31      	ldr	r2, [pc, #196]	; (8003168 <HAL_DMA_Init+0x1c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d036      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a30      	ldr	r2, [pc, #192]	; (800316c <HAL_DMA_Init+0x1cc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d031      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a2e      	ldr	r2, [pc, #184]	; (8003170 <HAL_DMA_Init+0x1d0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d02c      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2d      	ldr	r2, [pc, #180]	; (8003174 <HAL_DMA_Init+0x1d4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d027      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a2b      	ldr	r2, [pc, #172]	; (8003178 <HAL_DMA_Init+0x1d8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d022      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2a      	ldr	r2, [pc, #168]	; (800317c <HAL_DMA_Init+0x1dc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d01d      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a28      	ldr	r2, [pc, #160]	; (8003180 <HAL_DMA_Init+0x1e0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d018      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a27      	ldr	r2, [pc, #156]	; (8003184 <HAL_DMA_Init+0x1e4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d013      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a25      	ldr	r2, [pc, #148]	; (8003188 <HAL_DMA_Init+0x1e8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d00e      	beq.n	8003114 <HAL_DMA_Init+0x174>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a24      	ldr	r2, [pc, #144]	; (800318c <HAL_DMA_Init+0x1ec>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d009      	beq.n	8003114 <HAL_DMA_Init+0x174>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a22      	ldr	r2, [pc, #136]	; (8003190 <HAL_DMA_Init+0x1f0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_DMA_Init+0x174>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a21      	ldr	r2, [pc, #132]	; (8003194 <HAL_DMA_Init+0x1f4>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d108      	bne.n	8003126 <HAL_DMA_Init+0x186>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0201 	bic.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	e007      	b.n	8003136 <HAL_DMA_Init+0x196>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0201 	bic.w	r2, r2, #1
 8003134:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003136:	e02f      	b.n	8003198 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003138:	f7fe fb06 	bl	8001748 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b05      	cmp	r3, #5
 8003144:	d928      	bls.n	8003198 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2220      	movs	r2, #32
 800314a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2203      	movs	r2, #3
 8003150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e2af      	b.n	80036b8 <HAL_DMA_Init+0x718>
 8003158:	40020010 	.word	0x40020010
 800315c:	40020028 	.word	0x40020028
 8003160:	40020040 	.word	0x40020040
 8003164:	40020058 	.word	0x40020058
 8003168:	40020070 	.word	0x40020070
 800316c:	40020088 	.word	0x40020088
 8003170:	400200a0 	.word	0x400200a0
 8003174:	400200b8 	.word	0x400200b8
 8003178:	40020410 	.word	0x40020410
 800317c:	40020428 	.word	0x40020428
 8003180:	40020440 	.word	0x40020440
 8003184:	40020458 	.word	0x40020458
 8003188:	40020470 	.word	0x40020470
 800318c:	40020488 	.word	0x40020488
 8003190:	400204a0 	.word	0x400204a0
 8003194:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1c8      	bne.n	8003138 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4b73      	ldr	r3, [pc, #460]	; (8003380 <HAL_DMA_Init+0x3e0>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80031be:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031d6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d107      	bne.n	80031fc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	4313      	orrs	r3, r2
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b28      	cmp	r3, #40	; 0x28
 8003202:	d903      	bls.n	800320c <HAL_DMA_Init+0x26c>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b2e      	cmp	r3, #46	; 0x2e
 800320a:	d91f      	bls.n	800324c <HAL_DMA_Init+0x2ac>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b3e      	cmp	r3, #62	; 0x3e
 8003212:	d903      	bls.n	800321c <HAL_DMA_Init+0x27c>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b42      	cmp	r3, #66	; 0x42
 800321a:	d917      	bls.n	800324c <HAL_DMA_Init+0x2ac>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b46      	cmp	r3, #70	; 0x46
 8003222:	d903      	bls.n	800322c <HAL_DMA_Init+0x28c>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b48      	cmp	r3, #72	; 0x48
 800322a:	d90f      	bls.n	800324c <HAL_DMA_Init+0x2ac>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b4e      	cmp	r3, #78	; 0x4e
 8003232:	d903      	bls.n	800323c <HAL_DMA_Init+0x29c>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b52      	cmp	r3, #82	; 0x52
 800323a:	d907      	bls.n	800324c <HAL_DMA_Init+0x2ac>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b73      	cmp	r3, #115	; 0x73
 8003242:	d905      	bls.n	8003250 <HAL_DMA_Init+0x2b0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b77      	cmp	r3, #119	; 0x77
 800324a:	d801      	bhi.n	8003250 <HAL_DMA_Init+0x2b0>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_DMA_Init+0x2b2>
 8003250:	2300      	movs	r3, #0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f023 0307 	bic.w	r3, r3, #7
 8003274:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	2b04      	cmp	r3, #4
 8003286:	d117      	bne.n	80032b8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00e      	beq.n	80032b8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f001 fe72 	bl	8004f84 <DMA_CheckFifoParam>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2240      	movs	r2, #64	; 0x40
 80032aa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e1ff      	b.n	80036b8 <HAL_DMA_Init+0x718>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f001 fdad 	bl	8004e20 <DMA_CalcBaseAndBitshift>
 80032c6:	4603      	mov	r3, r0
 80032c8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ce:	f003 031f 	and.w	r3, r3, #31
 80032d2:	223f      	movs	r2, #63	; 0x3f
 80032d4:	409a      	lsls	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	e0fe      	b.n	80034da <HAL_DMA_Init+0x53a>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a28      	ldr	r2, [pc, #160]	; (8003384 <HAL_DMA_Init+0x3e4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d04a      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a27      	ldr	r2, [pc, #156]	; (8003388 <HAL_DMA_Init+0x3e8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d045      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a25      	ldr	r2, [pc, #148]	; (800338c <HAL_DMA_Init+0x3ec>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d040      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a24      	ldr	r2, [pc, #144]	; (8003390 <HAL_DMA_Init+0x3f0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d03b      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a22      	ldr	r2, [pc, #136]	; (8003394 <HAL_DMA_Init+0x3f4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d036      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a21      	ldr	r2, [pc, #132]	; (8003398 <HAL_DMA_Init+0x3f8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d031      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a1f      	ldr	r2, [pc, #124]	; (800339c <HAL_DMA_Init+0x3fc>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d02c      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a1e      	ldr	r2, [pc, #120]	; (80033a0 <HAL_DMA_Init+0x400>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d027      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a1c      	ldr	r2, [pc, #112]	; (80033a4 <HAL_DMA_Init+0x404>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d022      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1b      	ldr	r2, [pc, #108]	; (80033a8 <HAL_DMA_Init+0x408>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d01d      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <HAL_DMA_Init+0x40c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d018      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <HAL_DMA_Init+0x410>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <HAL_DMA_Init+0x414>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00e      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <HAL_DMA_Init+0x418>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a13      	ldr	r2, [pc, #76]	; (80033bc <HAL_DMA_Init+0x41c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_DMA_Init+0x3dc>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a12      	ldr	r2, [pc, #72]	; (80033c0 <HAL_DMA_Init+0x420>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d123      	bne.n	80033c4 <HAL_DMA_Init+0x424>
 800337c:	2301      	movs	r3, #1
 800337e:	e022      	b.n	80033c6 <HAL_DMA_Init+0x426>
 8003380:	fe10803f 	.word	0xfe10803f
 8003384:	48022c08 	.word	0x48022c08
 8003388:	48022c1c 	.word	0x48022c1c
 800338c:	48022c30 	.word	0x48022c30
 8003390:	48022c44 	.word	0x48022c44
 8003394:	48022c58 	.word	0x48022c58
 8003398:	48022c6c 	.word	0x48022c6c
 800339c:	48022c80 	.word	0x48022c80
 80033a0:	48022c94 	.word	0x48022c94
 80033a4:	58025408 	.word	0x58025408
 80033a8:	5802541c 	.word	0x5802541c
 80033ac:	58025430 	.word	0x58025430
 80033b0:	58025444 	.word	0x58025444
 80033b4:	58025458 	.word	0x58025458
 80033b8:	5802546c 	.word	0x5802546c
 80033bc:	58025480 	.word	0x58025480
 80033c0:	58025494 	.word	0x58025494
 80033c4:	2300      	movs	r3, #0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d07e      	beq.n	80034c8 <HAL_DMA_Init+0x528>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a80      	ldr	r2, [pc, #512]	; (80035d0 <HAL_DMA_Init+0x630>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d021      	beq.n	8003418 <HAL_DMA_Init+0x478>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a7e      	ldr	r2, [pc, #504]	; (80035d4 <HAL_DMA_Init+0x634>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d01c      	beq.n	8003418 <HAL_DMA_Init+0x478>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a7d      	ldr	r2, [pc, #500]	; (80035d8 <HAL_DMA_Init+0x638>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d017      	beq.n	8003418 <HAL_DMA_Init+0x478>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a7b      	ldr	r2, [pc, #492]	; (80035dc <HAL_DMA_Init+0x63c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d012      	beq.n	8003418 <HAL_DMA_Init+0x478>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a7a      	ldr	r2, [pc, #488]	; (80035e0 <HAL_DMA_Init+0x640>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00d      	beq.n	8003418 <HAL_DMA_Init+0x478>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a78      	ldr	r2, [pc, #480]	; (80035e4 <HAL_DMA_Init+0x644>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d008      	beq.n	8003418 <HAL_DMA_Init+0x478>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a77      	ldr	r2, [pc, #476]	; (80035e8 <HAL_DMA_Init+0x648>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d003      	beq.n	8003418 <HAL_DMA_Init+0x478>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a75      	ldr	r2, [pc, #468]	; (80035ec <HAL_DMA_Init+0x64c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4b6e      	ldr	r3, [pc, #440]	; (80035f0 <HAL_DMA_Init+0x650>)
 8003436:	4013      	ands	r3, r2
 8003438:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d008      	beq.n	8003454 <HAL_DMA_Init+0x4b4>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b80      	cmp	r3, #128	; 0x80
 8003448:	d102      	bne.n	8003450 <HAL_DMA_Init+0x4b0>
 800344a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800344e:	e002      	b.n	8003456 <HAL_DMA_Init+0x4b6>
 8003450:	2300      	movs	r3, #0
 8003452:	e000      	b.n	8003456 <HAL_DMA_Init+0x4b6>
 8003454:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68d2      	ldr	r2, [r2, #12]
 800345a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800345c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003464:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800346c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003474:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800347c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003484:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	4b56      	ldr	r3, [pc, #344]	; (80035f4 <HAL_DMA_Init+0x654>)
 800349c:	4413      	add	r3, r2
 800349e:	4a56      	ldr	r2, [pc, #344]	; (80035f8 <HAL_DMA_Init+0x658>)
 80034a0:	fba2 2303 	umull	r2, r3, r2, r3
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	009a      	lsls	r2, r3, #2
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f001 fcb7 	bl	8004e20 <DMA_CalcBaseAndBitshift>
 80034b2:	4603      	mov	r3, r0
 80034b4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	2201      	movs	r2, #1
 80034c0:	409a      	lsls	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	e008      	b.n	80034da <HAL_DMA_Init+0x53a>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2240      	movs	r2, #64	; 0x40
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2203      	movs	r2, #3
 80034d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e0ee      	b.n	80036b8 <HAL_DMA_Init+0x718>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a47      	ldr	r2, [pc, #284]	; (80035fc <HAL_DMA_Init+0x65c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d072      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a45      	ldr	r2, [pc, #276]	; (8003600 <HAL_DMA_Init+0x660>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d06d      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a44      	ldr	r2, [pc, #272]	; (8003604 <HAL_DMA_Init+0x664>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d068      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a42      	ldr	r2, [pc, #264]	; (8003608 <HAL_DMA_Init+0x668>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d063      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a41      	ldr	r2, [pc, #260]	; (800360c <HAL_DMA_Init+0x66c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d05e      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a3f      	ldr	r2, [pc, #252]	; (8003610 <HAL_DMA_Init+0x670>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d059      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a3e      	ldr	r2, [pc, #248]	; (8003614 <HAL_DMA_Init+0x674>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d054      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a3c      	ldr	r2, [pc, #240]	; (8003618 <HAL_DMA_Init+0x678>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d04f      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a3b      	ldr	r2, [pc, #236]	; (800361c <HAL_DMA_Init+0x67c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d04a      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a39      	ldr	r2, [pc, #228]	; (8003620 <HAL_DMA_Init+0x680>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d045      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a38      	ldr	r2, [pc, #224]	; (8003624 <HAL_DMA_Init+0x684>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d040      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a36      	ldr	r2, [pc, #216]	; (8003628 <HAL_DMA_Init+0x688>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d03b      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a35      	ldr	r2, [pc, #212]	; (800362c <HAL_DMA_Init+0x68c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d036      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a33      	ldr	r2, [pc, #204]	; (8003630 <HAL_DMA_Init+0x690>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d031      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a32      	ldr	r2, [pc, #200]	; (8003634 <HAL_DMA_Init+0x694>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d02c      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a30      	ldr	r2, [pc, #192]	; (8003638 <HAL_DMA_Init+0x698>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d027      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a14      	ldr	r2, [pc, #80]	; (80035d0 <HAL_DMA_Init+0x630>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d022      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <HAL_DMA_Init+0x634>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01d      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <HAL_DMA_Init+0x638>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d018      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <HAL_DMA_Init+0x63c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d013      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a0e      	ldr	r2, [pc, #56]	; (80035e0 <HAL_DMA_Init+0x640>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00e      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a0c      	ldr	r2, [pc, #48]	; (80035e4 <HAL_DMA_Init+0x644>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <HAL_DMA_Init+0x648>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d004      	beq.n	80035ca <HAL_DMA_Init+0x62a>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a09      	ldr	r2, [pc, #36]	; (80035ec <HAL_DMA_Init+0x64c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d138      	bne.n	800363c <HAL_DMA_Init+0x69c>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e037      	b.n	800363e <HAL_DMA_Init+0x69e>
 80035ce:	bf00      	nop
 80035d0:	58025408 	.word	0x58025408
 80035d4:	5802541c 	.word	0x5802541c
 80035d8:	58025430 	.word	0x58025430
 80035dc:	58025444 	.word	0x58025444
 80035e0:	58025458 	.word	0x58025458
 80035e4:	5802546c 	.word	0x5802546c
 80035e8:	58025480 	.word	0x58025480
 80035ec:	58025494 	.word	0x58025494
 80035f0:	fffe000f 	.word	0xfffe000f
 80035f4:	a7fdabf8 	.word	0xa7fdabf8
 80035f8:	cccccccd 	.word	0xcccccccd
 80035fc:	40020010 	.word	0x40020010
 8003600:	40020028 	.word	0x40020028
 8003604:	40020040 	.word	0x40020040
 8003608:	40020058 	.word	0x40020058
 800360c:	40020070 	.word	0x40020070
 8003610:	40020088 	.word	0x40020088
 8003614:	400200a0 	.word	0x400200a0
 8003618:	400200b8 	.word	0x400200b8
 800361c:	40020410 	.word	0x40020410
 8003620:	40020428 	.word	0x40020428
 8003624:	40020440 	.word	0x40020440
 8003628:	40020458 	.word	0x40020458
 800362c:	40020470 	.word	0x40020470
 8003630:	40020488 	.word	0x40020488
 8003634:	400204a0 	.word	0x400204a0
 8003638:	400204b8 	.word	0x400204b8
 800363c:	2300      	movs	r3, #0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d032      	beq.n	80036a8 <HAL_DMA_Init+0x708>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f001 fd1a 	bl	800507c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b80      	cmp	r3, #128	; 0x80
 800364e:	d102      	bne.n	8003656 <HAL_DMA_Init+0x6b6>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800366a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d010      	beq.n	8003696 <HAL_DMA_Init+0x6f6>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b08      	cmp	r3, #8
 800367a:	d80c      	bhi.n	8003696 <HAL_DMA_Init+0x6f6>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f001 fd97 	bl	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	e008      	b.n	80036a8 <HAL_DMA_Init+0x708>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3718      	adds	r7, #24
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
 80036cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ce:	2300      	movs	r3, #0
 80036d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e226      	b.n	8003b2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_DMA_Start_IT+0x2a>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e21f      	b.n	8003b2a <HAL_DMA_Start_IT+0x46a>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	f040 820a 	bne.w	8003b14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a68      	ldr	r2, [pc, #416]	; (80038b4 <HAL_DMA_Start_IT+0x1f4>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d04a      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a66      	ldr	r2, [pc, #408]	; (80038b8 <HAL_DMA_Start_IT+0x1f8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d045      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a65      	ldr	r2, [pc, #404]	; (80038bc <HAL_DMA_Start_IT+0x1fc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d040      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a63      	ldr	r2, [pc, #396]	; (80038c0 <HAL_DMA_Start_IT+0x200>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d03b      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a62      	ldr	r2, [pc, #392]	; (80038c4 <HAL_DMA_Start_IT+0x204>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d036      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a60      	ldr	r2, [pc, #384]	; (80038c8 <HAL_DMA_Start_IT+0x208>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d031      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a5f      	ldr	r2, [pc, #380]	; (80038cc <HAL_DMA_Start_IT+0x20c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d02c      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5d      	ldr	r2, [pc, #372]	; (80038d0 <HAL_DMA_Start_IT+0x210>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d027      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5c      	ldr	r2, [pc, #368]	; (80038d4 <HAL_DMA_Start_IT+0x214>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d022      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a5a      	ldr	r2, [pc, #360]	; (80038d8 <HAL_DMA_Start_IT+0x218>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01d      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a59      	ldr	r2, [pc, #356]	; (80038dc <HAL_DMA_Start_IT+0x21c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d018      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a57      	ldr	r2, [pc, #348]	; (80038e0 <HAL_DMA_Start_IT+0x220>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a56      	ldr	r2, [pc, #344]	; (80038e4 <HAL_DMA_Start_IT+0x224>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00e      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a54      	ldr	r2, [pc, #336]	; (80038e8 <HAL_DMA_Start_IT+0x228>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d009      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a53      	ldr	r2, [pc, #332]	; (80038ec <HAL_DMA_Start_IT+0x22c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d004      	beq.n	80037ae <HAL_DMA_Start_IT+0xee>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a51      	ldr	r2, [pc, #324]	; (80038f0 <HAL_DMA_Start_IT+0x230>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d108      	bne.n	80037c0 <HAL_DMA_Start_IT+0x100>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0201 	bic.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e007      	b.n	80037d0 <HAL_DMA_Start_IT+0x110>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f001 f93e 	bl	8004a58 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a34      	ldr	r2, [pc, #208]	; (80038b4 <HAL_DMA_Start_IT+0x1f4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d04a      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a33      	ldr	r2, [pc, #204]	; (80038b8 <HAL_DMA_Start_IT+0x1f8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d045      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a31      	ldr	r2, [pc, #196]	; (80038bc <HAL_DMA_Start_IT+0x1fc>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d040      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a30      	ldr	r2, [pc, #192]	; (80038c0 <HAL_DMA_Start_IT+0x200>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d03b      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a2e      	ldr	r2, [pc, #184]	; (80038c4 <HAL_DMA_Start_IT+0x204>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d036      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a2d      	ldr	r2, [pc, #180]	; (80038c8 <HAL_DMA_Start_IT+0x208>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d031      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2b      	ldr	r2, [pc, #172]	; (80038cc <HAL_DMA_Start_IT+0x20c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d02c      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <HAL_DMA_Start_IT+0x210>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d027      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a28      	ldr	r2, [pc, #160]	; (80038d4 <HAL_DMA_Start_IT+0x214>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d022      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a27      	ldr	r2, [pc, #156]	; (80038d8 <HAL_DMA_Start_IT+0x218>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d01d      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a25      	ldr	r2, [pc, #148]	; (80038dc <HAL_DMA_Start_IT+0x21c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d018      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a24      	ldr	r2, [pc, #144]	; (80038e0 <HAL_DMA_Start_IT+0x220>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d013      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a22      	ldr	r2, [pc, #136]	; (80038e4 <HAL_DMA_Start_IT+0x224>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00e      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a21      	ldr	r2, [pc, #132]	; (80038e8 <HAL_DMA_Start_IT+0x228>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d009      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1f      	ldr	r2, [pc, #124]	; (80038ec <HAL_DMA_Start_IT+0x22c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d004      	beq.n	800387c <HAL_DMA_Start_IT+0x1bc>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1e      	ldr	r2, [pc, #120]	; (80038f0 <HAL_DMA_Start_IT+0x230>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d101      	bne.n	8003880 <HAL_DMA_Start_IT+0x1c0>
 800387c:	2301      	movs	r3, #1
 800387e:	e000      	b.n	8003882 <HAL_DMA_Start_IT+0x1c2>
 8003880:	2300      	movs	r3, #0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d036      	beq.n	80038f4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f023 021e 	bic.w	r2, r3, #30
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0216 	orr.w	r2, r2, #22
 8003898:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d03e      	beq.n	8003920 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0208 	orr.w	r2, r2, #8
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	e035      	b.n	8003920 <HAL_DMA_Start_IT+0x260>
 80038b4:	40020010 	.word	0x40020010
 80038b8:	40020028 	.word	0x40020028
 80038bc:	40020040 	.word	0x40020040
 80038c0:	40020058 	.word	0x40020058
 80038c4:	40020070 	.word	0x40020070
 80038c8:	40020088 	.word	0x40020088
 80038cc:	400200a0 	.word	0x400200a0
 80038d0:	400200b8 	.word	0x400200b8
 80038d4:	40020410 	.word	0x40020410
 80038d8:	40020428 	.word	0x40020428
 80038dc:	40020440 	.word	0x40020440
 80038e0:	40020458 	.word	0x40020458
 80038e4:	40020470 	.word	0x40020470
 80038e8:	40020488 	.word	0x40020488
 80038ec:	400204a0 	.word	0x400204a0
 80038f0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 020e 	bic.w	r2, r3, #14
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f042 020a 	orr.w	r2, r2, #10
 8003906:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	2b00      	cmp	r3, #0
 800390e:	d007      	beq.n	8003920 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0204 	orr.w	r2, r2, #4
 800391e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a83      	ldr	r2, [pc, #524]	; (8003b34 <HAL_DMA_Start_IT+0x474>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d072      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a82      	ldr	r2, [pc, #520]	; (8003b38 <HAL_DMA_Start_IT+0x478>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d06d      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a80      	ldr	r2, [pc, #512]	; (8003b3c <HAL_DMA_Start_IT+0x47c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d068      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a7f      	ldr	r2, [pc, #508]	; (8003b40 <HAL_DMA_Start_IT+0x480>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d063      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a7d      	ldr	r2, [pc, #500]	; (8003b44 <HAL_DMA_Start_IT+0x484>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d05e      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a7c      	ldr	r2, [pc, #496]	; (8003b48 <HAL_DMA_Start_IT+0x488>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d059      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a7a      	ldr	r2, [pc, #488]	; (8003b4c <HAL_DMA_Start_IT+0x48c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d054      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a79      	ldr	r2, [pc, #484]	; (8003b50 <HAL_DMA_Start_IT+0x490>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d04f      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a77      	ldr	r2, [pc, #476]	; (8003b54 <HAL_DMA_Start_IT+0x494>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d04a      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a76      	ldr	r2, [pc, #472]	; (8003b58 <HAL_DMA_Start_IT+0x498>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d045      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a74      	ldr	r2, [pc, #464]	; (8003b5c <HAL_DMA_Start_IT+0x49c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d040      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a73      	ldr	r2, [pc, #460]	; (8003b60 <HAL_DMA_Start_IT+0x4a0>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d03b      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a71      	ldr	r2, [pc, #452]	; (8003b64 <HAL_DMA_Start_IT+0x4a4>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d036      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a70      	ldr	r2, [pc, #448]	; (8003b68 <HAL_DMA_Start_IT+0x4a8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d031      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <HAL_DMA_Start_IT+0x4ac>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d02c      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6d      	ldr	r2, [pc, #436]	; (8003b70 <HAL_DMA_Start_IT+0x4b0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d027      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a6b      	ldr	r2, [pc, #428]	; (8003b74 <HAL_DMA_Start_IT+0x4b4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d022      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a6a      	ldr	r2, [pc, #424]	; (8003b78 <HAL_DMA_Start_IT+0x4b8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d01d      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a68      	ldr	r2, [pc, #416]	; (8003b7c <HAL_DMA_Start_IT+0x4bc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d018      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a67      	ldr	r2, [pc, #412]	; (8003b80 <HAL_DMA_Start_IT+0x4c0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a65      	ldr	r2, [pc, #404]	; (8003b84 <HAL_DMA_Start_IT+0x4c4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00e      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a64      	ldr	r2, [pc, #400]	; (8003b88 <HAL_DMA_Start_IT+0x4c8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d009      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a62      	ldr	r2, [pc, #392]	; (8003b8c <HAL_DMA_Start_IT+0x4cc>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <HAL_DMA_Start_IT+0x350>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a61      	ldr	r2, [pc, #388]	; (8003b90 <HAL_DMA_Start_IT+0x4d0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_DMA_Start_IT+0x354>
 8003a10:	2301      	movs	r3, #1
 8003a12:	e000      	b.n	8003a16 <HAL_DMA_Start_IT+0x356>
 8003a14:	2300      	movs	r3, #0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01a      	beq.n	8003a50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a37      	ldr	r2, [pc, #220]	; (8003b34 <HAL_DMA_Start_IT+0x474>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d04a      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a36      	ldr	r2, [pc, #216]	; (8003b38 <HAL_DMA_Start_IT+0x478>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d045      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a34      	ldr	r2, [pc, #208]	; (8003b3c <HAL_DMA_Start_IT+0x47c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d040      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a33      	ldr	r2, [pc, #204]	; (8003b40 <HAL_DMA_Start_IT+0x480>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d03b      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a31      	ldr	r2, [pc, #196]	; (8003b44 <HAL_DMA_Start_IT+0x484>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d036      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a30      	ldr	r2, [pc, #192]	; (8003b48 <HAL_DMA_Start_IT+0x488>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d031      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a2e      	ldr	r2, [pc, #184]	; (8003b4c <HAL_DMA_Start_IT+0x48c>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d02c      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2d      	ldr	r2, [pc, #180]	; (8003b50 <HAL_DMA_Start_IT+0x490>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d027      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a2b      	ldr	r2, [pc, #172]	; (8003b54 <HAL_DMA_Start_IT+0x494>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d022      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2a      	ldr	r2, [pc, #168]	; (8003b58 <HAL_DMA_Start_IT+0x498>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d01d      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <HAL_DMA_Start_IT+0x49c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d018      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a27      	ldr	r2, [pc, #156]	; (8003b60 <HAL_DMA_Start_IT+0x4a0>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d013      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a25      	ldr	r2, [pc, #148]	; (8003b64 <HAL_DMA_Start_IT+0x4a4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00e      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a24      	ldr	r2, [pc, #144]	; (8003b68 <HAL_DMA_Start_IT+0x4a8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d009      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <HAL_DMA_Start_IT+0x4ac>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d004      	beq.n	8003af0 <HAL_DMA_Start_IT+0x430>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a21      	ldr	r2, [pc, #132]	; (8003b70 <HAL_DMA_Start_IT+0x4b0>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d108      	bne.n	8003b02 <HAL_DMA_Start_IT+0x442>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	e012      	b.n	8003b28 <HAL_DMA_Start_IT+0x468>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f042 0201 	orr.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	e009      	b.n	8003b28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40020010 	.word	0x40020010
 8003b38:	40020028 	.word	0x40020028
 8003b3c:	40020040 	.word	0x40020040
 8003b40:	40020058 	.word	0x40020058
 8003b44:	40020070 	.word	0x40020070
 8003b48:	40020088 	.word	0x40020088
 8003b4c:	400200a0 	.word	0x400200a0
 8003b50:	400200b8 	.word	0x400200b8
 8003b54:	40020410 	.word	0x40020410
 8003b58:	40020428 	.word	0x40020428
 8003b5c:	40020440 	.word	0x40020440
 8003b60:	40020458 	.word	0x40020458
 8003b64:	40020470 	.word	0x40020470
 8003b68:	40020488 	.word	0x40020488
 8003b6c:	400204a0 	.word	0x400204a0
 8003b70:	400204b8 	.word	0x400204b8
 8003b74:	58025408 	.word	0x58025408
 8003b78:	5802541c 	.word	0x5802541c
 8003b7c:	58025430 	.word	0x58025430
 8003b80:	58025444 	.word	0x58025444
 8003b84:	58025458 	.word	0x58025458
 8003b88:	5802546c 	.word	0x5802546c
 8003b8c:	58025480 	.word	0x58025480
 8003b90:	58025494 	.word	0x58025494

08003b94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ba0:	4b67      	ldr	r3, [pc, #412]	; (8003d40 <HAL_DMA_IRQHandler+0x1ac>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a67      	ldr	r2, [pc, #412]	; (8003d44 <HAL_DMA_IRQHandler+0x1b0>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	0a9b      	lsrs	r3, r3, #10
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a5f      	ldr	r2, [pc, #380]	; (8003d48 <HAL_DMA_IRQHandler+0x1b4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d04a      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a5d      	ldr	r2, [pc, #372]	; (8003d4c <HAL_DMA_IRQHandler+0x1b8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d045      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a5c      	ldr	r2, [pc, #368]	; (8003d50 <HAL_DMA_IRQHandler+0x1bc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d040      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a5a      	ldr	r2, [pc, #360]	; (8003d54 <HAL_DMA_IRQHandler+0x1c0>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d03b      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a59      	ldr	r2, [pc, #356]	; (8003d58 <HAL_DMA_IRQHandler+0x1c4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d036      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a57      	ldr	r2, [pc, #348]	; (8003d5c <HAL_DMA_IRQHandler+0x1c8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a56      	ldr	r2, [pc, #344]	; (8003d60 <HAL_DMA_IRQHandler+0x1cc>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d02c      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a54      	ldr	r2, [pc, #336]	; (8003d64 <HAL_DMA_IRQHandler+0x1d0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d027      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a53      	ldr	r2, [pc, #332]	; (8003d68 <HAL_DMA_IRQHandler+0x1d4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d022      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a51      	ldr	r2, [pc, #324]	; (8003d6c <HAL_DMA_IRQHandler+0x1d8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d01d      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a50      	ldr	r2, [pc, #320]	; (8003d70 <HAL_DMA_IRQHandler+0x1dc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d018      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a4e      	ldr	r2, [pc, #312]	; (8003d74 <HAL_DMA_IRQHandler+0x1e0>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d013      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a4d      	ldr	r2, [pc, #308]	; (8003d78 <HAL_DMA_IRQHandler+0x1e4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d00e      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <HAL_DMA_IRQHandler+0x1e8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d009      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a4a      	ldr	r2, [pc, #296]	; (8003d80 <HAL_DMA_IRQHandler+0x1ec>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d004      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xd2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a48      	ldr	r2, [pc, #288]	; (8003d84 <HAL_DMA_IRQHandler+0x1f0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d101      	bne.n	8003c6a <HAL_DMA_IRQHandler+0xd6>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_DMA_IRQHandler+0xd8>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 842b 	beq.w	80044c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	2208      	movs	r2, #8
 8003c7c:	409a      	lsls	r2, r3
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80a2 	beq.w	8003dcc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <HAL_DMA_IRQHandler+0x1b4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d04a      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2d      	ldr	r2, [pc, #180]	; (8003d4c <HAL_DMA_IRQHandler+0x1b8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d045      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2b      	ldr	r2, [pc, #172]	; (8003d50 <HAL_DMA_IRQHandler+0x1bc>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d040      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2a      	ldr	r2, [pc, #168]	; (8003d54 <HAL_DMA_IRQHandler+0x1c0>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d03b      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a28      	ldr	r2, [pc, #160]	; (8003d58 <HAL_DMA_IRQHandler+0x1c4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d036      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a27      	ldr	r2, [pc, #156]	; (8003d5c <HAL_DMA_IRQHandler+0x1c8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d031      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a25      	ldr	r2, [pc, #148]	; (8003d60 <HAL_DMA_IRQHandler+0x1cc>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02c      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a24      	ldr	r2, [pc, #144]	; (8003d64 <HAL_DMA_IRQHandler+0x1d0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d027      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a22      	ldr	r2, [pc, #136]	; (8003d68 <HAL_DMA_IRQHandler+0x1d4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d022      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <HAL_DMA_IRQHandler+0x1d8>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d01d      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a1f      	ldr	r2, [pc, #124]	; (8003d70 <HAL_DMA_IRQHandler+0x1dc>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d018      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a1e      	ldr	r2, [pc, #120]	; (8003d74 <HAL_DMA_IRQHandler+0x1e0>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d013      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1c      	ldr	r2, [pc, #112]	; (8003d78 <HAL_DMA_IRQHandler+0x1e4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00e      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <HAL_DMA_IRQHandler+0x1e8>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d009      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <HAL_DMA_IRQHandler+0x1ec>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x194>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <HAL_DMA_IRQHandler+0x1f0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d12f      	bne.n	8003d88 <HAL_DMA_IRQHandler+0x1f4>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0304 	and.w	r3, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2301      	movne	r3, #1
 8003d38:	2300      	moveq	r3, #0
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	e02e      	b.n	8003d9c <HAL_DMA_IRQHandler+0x208>
 8003d3e:	bf00      	nop
 8003d40:	24000000 	.word	0x24000000
 8003d44:	1b4e81b5 	.word	0x1b4e81b5
 8003d48:	40020010 	.word	0x40020010
 8003d4c:	40020028 	.word	0x40020028
 8003d50:	40020040 	.word	0x40020040
 8003d54:	40020058 	.word	0x40020058
 8003d58:	40020070 	.word	0x40020070
 8003d5c:	40020088 	.word	0x40020088
 8003d60:	400200a0 	.word	0x400200a0
 8003d64:	400200b8 	.word	0x400200b8
 8003d68:	40020410 	.word	0x40020410
 8003d6c:	40020428 	.word	0x40020428
 8003d70:	40020440 	.word	0x40020440
 8003d74:	40020458 	.word	0x40020458
 8003d78:	40020470 	.word	0x40020470
 8003d7c:	40020488 	.word	0x40020488
 8003d80:	400204a0 	.word	0x400204a0
 8003d84:	400204b8 	.word	0x400204b8
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	bf14      	ite	ne
 8003d96:	2301      	movne	r3, #1
 8003d98:	2300      	moveq	r3, #0
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d015      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0204 	bic.w	r2, r2, #4
 8003dae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	2208      	movs	r2, #8
 8003dba:	409a      	lsls	r2, r3
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
 8003dbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	f043 0201 	orr.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd0:	f003 031f 	and.w	r3, r3, #31
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d06e      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a69      	ldr	r2, [pc, #420]	; (8003f8c <HAL_DMA_IRQHandler+0x3f8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d04a      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a67      	ldr	r2, [pc, #412]	; (8003f90 <HAL_DMA_IRQHandler+0x3fc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d045      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a66      	ldr	r2, [pc, #408]	; (8003f94 <HAL_DMA_IRQHandler+0x400>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d040      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a64      	ldr	r2, [pc, #400]	; (8003f98 <HAL_DMA_IRQHandler+0x404>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d03b      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a63      	ldr	r2, [pc, #396]	; (8003f9c <HAL_DMA_IRQHandler+0x408>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d036      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a61      	ldr	r2, [pc, #388]	; (8003fa0 <HAL_DMA_IRQHandler+0x40c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d031      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a60      	ldr	r2, [pc, #384]	; (8003fa4 <HAL_DMA_IRQHandler+0x410>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d02c      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a5e      	ldr	r2, [pc, #376]	; (8003fa8 <HAL_DMA_IRQHandler+0x414>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d027      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a5d      	ldr	r2, [pc, #372]	; (8003fac <HAL_DMA_IRQHandler+0x418>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d022      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a5b      	ldr	r2, [pc, #364]	; (8003fb0 <HAL_DMA_IRQHandler+0x41c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01d      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a5a      	ldr	r2, [pc, #360]	; (8003fb4 <HAL_DMA_IRQHandler+0x420>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a58      	ldr	r2, [pc, #352]	; (8003fb8 <HAL_DMA_IRQHandler+0x424>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a57      	ldr	r2, [pc, #348]	; (8003fbc <HAL_DMA_IRQHandler+0x428>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a55      	ldr	r2, [pc, #340]	; (8003fc0 <HAL_DMA_IRQHandler+0x42c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d009      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a54      	ldr	r2, [pc, #336]	; (8003fc4 <HAL_DMA_IRQHandler+0x430>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x2ee>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a52      	ldr	r2, [pc, #328]	; (8003fc8 <HAL_DMA_IRQHandler+0x434>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d10a      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x304>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf14      	ite	ne
 8003e90:	2301      	movne	r3, #1
 8003e92:	2300      	moveq	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e003      	b.n	8003ea0 <HAL_DMA_IRQHandler+0x30c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	2201      	movs	r2, #1
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	6a3b      	ldr	r3, [r7, #32]
 8003eb2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb8:	f043 0202 	orr.w	r2, r3, #2
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	f003 031f 	and.w	r3, r3, #31
 8003ec8:	2204      	movs	r2, #4
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 808f 	beq.w	8003ff4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2c      	ldr	r2, [pc, #176]	; (8003f8c <HAL_DMA_IRQHandler+0x3f8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d04a      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <HAL_DMA_IRQHandler+0x3fc>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d045      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <HAL_DMA_IRQHandler+0x400>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d040      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a27      	ldr	r2, [pc, #156]	; (8003f98 <HAL_DMA_IRQHandler+0x404>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d03b      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <HAL_DMA_IRQHandler+0x408>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d036      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a24      	ldr	r2, [pc, #144]	; (8003fa0 <HAL_DMA_IRQHandler+0x40c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d031      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_DMA_IRQHandler+0x410>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d02c      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a21      	ldr	r2, [pc, #132]	; (8003fa8 <HAL_DMA_IRQHandler+0x414>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d027      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a20      	ldr	r2, [pc, #128]	; (8003fac <HAL_DMA_IRQHandler+0x418>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d022      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1e      	ldr	r2, [pc, #120]	; (8003fb0 <HAL_DMA_IRQHandler+0x41c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01d      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_DMA_IRQHandler+0x420>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d018      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1b      	ldr	r2, [pc, #108]	; (8003fb8 <HAL_DMA_IRQHandler+0x424>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d013      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_DMA_IRQHandler+0x428>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00e      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a18      	ldr	r2, [pc, #96]	; (8003fc0 <HAL_DMA_IRQHandler+0x42c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d009      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_DMA_IRQHandler+0x430>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_DMA_IRQHandler+0x3e2>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <HAL_DMA_IRQHandler+0x434>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d12a      	bne.n	8003fcc <HAL_DMA_IRQHandler+0x438>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	bf14      	ite	ne
 8003f84:	2301      	movne	r3, #1
 8003f86:	2300      	moveq	r3, #0
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	e023      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x440>
 8003f8c:	40020010 	.word	0x40020010
 8003f90:	40020028 	.word	0x40020028
 8003f94:	40020040 	.word	0x40020040
 8003f98:	40020058 	.word	0x40020058
 8003f9c:	40020070 	.word	0x40020070
 8003fa0:	40020088 	.word	0x40020088
 8003fa4:	400200a0 	.word	0x400200a0
 8003fa8:	400200b8 	.word	0x400200b8
 8003fac:	40020410 	.word	0x40020410
 8003fb0:	40020428 	.word	0x40020428
 8003fb4:	40020440 	.word	0x40020440
 8003fb8:	40020458 	.word	0x40020458
 8003fbc:	40020470 	.word	0x40020470
 8003fc0:	40020488 	.word	0x40020488
 8003fc4:	400204a0 	.word	0x400204a0
 8003fc8:	400204b8 	.word	0x400204b8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00d      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fec:	f043 0204 	orr.w	r2, r3, #4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	f003 031f 	and.w	r3, r3, #31
 8003ffc:	2210      	movs	r2, #16
 8003ffe:	409a      	lsls	r2, r3
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a6 	beq.w	8004156 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a85      	ldr	r2, [pc, #532]	; (8004224 <HAL_DMA_IRQHandler+0x690>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d04a      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a83      	ldr	r2, [pc, #524]	; (8004228 <HAL_DMA_IRQHandler+0x694>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d045      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a82      	ldr	r2, [pc, #520]	; (800422c <HAL_DMA_IRQHandler+0x698>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d040      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a80      	ldr	r2, [pc, #512]	; (8004230 <HAL_DMA_IRQHandler+0x69c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d03b      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a7f      	ldr	r2, [pc, #508]	; (8004234 <HAL_DMA_IRQHandler+0x6a0>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d036      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a7d      	ldr	r2, [pc, #500]	; (8004238 <HAL_DMA_IRQHandler+0x6a4>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d031      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a7c      	ldr	r2, [pc, #496]	; (800423c <HAL_DMA_IRQHandler+0x6a8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d02c      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a7a      	ldr	r2, [pc, #488]	; (8004240 <HAL_DMA_IRQHandler+0x6ac>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d027      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a79      	ldr	r2, [pc, #484]	; (8004244 <HAL_DMA_IRQHandler+0x6b0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d022      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a77      	ldr	r2, [pc, #476]	; (8004248 <HAL_DMA_IRQHandler+0x6b4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d01d      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a76      	ldr	r2, [pc, #472]	; (800424c <HAL_DMA_IRQHandler+0x6b8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d018      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a74      	ldr	r2, [pc, #464]	; (8004250 <HAL_DMA_IRQHandler+0x6bc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d013      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a73      	ldr	r2, [pc, #460]	; (8004254 <HAL_DMA_IRQHandler+0x6c0>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a71      	ldr	r2, [pc, #452]	; (8004258 <HAL_DMA_IRQHandler+0x6c4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a70      	ldr	r2, [pc, #448]	; (800425c <HAL_DMA_IRQHandler+0x6c8>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_DMA_IRQHandler+0x516>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a6e      	ldr	r2, [pc, #440]	; (8004260 <HAL_DMA_IRQHandler+0x6cc>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d10a      	bne.n	80040c0 <HAL_DMA_IRQHandler+0x52c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	bf14      	ite	ne
 80040b8:	2301      	movne	r3, #1
 80040ba:	2300      	moveq	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	e009      	b.n	80040d4 <HAL_DMA_IRQHandler+0x540>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	bf14      	ite	ne
 80040ce:	2301      	movne	r3, #1
 80040d0:	2300      	moveq	r3, #0
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d03e      	beq.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040dc:	f003 031f 	and.w	r3, r3, #31
 80040e0:	2210      	movs	r2, #16
 80040e2:	409a      	lsls	r2, r3
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d018      	beq.n	8004128 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d108      	bne.n	8004116 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d024      	beq.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	4798      	blx	r3
 8004114:	e01f      	b.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411a:	2b00      	cmp	r3, #0
 800411c:	d01b      	beq.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
 8004126:	e016      	b.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004132:	2b00      	cmp	r3, #0
 8004134:	d107      	bne.n	8004146 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0208 	bic.w	r2, r2, #8
 8004144:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	2220      	movs	r2, #32
 8004160:	409a      	lsls	r2, r3
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8110 	beq.w	800438c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a2c      	ldr	r2, [pc, #176]	; (8004224 <HAL_DMA_IRQHandler+0x690>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d04a      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a2b      	ldr	r2, [pc, #172]	; (8004228 <HAL_DMA_IRQHandler+0x694>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d045      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a29      	ldr	r2, [pc, #164]	; (800422c <HAL_DMA_IRQHandler+0x698>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d040      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a28      	ldr	r2, [pc, #160]	; (8004230 <HAL_DMA_IRQHandler+0x69c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d03b      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a26      	ldr	r2, [pc, #152]	; (8004234 <HAL_DMA_IRQHandler+0x6a0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d036      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a25      	ldr	r2, [pc, #148]	; (8004238 <HAL_DMA_IRQHandler+0x6a4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d031      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a23      	ldr	r2, [pc, #140]	; (800423c <HAL_DMA_IRQHandler+0x6a8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d02c      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a22      	ldr	r2, [pc, #136]	; (8004240 <HAL_DMA_IRQHandler+0x6ac>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d027      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a20      	ldr	r2, [pc, #128]	; (8004244 <HAL_DMA_IRQHandler+0x6b0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d022      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a1f      	ldr	r2, [pc, #124]	; (8004248 <HAL_DMA_IRQHandler+0x6b4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d01d      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a1d      	ldr	r2, [pc, #116]	; (800424c <HAL_DMA_IRQHandler+0x6b8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d018      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a1c      	ldr	r2, [pc, #112]	; (8004250 <HAL_DMA_IRQHandler+0x6bc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d013      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <HAL_DMA_IRQHandler+0x6c0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d00e      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a19      	ldr	r2, [pc, #100]	; (8004258 <HAL_DMA_IRQHandler+0x6c4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d009      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a17      	ldr	r2, [pc, #92]	; (800425c <HAL_DMA_IRQHandler+0x6c8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d004      	beq.n	800420c <HAL_DMA_IRQHandler+0x678>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a16      	ldr	r2, [pc, #88]	; (8004260 <HAL_DMA_IRQHandler+0x6cc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d12b      	bne.n	8004264 <HAL_DMA_IRQHandler+0x6d0>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	bf14      	ite	ne
 800421a:	2301      	movne	r3, #1
 800421c:	2300      	moveq	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	e02a      	b.n	8004278 <HAL_DMA_IRQHandler+0x6e4>
 8004222:	bf00      	nop
 8004224:	40020010 	.word	0x40020010
 8004228:	40020028 	.word	0x40020028
 800422c:	40020040 	.word	0x40020040
 8004230:	40020058 	.word	0x40020058
 8004234:	40020070 	.word	0x40020070
 8004238:	40020088 	.word	0x40020088
 800423c:	400200a0 	.word	0x400200a0
 8004240:	400200b8 	.word	0x400200b8
 8004244:	40020410 	.word	0x40020410
 8004248:	40020428 	.word	0x40020428
 800424c:	40020440 	.word	0x40020440
 8004250:	40020458 	.word	0x40020458
 8004254:	40020470 	.word	0x40020470
 8004258:	40020488 	.word	0x40020488
 800425c:	400204a0 	.word	0x400204a0
 8004260:	400204b8 	.word	0x400204b8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	2b00      	cmp	r3, #0
 8004270:	bf14      	ite	ne
 8004272:	2301      	movne	r3, #1
 8004274:	2300      	moveq	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 8087 	beq.w	800438c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	f003 031f 	and.w	r3, r3, #31
 8004286:	2220      	movs	r2, #32
 8004288:	409a      	lsls	r2, r3
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b04      	cmp	r3, #4
 8004298:	d139      	bne.n	800430e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 0216 	bic.w	r2, r2, #22
 80042a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <HAL_DMA_IRQHandler+0x736>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0208 	bic.w	r2, r2, #8
 80042d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042de:	f003 031f 	and.w	r3, r3, #31
 80042e2:	223f      	movs	r2, #63	; 0x3f
 80042e4:	409a      	lsls	r2, r3
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 8382 	beq.w	8004a08 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	4798      	blx	r3
          }
          return;
 800430c:	e37c      	b.n	8004a08 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d018      	beq.n	800434e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d108      	bne.n	800433c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02c      	beq.n	800438c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	4798      	blx	r3
 800433a:	e027      	b.n	800438c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d023      	beq.n	800438c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	4798      	blx	r3
 800434c:	e01e      	b.n	800438c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10f      	bne.n	800437c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0210 	bic.w	r2, r2, #16
 800436a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	2b00      	cmp	r3, #0
 8004392:	f000 833e 	beq.w	8004a12 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 8088 	beq.w	80044b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2204      	movs	r2, #4
 80043a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a8e      	ldr	r2, [pc, #568]	; (80045ec <HAL_DMA_IRQHandler+0xa58>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d04a      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a8d      	ldr	r2, [pc, #564]	; (80045f0 <HAL_DMA_IRQHandler+0xa5c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d045      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a8b      	ldr	r2, [pc, #556]	; (80045f4 <HAL_DMA_IRQHandler+0xa60>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d040      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a8a      	ldr	r2, [pc, #552]	; (80045f8 <HAL_DMA_IRQHandler+0xa64>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d03b      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a88      	ldr	r2, [pc, #544]	; (80045fc <HAL_DMA_IRQHandler+0xa68>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d036      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a87      	ldr	r2, [pc, #540]	; (8004600 <HAL_DMA_IRQHandler+0xa6c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d031      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a85      	ldr	r2, [pc, #532]	; (8004604 <HAL_DMA_IRQHandler+0xa70>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d02c      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a84      	ldr	r2, [pc, #528]	; (8004608 <HAL_DMA_IRQHandler+0xa74>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d027      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a82      	ldr	r2, [pc, #520]	; (800460c <HAL_DMA_IRQHandler+0xa78>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d022      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a81      	ldr	r2, [pc, #516]	; (8004610 <HAL_DMA_IRQHandler+0xa7c>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d01d      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a7f      	ldr	r2, [pc, #508]	; (8004614 <HAL_DMA_IRQHandler+0xa80>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d018      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a7e      	ldr	r2, [pc, #504]	; (8004618 <HAL_DMA_IRQHandler+0xa84>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a7c      	ldr	r2, [pc, #496]	; (800461c <HAL_DMA_IRQHandler+0xa88>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a7b      	ldr	r2, [pc, #492]	; (8004620 <HAL_DMA_IRQHandler+0xa8c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a79      	ldr	r2, [pc, #484]	; (8004624 <HAL_DMA_IRQHandler+0xa90>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_DMA_IRQHandler+0x8b8>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a78      	ldr	r2, [pc, #480]	; (8004628 <HAL_DMA_IRQHandler+0xa94>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d108      	bne.n	800445e <HAL_DMA_IRQHandler+0x8ca>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0201 	bic.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	e007      	b.n	800446e <HAL_DMA_IRQHandler+0x8da>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004476:	429a      	cmp	r2, r3
 8004478:	d307      	bcc.n	800448a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f2      	bne.n	800446e <HAL_DMA_IRQHandler+0x8da>
 8004488:	e000      	b.n	800448c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800448a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d004      	beq.n	80044ac <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2203      	movs	r2, #3
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80044aa:	e003      	b.n	80044b4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 82aa 	beq.w	8004a12 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
 80044c6:	e2a4      	b.n	8004a12 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a57      	ldr	r2, [pc, #348]	; (800462c <HAL_DMA_IRQHandler+0xa98>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d04a      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a56      	ldr	r2, [pc, #344]	; (8004630 <HAL_DMA_IRQHandler+0xa9c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d045      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a54      	ldr	r2, [pc, #336]	; (8004634 <HAL_DMA_IRQHandler+0xaa0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d040      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a53      	ldr	r2, [pc, #332]	; (8004638 <HAL_DMA_IRQHandler+0xaa4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d03b      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a51      	ldr	r2, [pc, #324]	; (800463c <HAL_DMA_IRQHandler+0xaa8>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d036      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a50      	ldr	r2, [pc, #320]	; (8004640 <HAL_DMA_IRQHandler+0xaac>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d031      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a4e      	ldr	r2, [pc, #312]	; (8004644 <HAL_DMA_IRQHandler+0xab0>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d02c      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a4d      	ldr	r2, [pc, #308]	; (8004648 <HAL_DMA_IRQHandler+0xab4>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d027      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a4b      	ldr	r2, [pc, #300]	; (800464c <HAL_DMA_IRQHandler+0xab8>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d022      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a4a      	ldr	r2, [pc, #296]	; (8004650 <HAL_DMA_IRQHandler+0xabc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d01d      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a48      	ldr	r2, [pc, #288]	; (8004654 <HAL_DMA_IRQHandler+0xac0>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d018      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a47      	ldr	r2, [pc, #284]	; (8004658 <HAL_DMA_IRQHandler+0xac4>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d013      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a45      	ldr	r2, [pc, #276]	; (800465c <HAL_DMA_IRQHandler+0xac8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00e      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a44      	ldr	r2, [pc, #272]	; (8004660 <HAL_DMA_IRQHandler+0xacc>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d009      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a42      	ldr	r2, [pc, #264]	; (8004664 <HAL_DMA_IRQHandler+0xad0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d004      	beq.n	8004568 <HAL_DMA_IRQHandler+0x9d4>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a41      	ldr	r2, [pc, #260]	; (8004668 <HAL_DMA_IRQHandler+0xad4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d101      	bne.n	800456c <HAL_DMA_IRQHandler+0x9d8>
 8004568:	2301      	movs	r3, #1
 800456a:	e000      	b.n	800456e <HAL_DMA_IRQHandler+0x9da>
 800456c:	2300      	movs	r3, #0
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 824f 	beq.w	8004a12 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2204      	movs	r2, #4
 8004586:	409a      	lsls	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 80dd 	beq.w	800474c <HAL_DMA_IRQHandler+0xbb8>
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 80d7 	beq.w	800474c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2204      	movs	r2, #4
 80045a8:	409a      	lsls	r2, r3
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d059      	beq.n	800466c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d109      	bne.n	80045d6 <HAL_DMA_IRQHandler+0xa42>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	f000 8220 	beq.w	8004a0c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045d4:	e21a      	b.n	8004a0c <HAL_DMA_IRQHandler+0xe78>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 8216 	beq.w	8004a0c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045e8:	e210      	b.n	8004a0c <HAL_DMA_IRQHandler+0xe78>
 80045ea:	bf00      	nop
 80045ec:	40020010 	.word	0x40020010
 80045f0:	40020028 	.word	0x40020028
 80045f4:	40020040 	.word	0x40020040
 80045f8:	40020058 	.word	0x40020058
 80045fc:	40020070 	.word	0x40020070
 8004600:	40020088 	.word	0x40020088
 8004604:	400200a0 	.word	0x400200a0
 8004608:	400200b8 	.word	0x400200b8
 800460c:	40020410 	.word	0x40020410
 8004610:	40020428 	.word	0x40020428
 8004614:	40020440 	.word	0x40020440
 8004618:	40020458 	.word	0x40020458
 800461c:	40020470 	.word	0x40020470
 8004620:	40020488 	.word	0x40020488
 8004624:	400204a0 	.word	0x400204a0
 8004628:	400204b8 	.word	0x400204b8
 800462c:	48022c08 	.word	0x48022c08
 8004630:	48022c1c 	.word	0x48022c1c
 8004634:	48022c30 	.word	0x48022c30
 8004638:	48022c44 	.word	0x48022c44
 800463c:	48022c58 	.word	0x48022c58
 8004640:	48022c6c 	.word	0x48022c6c
 8004644:	48022c80 	.word	0x48022c80
 8004648:	48022c94 	.word	0x48022c94
 800464c:	58025408 	.word	0x58025408
 8004650:	5802541c 	.word	0x5802541c
 8004654:	58025430 	.word	0x58025430
 8004658:	58025444 	.word	0x58025444
 800465c:	58025458 	.word	0x58025458
 8004660:	5802546c 	.word	0x5802546c
 8004664:	58025480 	.word	0x58025480
 8004668:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d160      	bne.n	8004738 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a8c      	ldr	r2, [pc, #560]	; (80048ac <HAL_DMA_IRQHandler+0xd18>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d04a      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a8a      	ldr	r2, [pc, #552]	; (80048b0 <HAL_DMA_IRQHandler+0xd1c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d045      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a89      	ldr	r2, [pc, #548]	; (80048b4 <HAL_DMA_IRQHandler+0xd20>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d040      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a87      	ldr	r2, [pc, #540]	; (80048b8 <HAL_DMA_IRQHandler+0xd24>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d03b      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a86      	ldr	r2, [pc, #536]	; (80048bc <HAL_DMA_IRQHandler+0xd28>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d036      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a84      	ldr	r2, [pc, #528]	; (80048c0 <HAL_DMA_IRQHandler+0xd2c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d031      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a83      	ldr	r2, [pc, #524]	; (80048c4 <HAL_DMA_IRQHandler+0xd30>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d02c      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a81      	ldr	r2, [pc, #516]	; (80048c8 <HAL_DMA_IRQHandler+0xd34>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d027      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a80      	ldr	r2, [pc, #512]	; (80048cc <HAL_DMA_IRQHandler+0xd38>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a7e      	ldr	r2, [pc, #504]	; (80048d0 <HAL_DMA_IRQHandler+0xd3c>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01d      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a7d      	ldr	r2, [pc, #500]	; (80048d4 <HAL_DMA_IRQHandler+0xd40>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a7b      	ldr	r2, [pc, #492]	; (80048d8 <HAL_DMA_IRQHandler+0xd44>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7a      	ldr	r2, [pc, #488]	; (80048dc <HAL_DMA_IRQHandler+0xd48>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a78      	ldr	r2, [pc, #480]	; (80048e0 <HAL_DMA_IRQHandler+0xd4c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a77      	ldr	r2, [pc, #476]	; (80048e4 <HAL_DMA_IRQHandler+0xd50>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb82>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a75      	ldr	r2, [pc, #468]	; (80048e8 <HAL_DMA_IRQHandler+0xd54>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d108      	bne.n	8004728 <HAL_DMA_IRQHandler+0xb94>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0208 	bic.w	r2, r2, #8
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e007      	b.n	8004738 <HAL_DMA_IRQHandler+0xba4>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0204 	bic.w	r2, r2, #4
 8004736:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8165 	beq.w	8004a0c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800474a:	e15f      	b.n	8004a0c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2202      	movs	r2, #2
 8004756:	409a      	lsls	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80c5 	beq.w	80048ec <HAL_DMA_IRQHandler+0xd58>
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80bf 	beq.w	80048ec <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2202      	movs	r2, #2
 8004778:	409a      	lsls	r2, r3
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d018      	beq.n	80047ba <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 813a 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a4:	e134      	b.n	8004a10 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8130 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047b8:	e12a      	b.n	8004a10 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d168      	bne.n	8004896 <HAL_DMA_IRQHandler+0xd02>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a38      	ldr	r2, [pc, #224]	; (80048ac <HAL_DMA_IRQHandler+0xd18>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d04a      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a37      	ldr	r2, [pc, #220]	; (80048b0 <HAL_DMA_IRQHandler+0xd1c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d045      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a35      	ldr	r2, [pc, #212]	; (80048b4 <HAL_DMA_IRQHandler+0xd20>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d040      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a34      	ldr	r2, [pc, #208]	; (80048b8 <HAL_DMA_IRQHandler+0xd24>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d03b      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a32      	ldr	r2, [pc, #200]	; (80048bc <HAL_DMA_IRQHandler+0xd28>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d036      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a31      	ldr	r2, [pc, #196]	; (80048c0 <HAL_DMA_IRQHandler+0xd2c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d031      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a2f      	ldr	r2, [pc, #188]	; (80048c4 <HAL_DMA_IRQHandler+0xd30>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d02c      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a2e      	ldr	r2, [pc, #184]	; (80048c8 <HAL_DMA_IRQHandler+0xd34>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d027      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a2c      	ldr	r2, [pc, #176]	; (80048cc <HAL_DMA_IRQHandler+0xd38>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d022      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a2b      	ldr	r2, [pc, #172]	; (80048d0 <HAL_DMA_IRQHandler+0xd3c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d01d      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <HAL_DMA_IRQHandler+0xd40>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d018      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <HAL_DMA_IRQHandler+0xd44>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d013      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a26      	ldr	r2, [pc, #152]	; (80048dc <HAL_DMA_IRQHandler+0xd48>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00e      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a25      	ldr	r2, [pc, #148]	; (80048e0 <HAL_DMA_IRQHandler+0xd4c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d009      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a23      	ldr	r2, [pc, #140]	; (80048e4 <HAL_DMA_IRQHandler+0xd50>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_DMA_IRQHandler+0xcd0>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a22      	ldr	r2, [pc, #136]	; (80048e8 <HAL_DMA_IRQHandler+0xd54>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d108      	bne.n	8004876 <HAL_DMA_IRQHandler+0xce2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0214 	bic.w	r2, r2, #20
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e007      	b.n	8004886 <HAL_DMA_IRQHandler+0xcf2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 020a 	bic.w	r2, r2, #10
 8004884:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80b8 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048a8:	e0b2      	b.n	8004a10 <HAL_DMA_IRQHandler+0xe7c>
 80048aa:	bf00      	nop
 80048ac:	40020010 	.word	0x40020010
 80048b0:	40020028 	.word	0x40020028
 80048b4:	40020040 	.word	0x40020040
 80048b8:	40020058 	.word	0x40020058
 80048bc:	40020070 	.word	0x40020070
 80048c0:	40020088 	.word	0x40020088
 80048c4:	400200a0 	.word	0x400200a0
 80048c8:	400200b8 	.word	0x400200b8
 80048cc:	40020410 	.word	0x40020410
 80048d0:	40020428 	.word	0x40020428
 80048d4:	40020440 	.word	0x40020440
 80048d8:	40020458 	.word	0x40020458
 80048dc:	40020470 	.word	0x40020470
 80048e0:	40020488 	.word	0x40020488
 80048e4:	400204a0 	.word	0x400204a0
 80048e8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2208      	movs	r2, #8
 80048f6:	409a      	lsls	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 8088 	beq.w	8004a12 <HAL_DMA_IRQHandler+0xe7e>
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8082 	beq.w	8004a12 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a41      	ldr	r2, [pc, #260]	; (8004a18 <HAL_DMA_IRQHandler+0xe84>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d04a      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3f      	ldr	r2, [pc, #252]	; (8004a1c <HAL_DMA_IRQHandler+0xe88>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d045      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a3e      	ldr	r2, [pc, #248]	; (8004a20 <HAL_DMA_IRQHandler+0xe8c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d040      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3c      	ldr	r2, [pc, #240]	; (8004a24 <HAL_DMA_IRQHandler+0xe90>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d03b      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3b      	ldr	r2, [pc, #236]	; (8004a28 <HAL_DMA_IRQHandler+0xe94>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d036      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a39      	ldr	r2, [pc, #228]	; (8004a2c <HAL_DMA_IRQHandler+0xe98>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d031      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a38      	ldr	r2, [pc, #224]	; (8004a30 <HAL_DMA_IRQHandler+0xe9c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d02c      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a36      	ldr	r2, [pc, #216]	; (8004a34 <HAL_DMA_IRQHandler+0xea0>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d027      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a35      	ldr	r2, [pc, #212]	; (8004a38 <HAL_DMA_IRQHandler+0xea4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d022      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a33      	ldr	r2, [pc, #204]	; (8004a3c <HAL_DMA_IRQHandler+0xea8>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01d      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a32      	ldr	r2, [pc, #200]	; (8004a40 <HAL_DMA_IRQHandler+0xeac>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d018      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a30      	ldr	r2, [pc, #192]	; (8004a44 <HAL_DMA_IRQHandler+0xeb0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <HAL_DMA_IRQHandler+0xeb4>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00e      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2d      	ldr	r2, [pc, #180]	; (8004a4c <HAL_DMA_IRQHandler+0xeb8>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2c      	ldr	r2, [pc, #176]	; (8004a50 <HAL_DMA_IRQHandler+0xebc>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_DMA_IRQHandler+0xe1a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	; (8004a54 <HAL_DMA_IRQHandler+0xec0>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <HAL_DMA_IRQHandler+0xe2c>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 021c 	bic.w	r2, r2, #28
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e007      	b.n	80049d0 <HAL_DMA_IRQHandler+0xe3c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 020e 	bic.w	r2, r2, #14
 80049ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2201      	movs	r2, #1
 80049da:	409a      	lsls	r2, r3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
 8004a06:	e004      	b.n	8004a12 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8004a08:	bf00      	nop
 8004a0a:	e002      	b.n	8004a12 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a0c:	bf00      	nop
 8004a0e:	e000      	b.n	8004a12 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a10:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a12:	3728      	adds	r7, #40	; 0x28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40020010 	.word	0x40020010
 8004a1c:	40020028 	.word	0x40020028
 8004a20:	40020040 	.word	0x40020040
 8004a24:	40020058 	.word	0x40020058
 8004a28:	40020070 	.word	0x40020070
 8004a2c:	40020088 	.word	0x40020088
 8004a30:	400200a0 	.word	0x400200a0
 8004a34:	400200b8 	.word	0x400200b8
 8004a38:	40020410 	.word	0x40020410
 8004a3c:	40020428 	.word	0x40020428
 8004a40:	40020440 	.word	0x40020440
 8004a44:	40020458 	.word	0x40020458
 8004a48:	40020470 	.word	0x40020470
 8004a4c:	40020488 	.word	0x40020488
 8004a50:	400204a0 	.word	0x400204a0
 8004a54:	400204b8 	.word	0x400204b8

08004a58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a70:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a84      	ldr	r2, [pc, #528]	; (8004c88 <DMA_SetConfig+0x230>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d072      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a82      	ldr	r2, [pc, #520]	; (8004c8c <DMA_SetConfig+0x234>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d06d      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a81      	ldr	r2, [pc, #516]	; (8004c90 <DMA_SetConfig+0x238>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d068      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a7f      	ldr	r2, [pc, #508]	; (8004c94 <DMA_SetConfig+0x23c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d063      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a7e      	ldr	r2, [pc, #504]	; (8004c98 <DMA_SetConfig+0x240>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d05e      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a7c      	ldr	r2, [pc, #496]	; (8004c9c <DMA_SetConfig+0x244>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d059      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a7b      	ldr	r2, [pc, #492]	; (8004ca0 <DMA_SetConfig+0x248>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d054      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a79      	ldr	r2, [pc, #484]	; (8004ca4 <DMA_SetConfig+0x24c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d04f      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a78      	ldr	r2, [pc, #480]	; (8004ca8 <DMA_SetConfig+0x250>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d04a      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a76      	ldr	r2, [pc, #472]	; (8004cac <DMA_SetConfig+0x254>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d045      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a75      	ldr	r2, [pc, #468]	; (8004cb0 <DMA_SetConfig+0x258>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d040      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a73      	ldr	r2, [pc, #460]	; (8004cb4 <DMA_SetConfig+0x25c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d03b      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a72      	ldr	r2, [pc, #456]	; (8004cb8 <DMA_SetConfig+0x260>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d036      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a70      	ldr	r2, [pc, #448]	; (8004cbc <DMA_SetConfig+0x264>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d031      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a6f      	ldr	r2, [pc, #444]	; (8004cc0 <DMA_SetConfig+0x268>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d02c      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a6d      	ldr	r2, [pc, #436]	; (8004cc4 <DMA_SetConfig+0x26c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d027      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a6c      	ldr	r2, [pc, #432]	; (8004cc8 <DMA_SetConfig+0x270>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d022      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a6a      	ldr	r2, [pc, #424]	; (8004ccc <DMA_SetConfig+0x274>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01d      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a69      	ldr	r2, [pc, #420]	; (8004cd0 <DMA_SetConfig+0x278>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d018      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a67      	ldr	r2, [pc, #412]	; (8004cd4 <DMA_SetConfig+0x27c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a66      	ldr	r2, [pc, #408]	; (8004cd8 <DMA_SetConfig+0x280>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a64      	ldr	r2, [pc, #400]	; (8004cdc <DMA_SetConfig+0x284>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a63      	ldr	r2, [pc, #396]	; (8004ce0 <DMA_SetConfig+0x288>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a61      	ldr	r2, [pc, #388]	; (8004ce4 <DMA_SetConfig+0x28c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d101      	bne.n	8004b66 <DMA_SetConfig+0x10e>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <DMA_SetConfig+0x110>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00d      	beq.n	8004b88 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b86:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a3e      	ldr	r2, [pc, #248]	; (8004c88 <DMA_SetConfig+0x230>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d04a      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a3d      	ldr	r2, [pc, #244]	; (8004c8c <DMA_SetConfig+0x234>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d045      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a3b      	ldr	r2, [pc, #236]	; (8004c90 <DMA_SetConfig+0x238>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d040      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a3a      	ldr	r2, [pc, #232]	; (8004c94 <DMA_SetConfig+0x23c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d03b      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a38      	ldr	r2, [pc, #224]	; (8004c98 <DMA_SetConfig+0x240>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d036      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a37      	ldr	r2, [pc, #220]	; (8004c9c <DMA_SetConfig+0x244>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d031      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a35      	ldr	r2, [pc, #212]	; (8004ca0 <DMA_SetConfig+0x248>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d02c      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a34      	ldr	r2, [pc, #208]	; (8004ca4 <DMA_SetConfig+0x24c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d027      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a32      	ldr	r2, [pc, #200]	; (8004ca8 <DMA_SetConfig+0x250>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d022      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a31      	ldr	r2, [pc, #196]	; (8004cac <DMA_SetConfig+0x254>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d01d      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2f      	ldr	r2, [pc, #188]	; (8004cb0 <DMA_SetConfig+0x258>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d018      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a2e      	ldr	r2, [pc, #184]	; (8004cb4 <DMA_SetConfig+0x25c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a2c      	ldr	r2, [pc, #176]	; (8004cb8 <DMA_SetConfig+0x260>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2b      	ldr	r2, [pc, #172]	; (8004cbc <DMA_SetConfig+0x264>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a29      	ldr	r2, [pc, #164]	; (8004cc0 <DMA_SetConfig+0x268>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a28      	ldr	r2, [pc, #160]	; (8004cc4 <DMA_SetConfig+0x26c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d101      	bne.n	8004c2c <DMA_SetConfig+0x1d4>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <DMA_SetConfig+0x1d6>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d05a      	beq.n	8004ce8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	223f      	movs	r2, #63	; 0x3f
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c50:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b40      	cmp	r3, #64	; 0x40
 8004c60:	d108      	bne.n	8004c74 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c72:	e0af      	b.n	8004dd4 <DMA_SetConfig+0x37c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	60da      	str	r2, [r3, #12]
}
 8004c84:	e0a6      	b.n	8004dd4 <DMA_SetConfig+0x37c>
 8004c86:	bf00      	nop
 8004c88:	40020010 	.word	0x40020010
 8004c8c:	40020028 	.word	0x40020028
 8004c90:	40020040 	.word	0x40020040
 8004c94:	40020058 	.word	0x40020058
 8004c98:	40020070 	.word	0x40020070
 8004c9c:	40020088 	.word	0x40020088
 8004ca0:	400200a0 	.word	0x400200a0
 8004ca4:	400200b8 	.word	0x400200b8
 8004ca8:	40020410 	.word	0x40020410
 8004cac:	40020428 	.word	0x40020428
 8004cb0:	40020440 	.word	0x40020440
 8004cb4:	40020458 	.word	0x40020458
 8004cb8:	40020470 	.word	0x40020470
 8004cbc:	40020488 	.word	0x40020488
 8004cc0:	400204a0 	.word	0x400204a0
 8004cc4:	400204b8 	.word	0x400204b8
 8004cc8:	58025408 	.word	0x58025408
 8004ccc:	5802541c 	.word	0x5802541c
 8004cd0:	58025430 	.word	0x58025430
 8004cd4:	58025444 	.word	0x58025444
 8004cd8:	58025458 	.word	0x58025458
 8004cdc:	5802546c 	.word	0x5802546c
 8004ce0:	58025480 	.word	0x58025480
 8004ce4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a3c      	ldr	r2, [pc, #240]	; (8004de0 <DMA_SetConfig+0x388>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d04a      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a3b      	ldr	r2, [pc, #236]	; (8004de4 <DMA_SetConfig+0x38c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d045      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a39      	ldr	r2, [pc, #228]	; (8004de8 <DMA_SetConfig+0x390>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d040      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a38      	ldr	r2, [pc, #224]	; (8004dec <DMA_SetConfig+0x394>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d03b      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a36      	ldr	r2, [pc, #216]	; (8004df0 <DMA_SetConfig+0x398>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d036      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a35      	ldr	r2, [pc, #212]	; (8004df4 <DMA_SetConfig+0x39c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d031      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a33      	ldr	r2, [pc, #204]	; (8004df8 <DMA_SetConfig+0x3a0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d02c      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a32      	ldr	r2, [pc, #200]	; (8004dfc <DMA_SetConfig+0x3a4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d027      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a30      	ldr	r2, [pc, #192]	; (8004e00 <DMA_SetConfig+0x3a8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d022      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2f      	ldr	r2, [pc, #188]	; (8004e04 <DMA_SetConfig+0x3ac>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d01d      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a2d      	ldr	r2, [pc, #180]	; (8004e08 <DMA_SetConfig+0x3b0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d018      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a2c      	ldr	r2, [pc, #176]	; (8004e0c <DMA_SetConfig+0x3b4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d013      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2a      	ldr	r2, [pc, #168]	; (8004e10 <DMA_SetConfig+0x3b8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d00e      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a29      	ldr	r2, [pc, #164]	; (8004e14 <DMA_SetConfig+0x3bc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d009      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a27      	ldr	r2, [pc, #156]	; (8004e18 <DMA_SetConfig+0x3c0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <DMA_SetConfig+0x330>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a26      	ldr	r2, [pc, #152]	; (8004e1c <DMA_SetConfig+0x3c4>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d101      	bne.n	8004d8c <DMA_SetConfig+0x334>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <DMA_SetConfig+0x336>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d020      	beq.n	8004dd4 <DMA_SetConfig+0x37c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	409a      	lsls	r2, r3
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	2b40      	cmp	r3, #64	; 0x40
 8004db0:	d108      	bne.n	8004dc4 <DMA_SetConfig+0x36c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	60da      	str	r2, [r3, #12]
}
 8004dc2:	e007      	b.n	8004dd4 <DMA_SetConfig+0x37c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	60da      	str	r2, [r3, #12]
}
 8004dd4:	bf00      	nop
 8004dd6:	371c      	adds	r7, #28
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr
 8004de0:	48022c08 	.word	0x48022c08
 8004de4:	48022c1c 	.word	0x48022c1c
 8004de8:	48022c30 	.word	0x48022c30
 8004dec:	48022c44 	.word	0x48022c44
 8004df0:	48022c58 	.word	0x48022c58
 8004df4:	48022c6c 	.word	0x48022c6c
 8004df8:	48022c80 	.word	0x48022c80
 8004dfc:	48022c94 	.word	0x48022c94
 8004e00:	58025408 	.word	0x58025408
 8004e04:	5802541c 	.word	0x5802541c
 8004e08:	58025430 	.word	0x58025430
 8004e0c:	58025444 	.word	0x58025444
 8004e10:	58025458 	.word	0x58025458
 8004e14:	5802546c 	.word	0x5802546c
 8004e18:	58025480 	.word	0x58025480
 8004e1c:	58025494 	.word	0x58025494

08004e20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a42      	ldr	r2, [pc, #264]	; (8004f38 <DMA_CalcBaseAndBitshift+0x118>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d04a      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a41      	ldr	r2, [pc, #260]	; (8004f3c <DMA_CalcBaseAndBitshift+0x11c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d045      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a3f      	ldr	r2, [pc, #252]	; (8004f40 <DMA_CalcBaseAndBitshift+0x120>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d040      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a3e      	ldr	r2, [pc, #248]	; (8004f44 <DMA_CalcBaseAndBitshift+0x124>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d03b      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a3c      	ldr	r2, [pc, #240]	; (8004f48 <DMA_CalcBaseAndBitshift+0x128>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d036      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a3b      	ldr	r2, [pc, #236]	; (8004f4c <DMA_CalcBaseAndBitshift+0x12c>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d031      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a39      	ldr	r2, [pc, #228]	; (8004f50 <DMA_CalcBaseAndBitshift+0x130>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d02c      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a38      	ldr	r2, [pc, #224]	; (8004f54 <DMA_CalcBaseAndBitshift+0x134>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d027      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a36      	ldr	r2, [pc, #216]	; (8004f58 <DMA_CalcBaseAndBitshift+0x138>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d022      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a35      	ldr	r2, [pc, #212]	; (8004f5c <DMA_CalcBaseAndBitshift+0x13c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d01d      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a33      	ldr	r2, [pc, #204]	; (8004f60 <DMA_CalcBaseAndBitshift+0x140>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d018      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a32      	ldr	r2, [pc, #200]	; (8004f64 <DMA_CalcBaseAndBitshift+0x144>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d013      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a30      	ldr	r2, [pc, #192]	; (8004f68 <DMA_CalcBaseAndBitshift+0x148>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d00e      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a2f      	ldr	r2, [pc, #188]	; (8004f6c <DMA_CalcBaseAndBitshift+0x14c>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a2d      	ldr	r2, [pc, #180]	; (8004f70 <DMA_CalcBaseAndBitshift+0x150>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <DMA_CalcBaseAndBitshift+0xa8>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2c      	ldr	r2, [pc, #176]	; (8004f74 <DMA_CalcBaseAndBitshift+0x154>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d101      	bne.n	8004ecc <DMA_CalcBaseAndBitshift+0xac>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e000      	b.n	8004ece <DMA_CalcBaseAndBitshift+0xae>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d024      	beq.n	8004f1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	3b10      	subs	r3, #16
 8004eda:	4a27      	ldr	r2, [pc, #156]	; (8004f78 <DMA_CalcBaseAndBitshift+0x158>)
 8004edc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee0:	091b      	lsrs	r3, r3, #4
 8004ee2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	4a24      	ldr	r2, [pc, #144]	; (8004f7c <DMA_CalcBaseAndBitshift+0x15c>)
 8004eec:	5cd3      	ldrb	r3, [r2, r3]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d908      	bls.n	8004f0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	461a      	mov	r2, r3
 8004f00:	4b1f      	ldr	r3, [pc, #124]	; (8004f80 <DMA_CalcBaseAndBitshift+0x160>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	1d1a      	adds	r2, r3, #4
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	659a      	str	r2, [r3, #88]	; 0x58
 8004f0a:	e00d      	b.n	8004f28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	461a      	mov	r2, r3
 8004f12:	4b1b      	ldr	r3, [pc, #108]	; (8004f80 <DMA_CalcBaseAndBitshift+0x160>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6593      	str	r3, [r2, #88]	; 0x58
 8004f1a:	e005      	b.n	8004f28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40020010 	.word	0x40020010
 8004f3c:	40020028 	.word	0x40020028
 8004f40:	40020040 	.word	0x40020040
 8004f44:	40020058 	.word	0x40020058
 8004f48:	40020070 	.word	0x40020070
 8004f4c:	40020088 	.word	0x40020088
 8004f50:	400200a0 	.word	0x400200a0
 8004f54:	400200b8 	.word	0x400200b8
 8004f58:	40020410 	.word	0x40020410
 8004f5c:	40020428 	.word	0x40020428
 8004f60:	40020440 	.word	0x40020440
 8004f64:	40020458 	.word	0x40020458
 8004f68:	40020470 	.word	0x40020470
 8004f6c:	40020488 	.word	0x40020488
 8004f70:	400204a0 	.word	0x400204a0
 8004f74:	400204b8 	.word	0x400204b8
 8004f78:	aaaaaaab 	.word	0xaaaaaaab
 8004f7c:	0800a510 	.word	0x0800a510
 8004f80:	fffffc00 	.word	0xfffffc00

08004f84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d120      	bne.n	8004fda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d858      	bhi.n	8005052 <DMA_CheckFifoParam+0xce>
 8004fa0:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <DMA_CheckFifoParam+0x24>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004fb9 	.word	0x08004fb9
 8004fac:	08004fcb 	.word	0x08004fcb
 8004fb0:	08004fb9 	.word	0x08004fb9
 8004fb4:	08005053 	.word	0x08005053
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d048      	beq.n	8005056 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fc8:	e045      	b.n	8005056 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fd2:	d142      	bne.n	800505a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fd8:	e03f      	b.n	800505a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe2:	d123      	bne.n	800502c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe8:	2b03      	cmp	r3, #3
 8004fea:	d838      	bhi.n	800505e <DMA_CheckFifoParam+0xda>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <DMA_CheckFifoParam+0x70>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005005 	.word	0x08005005
 8004ff8:	0800500b 	.word	0x0800500b
 8004ffc:	08005005 	.word	0x08005005
 8005000:	0800501d 	.word	0x0800501d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	73fb      	strb	r3, [r7, #15]
        break;
 8005008:	e030      	b.n	800506c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d025      	beq.n	8005062 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800501a:	e022      	b.n	8005062 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005024:	d11f      	bne.n	8005066 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800502a:	e01c      	b.n	8005066 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005030:	2b02      	cmp	r3, #2
 8005032:	d902      	bls.n	800503a <DMA_CheckFifoParam+0xb6>
 8005034:	2b03      	cmp	r3, #3
 8005036:	d003      	beq.n	8005040 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005038:	e018      	b.n	800506c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	73fb      	strb	r3, [r7, #15]
        break;
 800503e:	e015      	b.n	800506c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00e      	beq.n	800506a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
    break;
 8005050:	e00b      	b.n	800506a <DMA_CheckFifoParam+0xe6>
        break;
 8005052:	bf00      	nop
 8005054:	e00a      	b.n	800506c <DMA_CheckFifoParam+0xe8>
        break;
 8005056:	bf00      	nop
 8005058:	e008      	b.n	800506c <DMA_CheckFifoParam+0xe8>
        break;
 800505a:	bf00      	nop
 800505c:	e006      	b.n	800506c <DMA_CheckFifoParam+0xe8>
        break;
 800505e:	bf00      	nop
 8005060:	e004      	b.n	800506c <DMA_CheckFifoParam+0xe8>
        break;
 8005062:	bf00      	nop
 8005064:	e002      	b.n	800506c <DMA_CheckFifoParam+0xe8>
        break;
 8005066:	bf00      	nop
 8005068:	e000      	b.n	800506c <DMA_CheckFifoParam+0xe8>
    break;
 800506a:	bf00      	nop
    }
  }

  return status;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop

0800507c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a38      	ldr	r2, [pc, #224]	; (8005170 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d022      	beq.n	80050da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a36      	ldr	r2, [pc, #216]	; (8005174 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d01d      	beq.n	80050da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a35      	ldr	r2, [pc, #212]	; (8005178 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d018      	beq.n	80050da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a33      	ldr	r2, [pc, #204]	; (800517c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a32      	ldr	r2, [pc, #200]	; (8005180 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a30      	ldr	r2, [pc, #192]	; (8005184 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d009      	beq.n	80050da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2d      	ldr	r2, [pc, #180]	; (800518c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d101      	bne.n	80050de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80050de:	2300      	movs	r3, #0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01a      	beq.n	800511a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	3b08      	subs	r3, #8
 80050ec:	4a28      	ldr	r2, [pc, #160]	; (8005190 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4b26      	ldr	r3, [pc, #152]	; (8005194 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	461a      	mov	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a24      	ldr	r2, [pc, #144]	; (8005198 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005108:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 031f 	and.w	r3, r3, #31
 8005110:	2201      	movs	r2, #1
 8005112:	409a      	lsls	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005118:	e024      	b.n	8005164 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	b2db      	uxtb	r3, r3
 8005120:	3b10      	subs	r3, #16
 8005122:	4a1e      	ldr	r2, [pc, #120]	; (800519c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005124:	fba2 2303 	umull	r2, r3, r2, r3
 8005128:	091b      	lsrs	r3, r3, #4
 800512a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4a1c      	ldr	r2, [pc, #112]	; (80051a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d806      	bhi.n	8005142 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d902      	bls.n	8005142 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3308      	adds	r3, #8
 8005140:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4b18      	ldr	r3, [pc, #96]	; (80051a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	461a      	mov	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a16      	ldr	r2, [pc, #88]	; (80051ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005154:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2201      	movs	r2, #1
 800515e:	409a      	lsls	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005164:	bf00      	nop
 8005166:	3714      	adds	r7, #20
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	58025408 	.word	0x58025408
 8005174:	5802541c 	.word	0x5802541c
 8005178:	58025430 	.word	0x58025430
 800517c:	58025444 	.word	0x58025444
 8005180:	58025458 	.word	0x58025458
 8005184:	5802546c 	.word	0x5802546c
 8005188:	58025480 	.word	0x58025480
 800518c:	58025494 	.word	0x58025494
 8005190:	cccccccd 	.word	0xcccccccd
 8005194:	16009600 	.word	0x16009600
 8005198:	58025880 	.word	0x58025880
 800519c:	aaaaaaab 	.word	0xaaaaaaab
 80051a0:	400204b8 	.word	0x400204b8
 80051a4:	4002040f 	.word	0x4002040f
 80051a8:	10008200 	.word	0x10008200
 80051ac:	40020880 	.word	0x40020880

080051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d04a      	beq.n	800525c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d847      	bhi.n	800525c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a25      	ldr	r2, [pc, #148]	; (8005268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a24      	ldr	r2, [pc, #144]	; (800526c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d01d      	beq.n	800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a21      	ldr	r2, [pc, #132]	; (8005274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a1f      	ldr	r2, [pc, #124]	; (8005278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a1e      	ldr	r2, [pc, #120]	; (800527c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005220:	2300      	movs	r3, #0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	4b17      	ldr	r3, [pc, #92]	; (8005288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800522a:	4413      	add	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	461a      	mov	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005238:	671a      	str	r2, [r3, #112]	; 0x70
 800523a:	e009      	b.n	8005250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4b14      	ldr	r3, [pc, #80]	; (8005290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	461a      	mov	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a11      	ldr	r2, [pc, #68]	; (8005294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800524e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	3b01      	subs	r3, #1
 8005254:	2201      	movs	r2, #1
 8005256:	409a      	lsls	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	58025408 	.word	0x58025408
 800526c:	5802541c 	.word	0x5802541c
 8005270:	58025430 	.word	0x58025430
 8005274:	58025444 	.word	0x58025444
 8005278:	58025458 	.word	0x58025458
 800527c:	5802546c 	.word	0x5802546c
 8005280:	58025480 	.word	0x58025480
 8005284:	58025494 	.word	0x58025494
 8005288:	1600963f 	.word	0x1600963f
 800528c:	58025940 	.word	0x58025940
 8005290:	1000823f 	.word	0x1000823f
 8005294:	40020940 	.word	0x40020940

08005298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005298:	b480      	push	{r7}
 800529a:	b089      	sub	sp, #36	; 0x24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80052a6:	4b89      	ldr	r3, [pc, #548]	; (80054cc <HAL_GPIO_Init+0x234>)
 80052a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052aa:	e194      	b.n	80055d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	2101      	movs	r1, #1
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	fa01 f303 	lsl.w	r3, r1, r3
 80052b8:	4013      	ands	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 8186 	beq.w	80055d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d00b      	beq.n	80052e4 <HAL_GPIO_Init+0x4c>
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d007      	beq.n	80052e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052d8:	2b11      	cmp	r3, #17
 80052da:	d003      	beq.n	80052e4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b12      	cmp	r3, #18
 80052e2:	d130      	bne.n	8005346 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	2203      	movs	r2, #3
 80052f0:	fa02 f303 	lsl.w	r3, r2, r3
 80052f4:	43db      	mvns	r3, r3
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4013      	ands	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68da      	ldr	r2, [r3, #12]
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4313      	orrs	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800531a:	2201      	movs	r2, #1
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	f003 0201 	and.w	r2, r3, #1
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4313      	orrs	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	2203      	movs	r2, #3
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	43db      	mvns	r3, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4013      	ands	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	fa02 f303 	lsl.w	r3, r2, r3
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d003      	beq.n	8005386 <HAL_GPIO_Init+0xee>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b12      	cmp	r3, #18
 8005384:	d123      	bne.n	80053ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	08da      	lsrs	r2, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3208      	adds	r2, #8
 800538e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	220f      	movs	r2, #15
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	43db      	mvns	r3, r3
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	4013      	ands	r3, r2
 80053a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	691a      	ldr	r2, [r3, #16]
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	69ba      	ldr	r2, [r7, #24]
 80053bc:	4313      	orrs	r3, r2
 80053be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	08da      	lsrs	r2, r3, #3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3208      	adds	r2, #8
 80053c8:	69b9      	ldr	r1, [r7, #24]
 80053ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	2203      	movs	r2, #3
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	43db      	mvns	r3, r3
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	4013      	ands	r3, r2
 80053e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f003 0203 	and.w	r2, r3, #3
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	fa02 f303 	lsl.w	r3, r2, r3
 80053f6:	69ba      	ldr	r2, [r7, #24]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	69ba      	ldr	r2, [r7, #24]
 8005400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80e0 	beq.w	80055d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005410:	4b2f      	ldr	r3, [pc, #188]	; (80054d0 <HAL_GPIO_Init+0x238>)
 8005412:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005416:	4a2e      	ldr	r2, [pc, #184]	; (80054d0 <HAL_GPIO_Init+0x238>)
 8005418:	f043 0302 	orr.w	r3, r3, #2
 800541c:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8005420:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <HAL_GPIO_Init+0x238>)
 8005422:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800542e:	4a29      	ldr	r2, [pc, #164]	; (80054d4 <HAL_GPIO_Init+0x23c>)
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	3302      	adds	r3, #2
 8005436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	220f      	movs	r2, #15
 8005446:	fa02 f303 	lsl.w	r3, r2, r3
 800544a:	43db      	mvns	r3, r3
 800544c:	69ba      	ldr	r2, [r7, #24]
 800544e:	4013      	ands	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a20      	ldr	r2, [pc, #128]	; (80054d8 <HAL_GPIO_Init+0x240>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d052      	beq.n	8005500 <HAL_GPIO_Init+0x268>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a1f      	ldr	r2, [pc, #124]	; (80054dc <HAL_GPIO_Init+0x244>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d031      	beq.n	80054c6 <HAL_GPIO_Init+0x22e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a1e      	ldr	r2, [pc, #120]	; (80054e0 <HAL_GPIO_Init+0x248>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d02b      	beq.n	80054c2 <HAL_GPIO_Init+0x22a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a1d      	ldr	r2, [pc, #116]	; (80054e4 <HAL_GPIO_Init+0x24c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d025      	beq.n	80054be <HAL_GPIO_Init+0x226>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a1c      	ldr	r2, [pc, #112]	; (80054e8 <HAL_GPIO_Init+0x250>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01f      	beq.n	80054ba <HAL_GPIO_Init+0x222>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <HAL_GPIO_Init+0x254>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d019      	beq.n	80054b6 <HAL_GPIO_Init+0x21e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a1a      	ldr	r2, [pc, #104]	; (80054f0 <HAL_GPIO_Init+0x258>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_GPIO_Init+0x21a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a19      	ldr	r2, [pc, #100]	; (80054f4 <HAL_GPIO_Init+0x25c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00d      	beq.n	80054ae <HAL_GPIO_Init+0x216>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <HAL_GPIO_Init+0x260>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <HAL_GPIO_Init+0x212>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a17      	ldr	r2, [pc, #92]	; (80054fc <HAL_GPIO_Init+0x264>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <HAL_GPIO_Init+0x20e>
 80054a2:	2309      	movs	r3, #9
 80054a4:	e02d      	b.n	8005502 <HAL_GPIO_Init+0x26a>
 80054a6:	230a      	movs	r3, #10
 80054a8:	e02b      	b.n	8005502 <HAL_GPIO_Init+0x26a>
 80054aa:	2308      	movs	r3, #8
 80054ac:	e029      	b.n	8005502 <HAL_GPIO_Init+0x26a>
 80054ae:	2307      	movs	r3, #7
 80054b0:	e027      	b.n	8005502 <HAL_GPIO_Init+0x26a>
 80054b2:	2306      	movs	r3, #6
 80054b4:	e025      	b.n	8005502 <HAL_GPIO_Init+0x26a>
 80054b6:	2305      	movs	r3, #5
 80054b8:	e023      	b.n	8005502 <HAL_GPIO_Init+0x26a>
 80054ba:	2304      	movs	r3, #4
 80054bc:	e021      	b.n	8005502 <HAL_GPIO_Init+0x26a>
 80054be:	2303      	movs	r3, #3
 80054c0:	e01f      	b.n	8005502 <HAL_GPIO_Init+0x26a>
 80054c2:	2302      	movs	r3, #2
 80054c4:	e01d      	b.n	8005502 <HAL_GPIO_Init+0x26a>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e01b      	b.n	8005502 <HAL_GPIO_Init+0x26a>
 80054ca:	bf00      	nop
 80054cc:	58000080 	.word	0x58000080
 80054d0:	58024400 	.word	0x58024400
 80054d4:	58000400 	.word	0x58000400
 80054d8:	58020000 	.word	0x58020000
 80054dc:	58020400 	.word	0x58020400
 80054e0:	58020800 	.word	0x58020800
 80054e4:	58020c00 	.word	0x58020c00
 80054e8:	58021000 	.word	0x58021000
 80054ec:	58021400 	.word	0x58021400
 80054f0:	58021800 	.word	0x58021800
 80054f4:	58021c00 	.word	0x58021c00
 80054f8:	58022000 	.word	0x58022000
 80054fc:	58022400 	.word	0x58022400
 8005500:	2300      	movs	r3, #0
 8005502:	69fa      	ldr	r2, [r7, #28]
 8005504:	f002 0203 	and.w	r2, r2, #3
 8005508:	0092      	lsls	r2, r2, #2
 800550a:	4093      	lsls	r3, r2
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4313      	orrs	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005512:	4938      	ldr	r1, [pc, #224]	; (80055f4 <HAL_GPIO_Init+0x35c>)
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	089b      	lsrs	r3, r3, #2
 8005518:	3302      	adds	r3, #2
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	43db      	mvns	r3, r3
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	4013      	ands	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	43db      	mvns	r3, r3
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	4013      	ands	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	4313      	orrs	r3, r2
 800556c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	43db      	mvns	r3, r3
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	4013      	ands	r3, r2
 8005584:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800559a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80055a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	69ba      	ldr	r2, [r7, #24]
 80055b0:	4013      	ands	r3, r2
 80055b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80055c0:	69ba      	ldr	r2, [r7, #24]
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80055c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	3301      	adds	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f47f ae63 	bne.w	80052ac <HAL_GPIO_Init+0x14>
  }
}
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	3724      	adds	r7, #36	; 0x24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	58000400 	.word	0x58000400

080055f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	807b      	strh	r3, [r7, #2]
 8005604:	4613      	mov	r3, r2
 8005606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005608:	787b      	ldrb	r3, [r7, #1]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d003      	beq.n	8005616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800560e:	887a      	ldrh	r2, [r7, #2]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005614:	e003      	b.n	800561e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005616:	887b      	ldrh	r3, [r7, #2]
 8005618:	041a      	lsls	r2, r3, #16
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	619a      	str	r2, [r3, #24]
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
	...

0800562c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005634:	4b29      	ldr	r3, [pc, #164]	; (80056dc <HAL_PWREx_ConfigSupply+0xb0>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2b06      	cmp	r3, #6
 800563e:	d00a      	beq.n	8005656 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005640:	4b26      	ldr	r3, [pc, #152]	; (80056dc <HAL_PWREx_ConfigSupply+0xb0>)
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	d001      	beq.n	8005652 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e040      	b.n	80056d4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	e03e      	b.n	80056d4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005656:	4b21      	ldr	r3, [pc, #132]	; (80056dc <HAL_PWREx_ConfigSupply+0xb0>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800565e:	491f      	ldr	r1, [pc, #124]	; (80056dc <HAL_PWREx_ConfigSupply+0xb0>)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4313      	orrs	r3, r2
 8005664:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005666:	f7fc f86f 	bl	8001748 <HAL_GetTick>
 800566a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800566c:	e009      	b.n	8005682 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800566e:	f7fc f86b 	bl	8001748 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800567c:	d901      	bls.n	8005682 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e028      	b.n	80056d4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005682:	4b16      	ldr	r3, [pc, #88]	; (80056dc <HAL_PWREx_ConfigSupply+0xb0>)
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800568a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568e:	d1ee      	bne.n	800566e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b1e      	cmp	r3, #30
 8005694:	d008      	beq.n	80056a8 <HAL_PWREx_ConfigSupply+0x7c>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b2e      	cmp	r3, #46	; 0x2e
 800569a:	d005      	beq.n	80056a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b1d      	cmp	r3, #29
 80056a0:	d002      	beq.n	80056a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b2d      	cmp	r3, #45	; 0x2d
 80056a6:	d114      	bne.n	80056d2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80056a8:	f7fc f84e 	bl	8001748 <HAL_GetTick>
 80056ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80056ae:	e009      	b.n	80056c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056b0:	f7fc f84a 	bl	8001748 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056be:	d901      	bls.n	80056c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e007      	b.n	80056d4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80056c4:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_PWREx_ConfigSupply+0xb0>)
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056d0:	d1ee      	bne.n	80056b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	58024800 	.word	0x58024800

080056e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08c      	sub	sp, #48	; 0x30
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e3d7      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80b3 	beq.w	8005866 <HAL_RCC_OscConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005700:	4b90      	ldr	r3, [pc, #576]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005708:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800570a:	4b8e      	ldr	r3, [pc, #568]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 800570c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800570e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005712:	2b10      	cmp	r3, #16
 8005714:	d007      	beq.n	8005726 <HAL_RCC_OscConfig+0x46>
 8005716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005718:	2b18      	cmp	r3, #24
 800571a:	d112      	bne.n	8005742 <HAL_RCC_OscConfig+0x62>
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	f003 0303 	and.w	r3, r3, #3
 8005722:	2b02      	cmp	r3, #2
 8005724:	d10d      	bne.n	8005742 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005726:	4b87      	ldr	r3, [pc, #540]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 8098 	beq.w	8005864 <HAL_RCC_OscConfig+0x184>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	f040 8093 	bne.w	8005864 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e3af      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800574a:	d106      	bne.n	800575a <HAL_RCC_OscConfig+0x7a>
 800574c:	4b7d      	ldr	r3, [pc, #500]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a7c      	ldr	r2, [pc, #496]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e058      	b.n	800580c <HAL_RCC_OscConfig+0x12c>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d112      	bne.n	8005788 <HAL_RCC_OscConfig+0xa8>
 8005762:	4b78      	ldr	r3, [pc, #480]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a77      	ldr	r2, [pc, #476]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	4b75      	ldr	r3, [pc, #468]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a74      	ldr	r2, [pc, #464]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005774:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	4b72      	ldr	r3, [pc, #456]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a71      	ldr	r2, [pc, #452]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e041      	b.n	800580c <HAL_RCC_OscConfig+0x12c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005790:	d112      	bne.n	80057b8 <HAL_RCC_OscConfig+0xd8>
 8005792:	4b6c      	ldr	r3, [pc, #432]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a6b      	ldr	r2, [pc, #428]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	4b69      	ldr	r3, [pc, #420]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a68      	ldr	r2, [pc, #416]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	4b66      	ldr	r3, [pc, #408]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a65      	ldr	r2, [pc, #404]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	e029      	b.n	800580c <HAL_RCC_OscConfig+0x12c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80057c0:	d112      	bne.n	80057e8 <HAL_RCC_OscConfig+0x108>
 80057c2:	4b60      	ldr	r3, [pc, #384]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a5f      	ldr	r2, [pc, #380]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	4b5d      	ldr	r3, [pc, #372]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a5c      	ldr	r2, [pc, #368]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	4b5a      	ldr	r3, [pc, #360]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a59      	ldr	r2, [pc, #356]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e011      	b.n	800580c <HAL_RCC_OscConfig+0x12c>
 80057e8:	4b56      	ldr	r3, [pc, #344]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a55      	ldr	r2, [pc, #340]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	4b53      	ldr	r3, [pc, #332]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a52      	ldr	r2, [pc, #328]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80057fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	4b50      	ldr	r3, [pc, #320]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a4f      	ldr	r2, [pc, #316]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005806:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800580a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d013      	beq.n	800583c <HAL_RCC_OscConfig+0x15c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005814:	f7fb ff98 	bl	8001748 <HAL_GetTick>
 8005818:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0x14e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800581c:	f7fb ff94 	bl	8001748 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b64      	cmp	r3, #100	; 0x64
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0x14e>
          {
            return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e339      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800582e:	4b45      	ldr	r3, [pc, #276]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d0f0      	beq.n	800581c <HAL_RCC_OscConfig+0x13c>
 800583a:	e014      	b.n	8005866 <HAL_RCC_OscConfig+0x186>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fb ff84 	bl	8001748 <HAL_GetTick>
 8005840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005842:	e008      	b.n	8005856 <HAL_RCC_OscConfig+0x176>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005844:	f7fb ff80 	bl	8001748 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b64      	cmp	r3, #100	; 0x64
 8005850:	d901      	bls.n	8005856 <HAL_RCC_OscConfig+0x176>
          {
            return HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	e325      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005856:	4b3b      	ldr	r3, [pc, #236]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f0      	bne.n	8005844 <HAL_RCC_OscConfig+0x164>
 8005862:	e000      	b.n	8005866 <HAL_RCC_OscConfig+0x186>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005864:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	2b00      	cmp	r3, #0
 8005870:	d070      	beq.n	8005954 <HAL_RCC_OscConfig+0x274>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005872:	4b34      	ldr	r3, [pc, #208]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800587a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800587c:	4b31      	ldr	r3, [pc, #196]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d007      	beq.n	8005898 <HAL_RCC_OscConfig+0x1b8>
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	2b18      	cmp	r3, #24
 800588c:	d11b      	bne.n	80058c6 <HAL_RCC_OscConfig+0x1e6>
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f003 0303 	and.w	r3, r3, #3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d116      	bne.n	80058c6 <HAL_RCC_OscConfig+0x1e6>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005898:	4b2a      	ldr	r3, [pc, #168]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <HAL_RCC_OscConfig+0x1d0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_RCC_OscConfig+0x1d0>
      {
        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e2f8      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b0:	4b24      	ldr	r3, [pc, #144]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	061b      	lsls	r3, r3, #24
 80058be:	4921      	ldr	r1, [pc, #132]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058c4:	e046      	b.n	8005954 <HAL_RCC_OscConfig+0x274>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d026      	beq.n	800591c <HAL_RCC_OscConfig+0x23c>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058ce:	4b1d      	ldr	r3, [pc, #116]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f023 0219 	bic.w	r2, r3, #25
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	491a      	ldr	r1, [pc, #104]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e0:	f7fb ff32 	bl	8001748 <HAL_GetTick>
 80058e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058e6:	e008      	b.n	80058fa <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058e8:	f7fb ff2e 	bl	8001748 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d901      	bls.n	80058fa <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e2d3      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058fa:	4b12      	ldr	r3, [pc, #72]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0304 	and.w	r3, r3, #4
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <HAL_RCC_OscConfig+0x208>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005906:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	061b      	lsls	r3, r3, #24
 8005914:	490b      	ldr	r1, [pc, #44]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005916:	4313      	orrs	r3, r2
 8005918:	604b      	str	r3, [r1, #4]
 800591a:	e01b      	b.n	8005954 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800591c:	4b09      	ldr	r3, [pc, #36]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a08      	ldr	r2, [pc, #32]	; (8005944 <HAL_RCC_OscConfig+0x264>)
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fb ff0e 	bl	8001748 <HAL_GetTick>
 800592c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800592e:	e00b      	b.n	8005948 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005930:	f7fb ff0a 	bl	8001748 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d904      	bls.n	8005948 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e2af      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
 8005942:	bf00      	nop
 8005944:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005948:	4b99      	ldr	r3, [pc, #612]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1ed      	bne.n	8005930 <HAL_RCC_OscConfig+0x250>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b00      	cmp	r3, #0
 800595e:	d06a      	beq.n	8005a36 <HAL_RCC_OscConfig+0x356>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005960:	4b93      	ldr	r3, [pc, #588]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005968:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800596a:	4b91      	ldr	r3, [pc, #580]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	2b08      	cmp	r3, #8
 8005974:	d007      	beq.n	8005986 <HAL_RCC_OscConfig+0x2a6>
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b18      	cmp	r3, #24
 800597a:	d11b      	bne.n	80059b4 <HAL_RCC_OscConfig+0x2d4>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d116      	bne.n	80059b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005986:	4b8a      	ldr	r3, [pc, #552]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <HAL_RCC_OscConfig+0x2be>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	2b80      	cmp	r3, #128	; 0x80
 8005998:	d001      	beq.n	800599e <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e281      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800599e:	4b84      	ldr	r3, [pc, #528]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	061b      	lsls	r3, r3, #24
 80059ac:	4980      	ldr	r1, [pc, #512]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059b2:	e040      	b.n	8005a36 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d023      	beq.n	8005a04 <HAL_RCC_OscConfig+0x324>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80059bc:	4b7c      	ldr	r3, [pc, #496]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a7b      	ldr	r2, [pc, #492]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 80059c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c8:	f7fb febe 	bl	8001748 <HAL_GetTick>
 80059cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x302>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80059d0:	f7fb feba 	bl	8001748 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e25f      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80059e2:	4b73      	ldr	r3, [pc, #460]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f0      	beq.n	80059d0 <HAL_RCC_OscConfig+0x2f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059ee:	4b70      	ldr	r3, [pc, #448]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	061b      	lsls	r3, r3, #24
 80059fc:	496c      	ldr	r1, [pc, #432]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60cb      	str	r3, [r1, #12]
 8005a02:	e018      	b.n	8005a36 <HAL_RCC_OscConfig+0x356>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a04:	4b6a      	ldr	r3, [pc, #424]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a69      	ldr	r2, [pc, #420]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a10:	f7fb fe9a 	bl	8001748 <HAL_GetTick>
 8005a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0x34a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005a18:	f7fb fe96 	bl	8001748 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0x34a>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e23b      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a2a:	4b61      	ldr	r3, [pc, #388]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0x338>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d036      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d019      	beq.n	8005a7e <HAL_RCC_OscConfig+0x39e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a4a:	4b59      	ldr	r3, [pc, #356]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a4e:	4a58      	ldr	r2, [pc, #352]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a56:	f7fb fe77 	bl	8001748 <HAL_GetTick>
 8005a5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a5c:	e008      	b.n	8005a70 <HAL_RCC_OscConfig+0x390>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a5e:	f7fb fe73 	bl	8001748 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d901      	bls.n	8005a70 <HAL_RCC_OscConfig+0x390>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e218      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a70:	4b4f      	ldr	r3, [pc, #316]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0f0      	beq.n	8005a5e <HAL_RCC_OscConfig+0x37e>
 8005a7c:	e018      	b.n	8005ab0 <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a7e:	4b4c      	ldr	r3, [pc, #304]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a82:	4a4b      	ldr	r2, [pc, #300]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005a84:	f023 0301 	bic.w	r3, r3, #1
 8005a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a8a:	f7fb fe5d 	bl	8001748 <HAL_GetTick>
 8005a8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a92:	f7fb fe59 	bl	8001748 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e1fe      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005aa4:	4b42      	ldr	r3, [pc, #264]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f0      	bne.n	8005a92 <HAL_RCC_OscConfig+0x3b2>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d036      	beq.n	8005b2a <HAL_RCC_OscConfig+0x44a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d019      	beq.n	8005af8 <HAL_RCC_OscConfig+0x418>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ac4:	4b3a      	ldr	r3, [pc, #232]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a39      	ldr	r2, [pc, #228]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005aca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ace:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ad0:	f7fb fe3a 	bl	8001748 <HAL_GetTick>
 8005ad4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ad8:	f7fb fe36 	bl	8001748 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e1db      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005aea:	4b31      	ldr	r3, [pc, #196]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x3f8>
 8005af6:	e018      	b.n	8005b2a <HAL_RCC_OscConfig+0x44a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005af8:	4b2d      	ldr	r3, [pc, #180]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a2c      	ldr	r2, [pc, #176]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005afe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b02:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b04:	f7fb fe20 	bl	8001748 <HAL_GetTick>
 8005b08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x43e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005b0c:	f7fb fe1c 	bl	8001748 <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x43e>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e1c1      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x42c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 80af 	beq.w	8005c96 <HAL_RCC_OscConfig+0x5b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005b38:	4b1e      	ldr	r3, [pc, #120]	; (8005bb4 <HAL_RCC_OscConfig+0x4d4>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <HAL_RCC_OscConfig+0x4d4>)
 8005b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b44:	f7fb fe00 	bl	8001748 <HAL_GetTick>
 8005b48:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0x47e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b4c:	f7fb fdfc 	bl	8001748 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b64      	cmp	r3, #100	; 0x64
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e1a1      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b5e:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <HAL_RCC_OscConfig+0x4d4>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0x46c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d106      	bne.n	8005b80 <HAL_RCC_OscConfig+0x4a0>
 8005b72:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b76:	4a0e      	ldr	r2, [pc, #56]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7e:	e05b      	b.n	8005c38 <HAL_RCC_OscConfig+0x558>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d117      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x4d8>
 8005b88:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b8c:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b8e:	f023 0301 	bic.w	r3, r3, #1
 8005b92:	6713      	str	r3, [r2, #112]	; 0x70
 8005b94:	4b06      	ldr	r3, [pc, #24]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	4a05      	ldr	r2, [pc, #20]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005ba0:	4b03      	ldr	r3, [pc, #12]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba4:	4a02      	ldr	r2, [pc, #8]	; (8005bb0 <HAL_RCC_OscConfig+0x4d0>)
 8005ba6:	f023 0304 	bic.w	r3, r3, #4
 8005baa:	6713      	str	r3, [r2, #112]	; 0x70
 8005bac:	e044      	b.n	8005c38 <HAL_RCC_OscConfig+0x558>
 8005bae:	bf00      	nop
 8005bb0:	58024400 	.word	0x58024400
 8005bb4:	58024800 	.word	0x58024800
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b05      	cmp	r3, #5
 8005bbe:	d112      	bne.n	8005be6 <HAL_RCC_OscConfig+0x506>
 8005bc0:	4b95      	ldr	r3, [pc, #596]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc4:	4a94      	ldr	r2, [pc, #592]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005bc6:	f043 0304 	orr.w	r3, r3, #4
 8005bca:	6713      	str	r3, [r2, #112]	; 0x70
 8005bcc:	4b92      	ldr	r3, [pc, #584]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd0:	4a91      	ldr	r2, [pc, #580]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8005bd8:	4b8f      	ldr	r3, [pc, #572]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bdc:	4a8e      	ldr	r2, [pc, #568]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005bde:	f043 0301 	orr.w	r3, r3, #1
 8005be2:	6713      	str	r3, [r2, #112]	; 0x70
 8005be4:	e028      	b.n	8005c38 <HAL_RCC_OscConfig+0x558>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b85      	cmp	r3, #133	; 0x85
 8005bec:	d112      	bne.n	8005c14 <HAL_RCC_OscConfig+0x534>
 8005bee:	4b8a      	ldr	r3, [pc, #552]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf2:	4a89      	ldr	r2, [pc, #548]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005bf4:	f043 0304 	orr.w	r3, r3, #4
 8005bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8005bfa:	4b87      	ldr	r3, [pc, #540]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bfe:	4a86      	ldr	r2, [pc, #536]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c04:	6713      	str	r3, [r2, #112]	; 0x70
 8005c06:	4b84      	ldr	r3, [pc, #528]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	4a83      	ldr	r2, [pc, #524]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	6713      	str	r3, [r2, #112]	; 0x70
 8005c12:	e011      	b.n	8005c38 <HAL_RCC_OscConfig+0x558>
 8005c14:	4b80      	ldr	r3, [pc, #512]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c18:	4a7f      	ldr	r2, [pc, #508]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c1a:	f023 0301 	bic.w	r3, r3, #1
 8005c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005c20:	4b7d      	ldr	r3, [pc, #500]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	4a7c      	ldr	r2, [pc, #496]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c26:	f023 0304 	bic.w	r3, r3, #4
 8005c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c2c:	4b7a      	ldr	r3, [pc, #488]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	4a79      	ldr	r2, [pc, #484]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCC_OscConfig+0x58c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c40:	f7fb fd82 	bl	8001748 <HAL_GetTick>
 8005c44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c46:	e00a      	b.n	8005c5e <HAL_RCC_OscConfig+0x57e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c48:	f7fb fd7e 	bl	8001748 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d901      	bls.n	8005c5e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e121      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c5e:	4b6e      	ldr	r3, [pc, #440]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c62:	f003 0302 	and.w	r3, r3, #2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0ee      	beq.n	8005c48 <HAL_RCC_OscConfig+0x568>
 8005c6a:	e014      	b.n	8005c96 <HAL_RCC_OscConfig+0x5b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c6c:	f7fb fd6c 	bl	8001748 <HAL_GetTick>
 8005c70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c72:	e00a      	b.n	8005c8a <HAL_RCC_OscConfig+0x5aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c74:	f7fb fd68 	bl	8001748 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e10b      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c8a:	4b63      	ldr	r3, [pc, #396]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1ee      	bne.n	8005c74 <HAL_RCC_OscConfig+0x594>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 8100 	beq.w	8005ea0 <HAL_RCC_OscConfig+0x7c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005ca0:	4b5d      	ldr	r3, [pc, #372]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ca8:	2b18      	cmp	r3, #24
 8005caa:	f000 80bb 	beq.w	8005e24 <HAL_RCC_OscConfig+0x744>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	f040 8095 	bne.w	8005de2 <HAL_RCC_OscConfig+0x702>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cb8:	4b57      	ldr	r3, [pc, #348]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a56      	ldr	r2, [pc, #344]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005cbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc4:	f7fb fd40 	bl	8001748 <HAL_GetTick>
 8005cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ccc:	f7fb fd3c 	bl	8001748 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e0e1      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cde:	4b4e      	ldr	r3, [pc, #312]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d1f0      	bne.n	8005ccc <HAL_RCC_OscConfig+0x5ec>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005cea:	4b4b      	ldr	r3, [pc, #300]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cee:	4b4b      	ldr	r3, [pc, #300]	; (8005e1c <HAL_RCC_OscConfig+0x73c>)
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005cf6:	687a      	ldr	r2, [r7, #4]
 8005cf8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005cfa:	0112      	lsls	r2, r2, #4
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	4946      	ldr	r1, [pc, #280]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	628b      	str	r3, [r1, #40]	; 0x28
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d12:	3b01      	subs	r3, #1
 8005d14:	025b      	lsls	r3, r3, #9
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	041b      	lsls	r3, r3, #16
 8005d22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d26:	431a      	orrs	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	061b      	lsls	r3, r3, #24
 8005d30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d34:	4938      	ldr	r1, [pc, #224]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005d3a:	4b37      	ldr	r3, [pc, #220]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3e:	4a36      	ldr	r2, [pc, #216]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d40:	f023 0301 	bic.w	r3, r3, #1
 8005d44:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d46:	4b34      	ldr	r3, [pc, #208]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d4a:	4b35      	ldr	r3, [pc, #212]	; (8005e20 <HAL_RCC_OscConfig+0x740>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005d52:	00d2      	lsls	r2, r2, #3
 8005d54:	4930      	ldr	r1, [pc, #192]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d5a:	4b2f      	ldr	r3, [pc, #188]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	f023 020c 	bic.w	r2, r3, #12
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	492c      	ldr	r1, [pc, #176]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d6c:	4b2a      	ldr	r3, [pc, #168]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d70:	f023 0202 	bic.w	r2, r3, #2
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d78:	4927      	ldr	r1, [pc, #156]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d7e:	4b26      	ldr	r3, [pc, #152]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	4a25      	ldr	r2, [pc, #148]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d8a:	4b23      	ldr	r3, [pc, #140]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	4a22      	ldr	r2, [pc, #136]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005d96:	4b20      	ldr	r3, [pc, #128]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9a:	4a1f      	ldr	r2, [pc, #124]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005d9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005da0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005da2:	4b1d      	ldr	r3, [pc, #116]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	4a1c      	ldr	r2, [pc, #112]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dae:	4b1a      	ldr	r3, [pc, #104]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a19      	ldr	r2, [pc, #100]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005db8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dba:	f7fb fcc5 	bl	8001748 <HAL_GetTick>
 8005dbe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x6f4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc2:	f7fb fcc1 	bl	8001748 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x6f4>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e066      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005dd4:	4b10      	ldr	r3, [pc, #64]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0f0      	beq.n	8005dc2 <HAL_RCC_OscConfig+0x6e2>
 8005de0:	e05e      	b.n	8005ea0 <HAL_RCC_OscConfig+0x7c0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005de2:	4b0d      	ldr	r3, [pc, #52]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a0c      	ldr	r2, [pc, #48]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005de8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dee:	f7fb fcab 	bl	8001748 <HAL_GetTick>
 8005df2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005df4:	e008      	b.n	8005e08 <HAL_RCC_OscConfig+0x728>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df6:	f7fb fca7 	bl	8001748 <HAL_GetTick>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d901      	bls.n	8005e08 <HAL_RCC_OscConfig+0x728>
          {
            return HAL_TIMEOUT;
 8005e04:	2303      	movs	r3, #3
 8005e06:	e04c      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e08:	4b03      	ldr	r3, [pc, #12]	; (8005e18 <HAL_RCC_OscConfig+0x738>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f0      	bne.n	8005df6 <HAL_RCC_OscConfig+0x716>
 8005e14:	e044      	b.n	8005ea0 <HAL_RCC_OscConfig+0x7c0>
 8005e16:	bf00      	nop
 8005e18:	58024400 	.word	0x58024400
 8005e1c:	fffffc0c 	.word	0xfffffc0c
 8005e20:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005e24:	4b21      	ldr	r3, [pc, #132]	; (8005eac <HAL_RCC_OscConfig+0x7cc>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e2a:	4b20      	ldr	r3, [pc, #128]	; (8005eac <HAL_RCC_OscConfig+0x7cc>)
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d031      	beq.n	8005e9c <HAL_RCC_OscConfig+0x7bc>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f003 0203 	and.w	r2, r3, #3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d12a      	bne.n	8005e9c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	091b      	lsrs	r3, r3, #4
 8005e4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d122      	bne.n	8005e9c <HAL_RCC_OscConfig+0x7bc>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d11a      	bne.n	8005e9c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	0a5b      	lsrs	r3, r3, #9
 8005e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e72:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d111      	bne.n	8005e9c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	0c1b      	lsrs	r3, r3, #16
 8005e7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d108      	bne.n	8005e9c <HAL_RCC_OscConfig+0x7bc>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	0e1b      	lsrs	r3, r3, #24
 8005e8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e96:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d001      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x7c0>
      {
        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e000      	b.n	8005ea2 <HAL_RCC_OscConfig+0x7c2>
      }
    }
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3730      	adds	r7, #48	; 0x30
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	58024400 	.word	0x58024400

08005eb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e19c      	b.n	80061fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec4:	4b8a      	ldr	r3, [pc, #552]	; (80060f0 <HAL_RCC_ClockConfig+0x240>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d910      	bls.n	8005ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ed2:	4b87      	ldr	r3, [pc, #540]	; (80060f0 <HAL_RCC_ClockConfig+0x240>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f023 020f 	bic.w	r2, r3, #15
 8005eda:	4985      	ldr	r1, [pc, #532]	; (80060f0 <HAL_RCC_ClockConfig+0x240>)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee2:	4b83      	ldr	r3, [pc, #524]	; (80060f0 <HAL_RCC_ClockConfig+0x240>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	683a      	ldr	r2, [r7, #0]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d001      	beq.n	8005ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e184      	b.n	80061fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d010      	beq.n	8005f22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	691a      	ldr	r2, [r3, #16]
 8005f04:	4b7b      	ldr	r3, [pc, #492]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d908      	bls.n	8005f22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f10:	4b78      	ldr	r3, [pc, #480]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	4975      	ldr	r1, [pc, #468]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d010      	beq.n	8005f50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695a      	ldr	r2, [r3, #20]
 8005f32:	4b70      	ldr	r3, [pc, #448]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d908      	bls.n	8005f50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005f3e:	4b6d      	ldr	r3, [pc, #436]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	496a      	ldr	r1, [pc, #424]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	61cb      	str	r3, [r1, #28]
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d010      	beq.n	8005f7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
     if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	699a      	ldr	r2, [r3, #24]
 8005f60:	4b64      	ldr	r3, [pc, #400]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d908      	bls.n	8005f7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005f6c:	4b61      	ldr	r3, [pc, #388]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	495e      	ldr	r1, [pc, #376]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0320 	and.w	r3, r3, #32
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d010      	beq.n	8005fac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
    }
#else
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	69da      	ldr	r2, [r3, #28]
 8005f8e:	4b59      	ldr	r3, [pc, #356]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d908      	bls.n	8005fac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005f9a:	4b56      	ldr	r3, [pc, #344]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	4953      	ldr	r1, [pc, #332]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d010      	beq.n	8005fda <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
        if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	4b4d      	ldr	r3, [pc, #308]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	f003 030f 	and.w	r3, r3, #15
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d908      	bls.n	8005fda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fc8:	4b4a      	ldr	r3, [pc, #296]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	f023 020f 	bic.w	r2, r3, #15
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	4947      	ldr	r1, [pc, #284]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d055      	beq.n	8006092 <HAL_RCC_ClockConfig+0x1e2>
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005fe6:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	4940      	ldr	r1, [pc, #256]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	618b      	str	r3, [r1, #24]
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d107      	bne.n	8006010 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006000:	4b3c      	ldr	r3, [pc, #240]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d121      	bne.n	8006050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0f6      	b.n	80061fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d107      	bne.n	8006028 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006018:	4b36      	ldr	r3, [pc, #216]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d115      	bne.n	8006050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e0ea      	b.n	80061fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d107      	bne.n	8006040 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006030:	4b30      	ldr	r3, [pc, #192]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006038:	2b00      	cmp	r3, #0
 800603a:	d109      	bne.n	8006050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e0de      	b.n	80061fe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006040:	4b2c      	ldr	r3, [pc, #176]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0304 	and.w	r3, r3, #4
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e0d6      	b.n	80061fe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006050:	4b28      	ldr	r3, [pc, #160]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	f023 0207 	bic.w	r2, r3, #7
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	4925      	ldr	r1, [pc, #148]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 800605e:	4313      	orrs	r3, r2
 8006060:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006062:	f7fb fb71 	bl	8001748 <HAL_GetTick>
 8006066:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006068:	e00a      	b.n	8006080 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800606a:	f7fb fb6d 	bl	8001748 <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	f241 3288 	movw	r2, #5000	; 0x1388
 8006078:	4293      	cmp	r3, r2
 800607a:	d901      	bls.n	8006080 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800607c:	2303      	movs	r3, #3
 800607e:	e0be      	b.n	80061fe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006080:	4b1c      	ldr	r3, [pc, #112]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	429a      	cmp	r2, r3
 8006090:	d1eb      	bne.n	800606a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d010      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	4b14      	ldr	r3, [pc, #80]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d208      	bcs.n	80060c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060ae:	4b11      	ldr	r3, [pc, #68]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	f023 020f 	bic.w	r2, r3, #15
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	490e      	ldr	r1, [pc, #56]	; (80060f4 <HAL_RCC_ClockConfig+0x244>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060c0:	4b0b      	ldr	r3, [pc, #44]	; (80060f0 <HAL_RCC_ClockConfig+0x240>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d214      	bcs.n	80060f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ce:	4b08      	ldr	r3, [pc, #32]	; (80060f0 <HAL_RCC_ClockConfig+0x240>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f023 020f 	bic.w	r2, r3, #15
 80060d6:	4906      	ldr	r1, [pc, #24]	; (80060f0 <HAL_RCC_ClockConfig+0x240>)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	4313      	orrs	r3, r2
 80060dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060de:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <HAL_RCC_ClockConfig+0x240>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d005      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e086      	b.n	80061fe <HAL_RCC_ClockConfig+0x34e>
 80060f0:	52002000 	.word	0x52002000
 80060f4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d010      	beq.n	8006126 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
   }
#else
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691a      	ldr	r2, [r3, #16]
 8006108:	4b3f      	ldr	r3, [pc, #252]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006110:	429a      	cmp	r2, r3
 8006112:	d208      	bcs.n	8006126 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006114:	4b3c      	ldr	r3, [pc, #240]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	4939      	ldr	r1, [pc, #228]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 8006122:	4313      	orrs	r3, r2
 8006124:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0308 	and.w	r3, r3, #8
 800612e:	2b00      	cmp	r3, #0
 8006130:	d010      	beq.n	8006154 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	695a      	ldr	r2, [r3, #20]
 8006136:	4b34      	ldr	r3, [pc, #208]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800613e:	429a      	cmp	r2, r3
 8006140:	d208      	bcs.n	8006154 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006142:	4b31      	ldr	r3, [pc, #196]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	492e      	ldr	r1, [pc, #184]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 8006150:	4313      	orrs	r3, r2
 8006152:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	d010      	beq.n	8006182 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
   }
#else
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	699a      	ldr	r2, [r3, #24]
 8006164:	4b28      	ldr	r3, [pc, #160]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800616c:	429a      	cmp	r2, r3
 800616e:	d208      	bcs.n	8006182 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006170:	4b25      	ldr	r3, [pc, #148]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	4922      	ldr	r1, [pc, #136]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 800617e:	4313      	orrs	r3, r2
 8006180:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d010      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
   }
#else
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69da      	ldr	r2, [r3, #28]
 8006192:	4b1d      	ldr	r3, [pc, #116]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800619a:	429a      	cmp	r2, r3
 800619c:	d208      	bcs.n	80061b0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800619e:	4b1a      	ldr	r3, [pc, #104]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	4917      	ldr	r1, [pc, #92]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80061b0:	f000 f834 	bl	800621c <HAL_RCC_GetSysClockFreq>
 80061b4:	4602      	mov	r2, r0
 80061b6:	4b14      	ldr	r3, [pc, #80]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	0a1b      	lsrs	r3, r3, #8
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	4912      	ldr	r1, [pc, #72]	; (800620c <HAL_RCC_ClockConfig+0x35c>)
 80061c2:	5ccb      	ldrb	r3, [r1, r3]
 80061c4:	f003 031f 	and.w	r3, r3, #31
 80061c8:	fa22 f303 	lsr.w	r3, r2, r3
 80061cc:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80061ce:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <HAL_RCC_ClockConfig+0x358>)
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	4a0d      	ldr	r2, [pc, #52]	; (800620c <HAL_RCC_ClockConfig+0x35c>)
 80061d8:	5cd3      	ldrb	r3, [r2, r3]
 80061da:	f003 031f 	and.w	r3, r3, #31
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	fa22 f303 	lsr.w	r3, r2, r3
 80061e4:	4a0a      	ldr	r2, [pc, #40]	; (8006210 <HAL_RCC_ClockConfig+0x360>)
 80061e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80061e8:	4a0a      	ldr	r2, [pc, #40]	; (8006214 <HAL_RCC_ClockConfig+0x364>)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80061ee:	4b0a      	ldr	r3, [pc, #40]	; (8006218 <HAL_RCC_ClockConfig+0x368>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fb fa5e 	bl	80016b4 <HAL_InitTick>
 80061f8:	4603      	mov	r3, r0
 80061fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80061fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3718      	adds	r7, #24
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	58024400 	.word	0x58024400
 800620c:	0800a500 	.word	0x0800a500
 8006210:	24000004 	.word	0x24000004
 8006214:	24000000 	.word	0x24000000
 8006218:	24000008 	.word	0x24000008

0800621c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800621c:	b480      	push	{r7}
 800621e:	b089      	sub	sp, #36	; 0x24
 8006220:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006222:	4bb3      	ldr	r3, [pc, #716]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800622a:	2b18      	cmp	r3, #24
 800622c:	f200 8155 	bhi.w	80064da <HAL_RCC_GetSysClockFreq+0x2be>
 8006230:	a201      	add	r2, pc, #4	; (adr r2, 8006238 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006236:	bf00      	nop
 8006238:	0800629d 	.word	0x0800629d
 800623c:	080064db 	.word	0x080064db
 8006240:	080064db 	.word	0x080064db
 8006244:	080064db 	.word	0x080064db
 8006248:	080064db 	.word	0x080064db
 800624c:	080064db 	.word	0x080064db
 8006250:	080064db 	.word	0x080064db
 8006254:	080064db 	.word	0x080064db
 8006258:	080062c3 	.word	0x080062c3
 800625c:	080064db 	.word	0x080064db
 8006260:	080064db 	.word	0x080064db
 8006264:	080064db 	.word	0x080064db
 8006268:	080064db 	.word	0x080064db
 800626c:	080064db 	.word	0x080064db
 8006270:	080064db 	.word	0x080064db
 8006274:	080064db 	.word	0x080064db
 8006278:	080062c9 	.word	0x080062c9
 800627c:	080064db 	.word	0x080064db
 8006280:	080064db 	.word	0x080064db
 8006284:	080064db 	.word	0x080064db
 8006288:	080064db 	.word	0x080064db
 800628c:	080064db 	.word	0x080064db
 8006290:	080064db 	.word	0x080064db
 8006294:	080064db 	.word	0x080064db
 8006298:	080062cf 	.word	0x080062cf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800629c:	4b94      	ldr	r3, [pc, #592]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0320 	and.w	r3, r3, #32
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062a8:	4b91      	ldr	r3, [pc, #580]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	08db      	lsrs	r3, r3, #3
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	4a90      	ldr	r2, [pc, #576]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062b4:	fa22 f303 	lsr.w	r3, r2, r3
 80062b8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80062ba:	e111      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80062bc:	4b8d      	ldr	r3, [pc, #564]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062be:	61bb      	str	r3, [r7, #24]
    break;
 80062c0:	e10e      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80062c2:	4b8d      	ldr	r3, [pc, #564]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80062c4:	61bb      	str	r3, [r7, #24]
    break;
 80062c6:	e10b      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80062c8:	4b8c      	ldr	r3, [pc, #560]	; (80064fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80062ca:	61bb      	str	r3, [r7, #24]
    break;
 80062cc:	e108      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80062ce:	4b88      	ldr	r3, [pc, #544]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80062d8:	4b85      	ldr	r3, [pc, #532]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062dc:	091b      	lsrs	r3, r3, #4
 80062de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062e2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80062e4:	4b82      	ldr	r3, [pc, #520]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	f003 0301 	and.w	r3, r3, #1
 80062ec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80062ee:	4b80      	ldr	r3, [pc, #512]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	08db      	lsrs	r3, r3, #3
 80062f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	fb02 f303 	mul.w	r3, r2, r3
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 80e1 	beq.w	80064d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2b02      	cmp	r3, #2
 8006316:	f000 8083 	beq.w	8006420 <HAL_RCC_GetSysClockFreq+0x204>
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b02      	cmp	r3, #2
 800631e:	f200 80a1 	bhi.w	8006464 <HAL_RCC_GetSysClockFreq+0x248>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d003      	beq.n	8006330 <HAL_RCC_GetSysClockFreq+0x114>
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d056      	beq.n	80063dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800632e:	e099      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006330:	4b6f      	ldr	r3, [pc, #444]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b00      	cmp	r3, #0
 800633a:	d02d      	beq.n	8006398 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800633c:	4b6c      	ldr	r3, [pc, #432]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	08db      	lsrs	r3, r3, #3
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	4a6b      	ldr	r2, [pc, #428]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
 800634c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	ee07 3a90 	vmov	s15, r3
 8006354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006362:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006366:	4b62      	ldr	r3, [pc, #392]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006376:	ed97 6a02 	vldr	s12, [r7, #8]
 800637a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800637e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006382:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006386:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800638a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006392:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006396:	e087      	b.n	80064a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	ee07 3a90 	vmov	s15, r3
 800639e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006504 <HAL_RCC_GetSysClockFreq+0x2e8>
 80063a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063aa:	4b51      	ldr	r3, [pc, #324]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80063be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006500 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063da:	e065      	b.n	80064a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006508 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ee:	4b40      	ldr	r3, [pc, #256]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006402:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006500 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006406:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800640a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006412:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006416:	ee67 7a27 	vmul.f32	s15, s14, s15
 800641a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800641e:	e043      	b.n	80064a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	ee07 3a90 	vmov	s15, r3
 8006426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800650c <HAL_RCC_GetSysClockFreq+0x2f0>
 800642e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006432:	4b2f      	ldr	r3, [pc, #188]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800643a:	ee07 3a90 	vmov	s15, r3
 800643e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006442:	ed97 6a02 	vldr	s12, [r7, #8]
 8006446:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800644a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006452:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006456:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800645a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006462:	e021      	b.n	80064a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006508 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006476:	4b1e      	ldr	r3, [pc, #120]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006486:	ed97 6a02 	vldr	s12, [r7, #8]
 800648a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006500 <HAL_RCC_GetSysClockFreq+0x2e4>
 800648e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800649a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80064a8:	4b11      	ldr	r3, [pc, #68]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	0a5b      	lsrs	r3, r3, #9
 80064ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064b2:	3301      	adds	r3, #1
 80064b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	ee07 3a90 	vmov	s15, r3
 80064bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064cc:	ee17 3a90 	vmov	r3, s15
 80064d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80064d2:	e005      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
    break;
 80064d8:	e002      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80064da:	4b07      	ldr	r3, [pc, #28]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064dc:	61bb      	str	r3, [r7, #24]
    break;
 80064de:	bf00      	nop
  }

  return sysclockfreq;
 80064e0:	69bb      	ldr	r3, [r7, #24]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3724      	adds	r7, #36	; 0x24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	58024400 	.word	0x58024400
 80064f4:	03d09000 	.word	0x03d09000
 80064f8:	003d0900 	.word	0x003d0900
 80064fc:	007a1200 	.word	0x007a1200
 8006500:	46000000 	.word	0x46000000
 8006504:	4c742400 	.word	0x4c742400
 8006508:	4a742400 	.word	0x4a742400
 800650c:	4af42400 	.word	0x4af42400

08006510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8006516:	f7ff fe81 	bl	800621c <HAL_RCC_GetSysClockFreq>
 800651a:	4602      	mov	r2, r0
 800651c:	4b10      	ldr	r3, [pc, #64]	; (8006560 <HAL_RCC_GetHCLKFreq+0x50>)
 800651e:	699b      	ldr	r3, [r3, #24]
 8006520:	0a1b      	lsrs	r3, r3, #8
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	490f      	ldr	r1, [pc, #60]	; (8006564 <HAL_RCC_GetHCLKFreq+0x54>)
 8006528:	5ccb      	ldrb	r3, [r1, r3]
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	fa22 f303 	lsr.w	r3, r2, r3
 8006532:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8006534:	4b0a      	ldr	r3, [pc, #40]	; (8006560 <HAL_RCC_GetHCLKFreq+0x50>)
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f003 030f 	and.w	r3, r3, #15
 800653c:	4a09      	ldr	r2, [pc, #36]	; (8006564 <HAL_RCC_GetHCLKFreq+0x54>)
 800653e:	5cd3      	ldrb	r3, [r2, r3]
 8006540:	f003 031f 	and.w	r3, r3, #31
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	fa22 f303 	lsr.w	r3, r2, r3
 800654a:	4a07      	ldr	r2, [pc, #28]	; (8006568 <HAL_RCC_GetHCLKFreq+0x58>)
 800654c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800654e:	4a07      	ldr	r2, [pc, #28]	; (800656c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006554:	4b04      	ldr	r3, [pc, #16]	; (8006568 <HAL_RCC_GetHCLKFreq+0x58>)
 8006556:	681b      	ldr	r3, [r3, #0]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	58024400 	.word	0x58024400
 8006564:	0800a500 	.word	0x0800a500
 8006568:	24000004 	.word	0x24000004
 800656c:	24000000 	.word	0x24000000

08006570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8006574:	f7ff ffcc 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b06      	ldr	r3, [pc, #24]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x24>)
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	091b      	lsrs	r3, r3, #4
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	4904      	ldr	r1, [pc, #16]	; (8006598 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006586:	5ccb      	ldrb	r3, [r1, r3]
 8006588:	f003 031f 	and.w	r3, r3, #31
 800658c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8006590:	4618      	mov	r0, r3
 8006592:	bd80      	pop	{r7, pc}
 8006594:	58024400 	.word	0x58024400
 8006598:	0800a500 	.word	0x0800a500

0800659c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 80065a0:	f7ff ffb6 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 80065a4:	4602      	mov	r2, r0
 80065a6:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	0a1b      	lsrs	r3, r3, #8
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	4904      	ldr	r1, [pc, #16]	; (80065c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065b2:	5ccb      	ldrb	r3, [r1, r3]
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80065bc:	4618      	mov	r0, r3
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	58024400 	.word	0x58024400
 80065c4:	0800a500 	.word	0x0800a500

080065c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065d0:	2300      	movs	r3, #0
 80065d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065d4:	2300      	movs	r3, #0
 80065d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d03f      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065ec:	d02a      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80065ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80065f2:	d824      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80065f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065f8:	d018      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065fe:	d81e      	bhi.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d003      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006604:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006608:	d007      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800660a:	e018      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800660c:	4ba6      	ldr	r3, [pc, #664]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	4aa5      	ldr	r2, [pc, #660]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006616:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006618:	e015      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3304      	adds	r3, #4
 800661e:	2102      	movs	r1, #2
 8006620:	4618      	mov	r0, r3
 8006622:	f001 ff17 	bl	8008454 <RCCEx_PLL2_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800662a:	e00c      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3324      	adds	r3, #36	; 0x24
 8006630:	2102      	movs	r1, #2
 8006632:	4618      	mov	r0, r3
 8006634:	f001 ffc0 	bl	80085b8 <RCCEx_PLL3_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800663c:	e003      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	75fb      	strb	r3, [r7, #23]
      break;
 8006642:	e000      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006644:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d109      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800664c:	4b96      	ldr	r3, [pc, #600]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800664e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006658:	4993      	ldr	r1, [pc, #588]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800665a:	4313      	orrs	r3, r2
 800665c:	650b      	str	r3, [r1, #80]	; 0x50
 800665e:	e001      	b.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006660:	7dfb      	ldrb	r3, [r7, #23]
 8006662:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666c:	2b00      	cmp	r3, #0
 800666e:	d03d      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006674:	2b04      	cmp	r3, #4
 8006676:	d826      	bhi.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006678:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	08006695 	.word	0x08006695
 8006684:	080066a3 	.word	0x080066a3
 8006688:	080066b5 	.word	0x080066b5
 800668c:	080066cd 	.word	0x080066cd
 8006690:	080066cd 	.word	0x080066cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006694:	4b84      	ldr	r3, [pc, #528]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	4a83      	ldr	r2, [pc, #524]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800669a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066a0:	e015      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	3304      	adds	r3, #4
 80066a6:	2100      	movs	r1, #0
 80066a8:	4618      	mov	r0, r3
 80066aa:	f001 fed3 	bl	8008454 <RCCEx_PLL2_Config>
 80066ae:	4603      	mov	r3, r0
 80066b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066b2:	e00c      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3324      	adds	r3, #36	; 0x24
 80066b8:	2100      	movs	r1, #0
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 ff7c 	bl	80085b8 <RCCEx_PLL3_Config>
 80066c0:	4603      	mov	r3, r0
 80066c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80066c4:	e003      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	75fb      	strb	r3, [r7, #23]
      break;
 80066ca:	e000      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80066cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d109      	bne.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066d4:	4b74      	ldr	r3, [pc, #464]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80066d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d8:	f023 0207 	bic.w	r2, r3, #7
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e0:	4971      	ldr	r1, [pc, #452]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	650b      	str	r3, [r1, #80]	; 0x50
 80066e6:	e001      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e8:	7dfb      	ldrb	r3, [r7, #23]
 80066ea:	75bb      	strb	r3, [r7, #22]

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d04a      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    switch(PeriphClkInit->Sai2AClockSelection)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066fc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006700:	d031      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006702:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006706:	d82b      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800670c:	d02d      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800670e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006712:	d825      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006714:	2bc0      	cmp	r3, #192	; 0xc0
 8006716:	d02a      	beq.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006718:	2bc0      	cmp	r3, #192	; 0xc0
 800671a:	d821      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800671c:	2b80      	cmp	r3, #128	; 0x80
 800671e:	d016      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006720:	2b80      	cmp	r3, #128	; 0x80
 8006722:	d81d      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006728:	2b40      	cmp	r3, #64	; 0x40
 800672a:	d007      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x174>
 800672c:	e018      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
    case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
      /* Enable SAI2A Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800672e:	4b5e      	ldr	r3, [pc, #376]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006732:	4a5d      	ldr	r2, [pc, #372]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006738:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800673a:	e019      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	2100      	movs	r1, #0
 8006742:	4618      	mov	r0, r3
 8006744:	f001 fe86 	bl	8008454 <RCCEx_PLL2_Config>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800674c:	e010      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>

    case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	3324      	adds	r3, #36	; 0x24
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f001 ff2f 	bl	80085b8 <RCCEx_PLL3_Config>
 800675a:	4603      	mov	r3, r0
 800675c:	75fb      	strb	r3, [r7, #23]

      /* SAI2A clock source configuration done later after clock selection check */
      break;
 800675e:	e007      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      /* SPDIF clock is used as source of SAI2A clock */
      /* SAI2A clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
      break;
 8006764:	e004      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 8006766:	bf00      	nop
 8006768:	e002      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800676a:	bf00      	nop
 800676c:	e000      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      break;
 800676e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d109      	bne.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8006776:	4b4c      	ldr	r3, [pc, #304]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800677a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006782:	4949      	ldr	r1, [pc, #292]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006784:	4313      	orrs	r3, r2
 8006786:	650b      	str	r3, [r1, #80]	; 0x50
 8006788:	e001      	b.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800678a:	7dfb      	ldrb	r3, [r7, #23]
 800678c:	75bb      	strb	r3, [r7, #22]
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006796:	2b00      	cmp	r3, #0
 8006798:	d04f      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    switch(PeriphClkInit->Sai2BClockSelection)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80067a2:	d036      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x24a>
 80067a4:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80067a8:	d830      	bhi.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80067aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ae:	d032      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x24e>
 80067b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b4:	d82a      	bhi.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80067b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067ba:	d02e      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0x252>
 80067bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80067c0:	d824      	bhi.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80067c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c6:	d018      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x232>
 80067c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067cc:	d81e      	bhi.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x244>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x212>
 80067d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067d6:	d007      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x220>
 80067d8:	e018      	b.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x244>
    {
    case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067da:	4b33      	ldr	r3, [pc, #204]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80067dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067de:	4a32      	ldr	r2, [pc, #200]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80067e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80067e6:	e019      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3304      	adds	r3, #4
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f001 fe30 	bl	8008454 <RCCEx_PLL2_Config>
 80067f4:	4603      	mov	r3, r0
 80067f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 80067f8:	e010      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x254>

    case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3324      	adds	r3, #36	; 0x24
 80067fe:	2100      	movs	r1, #0
 8006800:	4618      	mov	r0, r3
 8006802:	f001 fed9 	bl	80085b8 <RCCEx_PLL3_Config>
 8006806:	4603      	mov	r3, r0
 8006808:	75fb      	strb	r3, [r7, #23]

      /* SAI2B clock source configuration done later after clock selection check */
      break;
 800680a:	e007      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x254>
      /* SPDIF clock is used as source of SAI2B clock */
      /* SAI2B clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	75fb      	strb	r3, [r7, #23]
      break;
 8006810:	e004      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006812:	bf00      	nop
 8006814:	e002      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x254>
      break;
 800681a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800681c:	7dfb      	ldrb	r3, [r7, #23]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d109      	bne.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x26e>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8006822:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006826:	f423 6260 	bic.w	r2, r3, #3584	; 0xe00
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682e:	491e      	ldr	r1, [pc, #120]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006830:	4313      	orrs	r3, r2
 8006832:	650b      	str	r3, [r1, #80]	; 0x50
 8006834:	e001      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x272>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d034      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800684a:	2b30      	cmp	r3, #48	; 0x30
 800684c:	d01c      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
 800684e:	2b30      	cmp	r3, #48	; 0x30
 8006850:	d817      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8006852:	2b20      	cmp	r3, #32
 8006854:	d00c      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006856:	2b20      	cmp	r3, #32
 8006858:	d813      	bhi.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
 800685e:	2b10      	cmp	r3, #16
 8006860:	d10f      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006862:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006866:	4a10      	ldr	r2, [pc, #64]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800686c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800686e:	e00e      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2c6>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3304      	adds	r3, #4
 8006874:	2102      	movs	r1, #2
 8006876:	4618      	mov	r0, r3
 8006878:	f001 fdec 	bl	8008454 <RCCEx_PLL2_Config>
 800687c:	4603      	mov	r3, r0
 800687e:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006880:	e005      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	75fb      	strb	r3, [r7, #23]
      break;
 8006886:	e002      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 8006888:	bf00      	nop
 800688a:	e000      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      break;
 800688c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800688e:	7dfb      	ldrb	r3, [r7, #23]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006894:	4b04      	ldr	r3, [pc, #16]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006898:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a0:	4901      	ldr	r1, [pc, #4]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068a6:	e003      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80068a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d047      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068c4:	d030      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80068c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ca:	d82a      	bhi.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80068cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068d0:	d02c      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x364>
 80068d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068d6:	d824      	bhi.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80068d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068dc:	d018      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80068de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068e2:	d81e      	bhi.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 80068e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ec:	d007      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x336>
 80068ee:	e018      	b.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f0:	4bb0      	ldr	r3, [pc, #704]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80068f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f4:	4aaf      	ldr	r2, [pc, #700]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80068f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80068fc:	e017      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	3304      	adds	r3, #4
 8006902:	2100      	movs	r1, #0
 8006904:	4618      	mov	r0, r3
 8006906:	f001 fda5 	bl	8008454 <RCCEx_PLL2_Config>
 800690a:	4603      	mov	r3, r0
 800690c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800690e:	e00e      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x366>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	3324      	adds	r3, #36	; 0x24
 8006914:	2100      	movs	r1, #0
 8006916:	4618      	mov	r0, r3
 8006918:	f001 fe4e 	bl	80085b8 <RCCEx_PLL3_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006920:	e005      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x366>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	75fb      	strb	r3, [r7, #23]
      break;
 8006926:	e002      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 8006928:	bf00      	nop
 800692a:	e000      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x366>
      break;
 800692c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800692e:	7dfb      	ldrb	r3, [r7, #23]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d109      	bne.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006934:	4b9f      	ldr	r3, [pc, #636]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006938:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006940:	499c      	ldr	r1, [pc, #624]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006942:	4313      	orrs	r3, r2
 8006944:	650b      	str	r3, [r1, #80]	; 0x50
 8006946:	e001      	b.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x384>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006948:	7dfb      	ldrb	r3, [r7, #23]
 800694a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d049      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x424>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800695c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006960:	d02e      	beq.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006966:	d828      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006968:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800696c:	d02a      	beq.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800696e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006972:	d822      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006974:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006978:	d026      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800697a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800697e:	d81c      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8006980:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006984:	d010      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800698a:	d816      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01d      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006994:	d111      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x3f2>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	3304      	adds	r3, #4
 800699a:	2101      	movs	r1, #1
 800699c:	4618      	mov	r0, r3
 800699e:	f001 fd59 	bl	8008454 <RCCEx_PLL2_Config>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069a6:	e012      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x406>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3324      	adds	r3, #36	; 0x24
 80069ac:	2101      	movs	r1, #1
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 fe02 	bl	80085b8 <RCCEx_PLL3_Config>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069b8:	e009      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	75fb      	strb	r3, [r7, #23]
      break;
 80069be:	e006      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80069c0:	bf00      	nop
 80069c2:	e004      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80069c4:	bf00      	nop
 80069c6:	e002      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80069c8:	bf00      	nop
 80069ca:	e000      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x406>
      break;
 80069cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d109      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069d4:	4b77      	ldr	r3, [pc, #476]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069e0:	4974      	ldr	r1, [pc, #464]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	650b      	str	r3, [r1, #80]	; 0x50
 80069e6:	e001      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x424>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d053      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069fe:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006a02:	d034      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006a04:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006a08:	d82e      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a0e:	d030      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
 8006a10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a14:	d828      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a1a:	d02c      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a20:	d822      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006a22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a26:	d028      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006a28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a2c:	d81c      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a32:	d010      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8006a34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a38:	d816      	bhi.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01f      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a42:	d111      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3304      	adds	r3, #4
 8006a48:	2101      	movs	r1, #1
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f001 fd02 	bl	8008454 <RCCEx_PLL2_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a54:	e014      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3324      	adds	r3, #36	; 0x24
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 fdab 	bl	80085b8 <RCCEx_PLL3_Config>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a66:	e00b      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6c:	e008      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006a6e:	bf00      	nop
 8006a70:	e006      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006a72:	bf00      	nop
 8006a74:	e004      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006a76:	bf00      	nop
 8006a78:	e002      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006a7a:	bf00      	nop
 8006a7c:	e000      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
      break;
 8006a7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a80:	7dfb      	ldrb	r3, [r7, #23]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10a      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a86:	4b4b      	ldr	r3, [pc, #300]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a8a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a94:	4947      	ldr	r1, [pc, #284]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	658b      	str	r3, [r1, #88]	; 0x58
 8006a9a:	e001      	b.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a9c:	7dfb      	ldrb	r3, [r7, #23]
 8006a9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d02f      	beq.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x544>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab4:	d00e      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006ab6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aba:	d814      	bhi.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d015      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006ac0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ac4:	d10f      	bne.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac6:	4b3b      	ldr	r3, [pc, #236]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	4a3a      	ldr	r2, [pc, #232]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ad2:	e00c      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x526>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 fcba 	bl	8008454 <RCCEx_PLL2_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ae4:	e003      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x526>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8006aea:	e000      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x526>
      break;
 8006aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d109      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x540>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006af4:	4b2f      	ldr	r3, [pc, #188]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b00:	492c      	ldr	r1, [pc, #176]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	650b      	str	r3, [r1, #80]	; 0x50
 8006b06:	e001      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x544>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
 8006b0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d032      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d81b      	bhi.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x590>
 8006b20:	a201      	add	r2, pc, #4	; (adr r2, 8006b28 <HAL_RCCEx_PeriphCLKConfig+0x560>)
 8006b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b26:	bf00      	nop
 8006b28:	08006b5f 	.word	0x08006b5f
 8006b2c:	08006b39 	.word	0x08006b39
 8006b30:	08006b47 	.word	0x08006b47
 8006b34:	08006b5f 	.word	0x08006b5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b38:	4b1e      	ldr	r3, [pc, #120]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3c:	4a1d      	ldr	r2, [pc, #116]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b44:	e00c      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x598>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3304      	adds	r3, #4
 8006b4a:	2102      	movs	r1, #2
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f001 fc81 	bl	8008454 <RCCEx_PLL2_Config>
 8006b52:	4603      	mov	r3, r0
 8006b54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b56:	e003      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x598>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5c:	e000      	b.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x598>
      break;
 8006b5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <HAL_RCCEx_PeriphCLKConfig+0x5b2>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b66:	4b13      	ldr	r3, [pc, #76]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b6a:	f023 0203 	bic.w	r2, r3, #3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	4910      	ldr	r1, [pc, #64]	; (8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8006b74:	4313      	orrs	r3, r2
 8006b76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b78:	e001      	b.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b7a:	7dfb      	ldrb	r3, [r7, #23]
 8006b7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f000 808a 	beq.w	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b98:	f7fa fdd6 	bl	8001748 <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b9e:	e00d      	b.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ba0:	f7fa fdd2 	bl	8001748 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b64      	cmp	r3, #100	; 0x64
 8006bac:	d906      	bls.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	75fb      	strb	r3, [r7, #23]
        break;
 8006bb2:	e009      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x600>
 8006bb4:	58024400 	.word	0x58024400
 8006bb8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bbc:	4bba      	ldr	r3, [pc, #744]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0eb      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
      }
    }

    if(ret == HAL_OK)
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d166      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006bce:	4bb7      	ldr	r3, [pc, #732]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006bd0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bd8:	4053      	eors	r3, r2
 8006bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d013      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006be2:	4bb2      	ldr	r3, [pc, #712]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bec:	4baf      	ldr	r3, [pc, #700]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	4aae      	ldr	r2, [pc, #696]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bf8:	4bac      	ldr	r3, [pc, #688]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bfc:	4aab      	ldr	r2, [pc, #684]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c02:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006c04:	4aa9      	ldr	r2, [pc, #676]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c14:	d115      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c16:	f7fa fd97 	bl	8001748 <HAL_GetTick>
 8006c1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c1c:	e00b      	b.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c1e:	f7fa fd93 	bl	8001748 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d902      	bls.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	75fb      	strb	r3, [r7, #23]
            break;
 8006c34:	e005      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c36:	4b9d      	ldr	r3, [pc, #628]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d0ed      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d126      	bne.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c56:	d10d      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8006c58:	4b94      	ldr	r3, [pc, #592]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c66:	0919      	lsrs	r1, r3, #4
 8006c68:	4b91      	ldr	r3, [pc, #580]	; (8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006c6a:	400b      	ands	r3, r1
 8006c6c:	498f      	ldr	r1, [pc, #572]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	610b      	str	r3, [r1, #16]
 8006c72:	e005      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8006c74:	4b8d      	ldr	r3, [pc, #564]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	4a8c      	ldr	r2, [pc, #560]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c7e:	6113      	str	r3, [r2, #16]
 8006c80:	4b8a      	ldr	r3, [pc, #552]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c8e:	4987      	ldr	r1, [pc, #540]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006c90:	4313      	orrs	r3, r2
 8006c92:	670b      	str	r3, [r1, #112]	; 0x70
 8006c94:	e004      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	75bb      	strb	r3, [r7, #22]
 8006c9a:	e001      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0301 	and.w	r3, r3, #1
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d07f      	beq.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x7e4>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cb2:	2b28      	cmp	r3, #40	; 0x28
 8006cb4:	d866      	bhi.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006d8b 	.word	0x08006d8b
 8006cc0:	08006d85 	.word	0x08006d85
 8006cc4:	08006d85 	.word	0x08006d85
 8006cc8:	08006d85 	.word	0x08006d85
 8006ccc:	08006d85 	.word	0x08006d85
 8006cd0:	08006d85 	.word	0x08006d85
 8006cd4:	08006d85 	.word	0x08006d85
 8006cd8:	08006d85 	.word	0x08006d85
 8006cdc:	08006d61 	.word	0x08006d61
 8006ce0:	08006d85 	.word	0x08006d85
 8006ce4:	08006d85 	.word	0x08006d85
 8006ce8:	08006d85 	.word	0x08006d85
 8006cec:	08006d85 	.word	0x08006d85
 8006cf0:	08006d85 	.word	0x08006d85
 8006cf4:	08006d85 	.word	0x08006d85
 8006cf8:	08006d85 	.word	0x08006d85
 8006cfc:	08006d73 	.word	0x08006d73
 8006d00:	08006d85 	.word	0x08006d85
 8006d04:	08006d85 	.word	0x08006d85
 8006d08:	08006d85 	.word	0x08006d85
 8006d0c:	08006d85 	.word	0x08006d85
 8006d10:	08006d85 	.word	0x08006d85
 8006d14:	08006d85 	.word	0x08006d85
 8006d18:	08006d85 	.word	0x08006d85
 8006d1c:	08006d8b 	.word	0x08006d8b
 8006d20:	08006d85 	.word	0x08006d85
 8006d24:	08006d85 	.word	0x08006d85
 8006d28:	08006d85 	.word	0x08006d85
 8006d2c:	08006d85 	.word	0x08006d85
 8006d30:	08006d85 	.word	0x08006d85
 8006d34:	08006d85 	.word	0x08006d85
 8006d38:	08006d85 	.word	0x08006d85
 8006d3c:	08006d8b 	.word	0x08006d8b
 8006d40:	08006d85 	.word	0x08006d85
 8006d44:	08006d85 	.word	0x08006d85
 8006d48:	08006d85 	.word	0x08006d85
 8006d4c:	08006d85 	.word	0x08006d85
 8006d50:	08006d85 	.word	0x08006d85
 8006d54:	08006d85 	.word	0x08006d85
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	08006d8b 	.word	0x08006d8b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3304      	adds	r3, #4
 8006d64:	2101      	movs	r1, #1
 8006d66:	4618      	mov	r0, r3
 8006d68:	f001 fb74 	bl	8008454 <RCCEx_PLL2_Config>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d70:	e00c      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3324      	adds	r3, #36	; 0x24
 8006d76:	2101      	movs	r1, #1
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 fc1d 	bl	80085b8 <RCCEx_PLL3_Config>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d82:	e003      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	75fb      	strb	r3, [r7, #23]
      break;
 8006d88:	e000      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8006d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d92:	4b46      	ldr	r3, [pc, #280]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d96:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da0:	4942      	ldr	r1, [pc, #264]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	654b      	str	r3, [r1, #84]	; 0x54
 8006da6:	e001      	b.n	8006dac <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
 8006daa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d038      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006dbc:	2b05      	cmp	r3, #5
 8006dbe:	d821      	bhi.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006e0b 	.word	0x08006e0b
 8006dcc:	08006de1 	.word	0x08006de1
 8006dd0:	08006df3 	.word	0x08006df3
 8006dd4:	08006e0b 	.word	0x08006e0b
 8006dd8:	08006e0b 	.word	0x08006e0b
 8006ddc:	08006e0b 	.word	0x08006e0b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3304      	adds	r3, #4
 8006de4:	2101      	movs	r1, #1
 8006de6:	4618      	mov	r0, r3
 8006de8:	f001 fb34 	bl	8008454 <RCCEx_PLL2_Config>
 8006dec:	4603      	mov	r3, r0
 8006dee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006df0:	e00c      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3324      	adds	r3, #36	; 0x24
 8006df6:	2101      	movs	r1, #1
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 fbdd 	bl	80085b8 <RCCEx_PLL3_Config>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006e02:	e003      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	75fb      	strb	r3, [r7, #23]
      break;
 8006e08:	e000      	b.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e0c:	7dfb      	ldrb	r3, [r7, #23]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006e12:	4b26      	ldr	r3, [pc, #152]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e16:	f023 0207 	bic.w	r2, r3, #7
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e1e:	4923      	ldr	r1, [pc, #140]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	654b      	str	r3, [r1, #84]	; 0x54
 8006e24:	e001      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
 8006e28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0304 	and.w	r3, r3, #4
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d040      	beq.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e3c:	2b05      	cmp	r3, #5
 8006e3e:	d821      	bhi.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006e40:	a201      	add	r2, pc, #4	; (adr r2, 8006e48 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e46:	bf00      	nop
 8006e48:	08006e8b 	.word	0x08006e8b
 8006e4c:	08006e61 	.word	0x08006e61
 8006e50:	08006e73 	.word	0x08006e73
 8006e54:	08006e8b 	.word	0x08006e8b
 8006e58:	08006e8b 	.word	0x08006e8b
 8006e5c:	08006e8b 	.word	0x08006e8b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
 8006e64:	2101      	movs	r1, #1
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 faf4 	bl	8008454 <RCCEx_PLL2_Config>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e70:	e00c      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3324      	adds	r3, #36	; 0x24
 8006e76:	2101      	movs	r1, #1
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f001 fb9d 	bl	80085b8 <RCCEx_PLL3_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e82:	e003      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
      break;
 8006e88:	e000      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8006e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d110      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e92:	4b06      	ldr	r3, [pc, #24]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	f023 0207 	bic.w	r2, r3, #7
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ea0:	4902      	ldr	r1, [pc, #8]	; (8006eac <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ea6:	e007      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006ea8:	58024800 	.word	0x58024800
 8006eac:	58024400 	.word	0x58024400
 8006eb0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0320 	and.w	r3, r3, #32
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d04b      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ece:	d02e      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ed4:	d828      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eda:	d02a      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee0:	d822      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006ee2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ee6:	d026      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006ee8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eec:	d81c      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006eee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef2:	d010      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8006ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ef8:	d816      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d01d      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006efe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f02:	d111      	bne.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3304      	adds	r3, #4
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f001 faa2 	bl	8008454 <RCCEx_PLL2_Config>
 8006f10:	4603      	mov	r3, r0
 8006f12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f14:	e012      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	3324      	adds	r3, #36	; 0x24
 8006f1a:	2102      	movs	r1, #2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f001 fb4b 	bl	80085b8 <RCCEx_PLL3_Config>
 8006f22:	4603      	mov	r3, r0
 8006f24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006f26:	e009      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f2c:	e006      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006f2e:	bf00      	nop
 8006f30:	e004      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006f32:	bf00      	nop
 8006f34:	e002      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006f36:	bf00      	nop
 8006f38:	e000      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f42:	4bb3      	ldr	r3, [pc, #716]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f50:	49af      	ldr	r1, [pc, #700]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	654b      	str	r3, [r1, #84]	; 0x54
 8006f56:	e001      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f58:	7dfb      	ldrb	r3, [r7, #23]
 8006f5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d04b      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f72:	d02e      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8006f74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f78:	d828      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7e:	d02a      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8006f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f84:	d822      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f8a:	d026      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f90:	d81c      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f96:	d010      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8006f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f9c:	d816      	bhi.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d01d      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa6:	d111      	bne.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3304      	adds	r3, #4
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f001 fa50 	bl	8008454 <RCCEx_PLL2_Config>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006fb8:	e012      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3324      	adds	r3, #36	; 0x24
 8006fbe:	2102      	movs	r1, #2
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f001 faf9 	bl	80085b8 <RCCEx_PLL3_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006fca:	e009      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd0:	e006      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006fd2:	bf00      	nop
 8006fd4:	e004      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006fd6:	bf00      	nop
 8006fd8:	e002      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006fda:	bf00      	nop
 8006fdc:	e000      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006fde:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fe0:	7dfb      	ldrb	r3, [r7, #23]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d10a      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fe6:	4b8a      	ldr	r3, [pc, #552]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ff4:	4986      	ldr	r1, [pc, #536]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	658b      	str	r3, [r1, #88]	; 0x58
 8006ffa:	e001      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007008:	2b00      	cmp	r3, #0
 800700a:	d04b      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007012:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007016:	d02e      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007018:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800701c:	d828      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800701e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007022:	d02a      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007028:	d822      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800702a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800702e:	d026      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007030:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007034:	d81c      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800703a:	d010      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800703c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007040:	d816      	bhi.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d01d      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800704a:	d111      	bne.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3304      	adds	r3, #4
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f001 f9fe 	bl	8008454 <RCCEx_PLL2_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800705c:	e012      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	3324      	adds	r3, #36	; 0x24
 8007062:	2102      	movs	r1, #2
 8007064:	4618      	mov	r0, r3
 8007066:	f001 faa7 	bl	80085b8 <RCCEx_PLL3_Config>
 800706a:	4603      	mov	r3, r0
 800706c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800706e:	e009      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	75fb      	strb	r3, [r7, #23]
      break;
 8007074:	e006      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007076:	bf00      	nop
 8007078:	e004      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800707a:	bf00      	nop
 800707c:	e002      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800707e:	bf00      	nop
 8007080:	e000      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007084:	7dfb      	ldrb	r3, [r7, #23]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800708a:	4b61      	ldr	r3, [pc, #388]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800708c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007098:	495d      	ldr	r1, [pc, #372]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 800709a:	4313      	orrs	r3, r2
 800709c:	658b      	str	r3, [r1, #88]	; 0x58
 800709e:	e001      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0308 	and.w	r3, r3, #8
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01a      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ba:	d10a      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3324      	adds	r3, #36	; 0x24
 80070c0:	2102      	movs	r1, #2
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 fa78 	bl	80085b8 <RCCEx_PLL3_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
        {
          status = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070d2:	4b4f      	ldr	r3, [pc, #316]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80070d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070d6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e0:	494b      	ldr	r1, [pc, #300]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0310 	and.w	r3, r3, #16
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d01a      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xb60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fc:	d10a      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3324      	adds	r3, #36	; 0x24
 8007102:	2102      	movs	r1, #2
 8007104:	4618      	mov	r0, r3
 8007106:	f001 fa57 	bl	80085b8 <RCCEx_PLL3_Config>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
      {
        status = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007114:	4b3e      	ldr	r3, [pc, #248]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8007116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007122:	493b      	ldr	r1, [pc, #236]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8007124:	4313      	orrs	r3, r2
 8007126:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d034      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800713a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800713e:	d01d      	beq.n	800717c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8007140:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007144:	d817      	bhi.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
 800714a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714e:	d009      	beq.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8007150:	e011      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	3304      	adds	r3, #4
 8007156:	2100      	movs	r1, #0
 8007158:	4618      	mov	r0, r3
 800715a:	f001 f97b 	bl	8008454 <RCCEx_PLL2_Config>
 800715e:	4603      	mov	r3, r0
 8007160:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007162:	e00c      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xbb6>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	3324      	adds	r3, #36	; 0x24
 8007168:	2102      	movs	r1, #2
 800716a:	4618      	mov	r0, r3
 800716c:	f001 fa24 	bl	80085b8 <RCCEx_PLL3_Config>
 8007170:	4603      	mov	r3, r0
 8007172:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007174:	e003      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	75fb      	strb	r3, [r7, #23]
      break;
 800717a:	e000      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0xbb6>
      break;
 800717c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10a      	bne.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007184:	4b22      	ldr	r3, [pc, #136]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8007186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007188:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007192:	491f      	ldr	r1, [pc, #124]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8007194:	4313      	orrs	r3, r2
 8007196:	658b      	str	r3, [r1, #88]	; 0x58
 8007198:	e001      	b.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d036      	beq.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xc50>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071b4:	d01c      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80071b6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80071ba:	d816      	bhi.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80071bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071c0:	d003      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xc02>
 80071c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80071c6:	d007      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80071c8:	e00f      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ca:	4b11      	ldr	r3, [pc, #68]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80071cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ce:	4a10      	ldr	r2, [pc, #64]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80071d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80071d6:	e00c      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3324      	adds	r3, #36	; 0x24
 80071dc:	2101      	movs	r1, #1
 80071de:	4618      	mov	r0, r3
 80071e0:	f001 f9ea 	bl	80085b8 <RCCEx_PLL3_Config>
 80071e4:	4603      	mov	r3, r0
 80071e6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80071e8:	e003      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	75fb      	strb	r3, [r7, #23]
      break;
 80071ee:	e000      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80071f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10d      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071f8:	4b05      	ldr	r3, [pc, #20]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 80071fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007206:	4902      	ldr	r1, [pc, #8]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0xc48>)
 8007208:	4313      	orrs	r3, r2
 800720a:	654b      	str	r3, [r1, #84]	; 0x54
 800720c:	e004      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800720e:	bf00      	nop
 8007210:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d029      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800722c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007230:	d007      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
 8007232:	e00f      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007234:	4b69      	ldr	r3, [pc, #420]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007238:	4a68      	ldr	r2, [pc, #416]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800723a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007240:	e00b      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3304      	adds	r3, #4
 8007246:	2102      	movs	r1, #2
 8007248:	4618      	mov	r0, r3
 800724a:	f001 f903 	bl	8008454 <RCCEx_PLL2_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007252:	e002      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0xc92>

    default:
      ret = HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	75fb      	strb	r3, [r7, #23]
      break;
 8007258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d109      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007260:	4b5e      	ldr	r3, [pc, #376]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007264:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726c:	495b      	ldr	r1, [pc, #364]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800726e:	4313      	orrs	r3, r2
 8007270:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007272:	e001      	b.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	3324      	adds	r3, #36	; 0x24
 8007288:	2102      	movs	r1, #2
 800728a:	4618      	mov	r0, r3
 800728c:	f001 f994 	bl	80085b8 <RCCEx_PLL3_Config>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xcd2>
    {
      status=HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d032      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {

    switch(PeriphClkInit->RngClockSelection)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b0:	d017      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
 80072b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072b6:	d811      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80072b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072bc:	d013      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
 80072be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c2:	d80b      	bhi.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d010      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0xd22>
 80072c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072cc:	d106      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xd14>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ce:	4b43      	ldr	r3, [pc, #268]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	4a42      	ldr	r2, [pc, #264]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80072d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80072da:	e007      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xd24>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	75fb      	strb	r3, [r7, #23]
      break;
 80072e0:	e004      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80072e2:	bf00      	nop
 80072e4:	e002      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80072e6:	bf00      	nop
 80072e8:	e000      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0xd24>
      break;
 80072ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10a      	bne.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072f2:	4b3a      	ldr	r3, [pc, #232]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80072f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007300:	4936      	ldr	r1, [pc, #216]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007302:	4313      	orrs	r3, r2
 8007304:	654b      	str	r3, [r1, #84]	; 0x54
 8007306:	e001      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xd44>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d008      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007318:	4b30      	ldr	r3, [pc, #192]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007324:	492d      	ldr	r1, [pc, #180]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007326:	4313      	orrs	r3, r2
 8007328:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d008      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xd80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007336:	4b29      	ldr	r3, [pc, #164]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800733a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007342:	4926      	ldr	r1, [pc, #152]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007344:	4313      	orrs	r3, r2
 8007346:	650b      	str	r3, [r1, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007350:	2b00      	cmp	r3, #0
 8007352:	d008      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0xd9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007354:	4b21      	ldr	r3, [pc, #132]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007358:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007360:	491e      	ldr	r1, [pc, #120]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007362:	4313      	orrs	r3, r2
 8007364:	658b      	str	r3, [r1, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00d      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007372:	4b1a      	ldr	r3, [pc, #104]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007374:	691b      	ldr	r3, [r3, #16]
 8007376:	4a19      	ldr	r2, [pc, #100]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007378:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800737c:	6113      	str	r3, [r2, #16]
 800737e:	4b17      	ldr	r3, [pc, #92]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007388:	4914      	ldr	r1, [pc, #80]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 800738a:	4313      	orrs	r3, r2
 800738c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	da08      	bge.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007396:	4b11      	ldr	r3, [pc, #68]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 8007398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800739a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a2:	490e      	ldr	r1, [pc, #56]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d009      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xe00>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073b4:	4b09      	ldr	r3, [pc, #36]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80073b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c2:	4906      	ldr	r1, [pc, #24]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0xe14>)
 80073c4:	4313      	orrs	r3, r2
 80073c6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80073c8:	7dbb      	ldrb	r3, [r7, #22]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0xe0a>
  {
    return HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e000      	b.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0xe0c>
  }
  return HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58024400 	.word	0x58024400

080073e0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b090      	sub	sp, #64	; 0x40
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ee:	f040 8089 	bne.w	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80073f2:	4ba8      	ldr	r3, [pc, #672]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f6:	f003 0307 	and.w	r3, r3, #7
 80073fa:	633b      	str	r3, [r7, #48]	; 0x30
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d87d      	bhi.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8007402:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8007404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007408:	0800741d 	.word	0x0800741d
 800740c:	08007441 	.word	0x08007441
 8007410:	08007465 	.word	0x08007465
 8007414:	080074f9 	.word	0x080074f9
 8007418:	08007489 	.word	0x08007489

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800741c:	4b9d      	ldr	r3, [pc, #628]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007424:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007428:	d107      	bne.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800742a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800742e:	4618      	mov	r0, r3
 8007430:	f000 febe 	bl	80081b0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8007434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007436:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007438:	e3f5      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800743e:	e3f2      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007440:	4b94      	ldr	r3, [pc, #592]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007448:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800744c:	d107      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800744e:	f107 0318 	add.w	r3, r7, #24
 8007452:	4618      	mov	r0, r3
 8007454:	f000 fc04 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800745c:	e3e3      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007462:	e3e0      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007464:	4b8b      	ldr	r3, [pc, #556]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800746c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007470:	d107      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007472:	f107 030c 	add.w	r3, r7, #12
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fd46 	bl	8007f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007480:	e3d1      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007486:	e3ce      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007488:	4b82      	ldr	r3, [pc, #520]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800748a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007490:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007492:	4b80      	ldr	r3, [pc, #512]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b04      	cmp	r3, #4
 800749c:	d10c      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800749e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d109      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074a4:	4b7b      	ldr	r3, [pc, #492]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	08db      	lsrs	r3, r3, #3
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	4a7a      	ldr	r2, [pc, #488]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
 80074b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074b6:	e01e      	b.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074b8:	4b76      	ldr	r3, [pc, #472]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c4:	d106      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80074c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074cc:	d102      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80074ce:	4b73      	ldr	r3, [pc, #460]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80074d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074d2:	e010      	b.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80074d4:	4b6f      	ldr	r3, [pc, #444]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074e0:	d106      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80074e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e8:	d102      	bne.n	80074f0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80074ea:	4b6d      	ldr	r3, [pc, #436]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ee:	e002      	b.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80074f4:	e397      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80074f6:	e396      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80074f8:	4b6a      	ldr	r3, [pc, #424]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80074fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074fc:	e393      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007502:	e390      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
    }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

    else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750a:	f040 8095 	bne.w	8007638 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
    {
      saiclocksource= __HAL_RCC_GET_SAI2A_SOURCE();
 800750e:	4b61      	ldr	r3, [pc, #388]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007512:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007516:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751e:	d04d      	beq.n	80075bc <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007526:	f200 8084 	bhi.w	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	2bc0      	cmp	r3, #192	; 0xc0
 800752e:	d07d      	beq.n	800762c <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
 8007530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007532:	2bc0      	cmp	r3, #192	; 0xc0
 8007534:	d87d      	bhi.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	2b80      	cmp	r3, #128	; 0x80
 800753a:	d02d      	beq.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	2b80      	cmp	r3, #128	; 0x80
 8007540:	d877      	bhi.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	2b00      	cmp	r3, #0
 8007546:	d003      	beq.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x170>
 8007548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754a:	2b40      	cmp	r3, #64	; 0x40
 800754c:	d012      	beq.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800754e:	e070      	b.n	8007632 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007550:	4b50      	ldr	r3, [pc, #320]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800755c:	d107      	bne.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800755e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007562:	4618      	mov	r0, r3
 8007564:	f000 fe24 	bl	80081b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800756c:	e35b      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800756e:	2300      	movs	r3, #0
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007572:	e358      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007574:	4b47      	ldr	r3, [pc, #284]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800757c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007580:	d107      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007582:	f107 0318 	add.w	r3, r7, #24
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fb6a 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007590:	e349      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007592:	2300      	movs	r3, #0
 8007594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007596:	e346      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007598:	4b3e      	ldr	r3, [pc, #248]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075a4:	d107      	bne.n	80075b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075a6:	f107 030c 	add.w	r3, r7, #12
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 fcac 	bl	8007f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80075b4:	e337      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075ba:	e334      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80075bc:	4b35      	ldr	r3, [pc, #212]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075c6:	4b33      	ldr	r3, [pc, #204]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d10c      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d109      	bne.n	80075ec <HAL_RCCEx_GetPeriphCLKFreq+0x20c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075d8:	4b2e      	ldr	r3, [pc, #184]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	08db      	lsrs	r3, r3, #3
 80075de:	f003 0303 	and.w	r3, r3, #3
 80075e2:	4a2d      	ldr	r2, [pc, #180]	; (8007698 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80075e4:	fa22 f303 	lsr.w	r3, r2, r3
 80075e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ea:	e01e      	b.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075ec:	4b29      	ldr	r3, [pc, #164]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f8:	d106      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80075fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007600:	d102      	bne.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007602:	4b26      	ldr	r3, [pc, #152]	; (800769c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007606:	e010      	b.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007608:	4b22      	ldr	r3, [pc, #136]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007614:	d106      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800761c:	d102      	bne.n	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800761e:	4b20      	ldr	r3, [pc, #128]	; (80076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007620:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007622:	e002      	b.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007628:	e2fd      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800762a:	e2fc      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800762c:	4b1d      	ldr	r3, [pc, #116]	; (80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007630:	e2f9      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007636:	e2f6      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>

    }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800763e:	f040 80a7 	bne.w	8007790 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
    {

      saiclocksource= __HAL_RCC_GET_SAI2B_SOURCE();
 8007642:	4b14      	ldr	r3, [pc, #80]	; (8007694 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007646:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800764a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007652:	d05f      	beq.n	8007714 <HAL_RCCEx_GetPeriphCLKFreq+0x334>
 8007654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800765a:	f200 8096 	bhi.w	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800765e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007660:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007664:	f000 808e 	beq.w	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
 8007668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800766e:	f200 808c 	bhi.w	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007678:	d03a      	beq.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007680:	f200 8083 	bhi.w	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00e      	beq.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007690:	d01c      	beq.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>
 8007692:	e07a      	b.n	800778a <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8007694:	58024400 	.word	0x58024400
 8007698:	03d09000 	.word	0x03d09000
 800769c:	003d0900 	.word	0x003d0900
 80076a0:	007a1200 	.word	0x007a1200
 80076a4:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80076a8:	4ba8      	ldr	r3, [pc, #672]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076b4:	d107      	bne.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fd78 	bl	80081b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076c4:	e2af      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80076c6:	2300      	movs	r3, #0
 80076c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ca:	e2ac      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80076cc:	4b9f      	ldr	r3, [pc, #636]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076d8:	d107      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x30a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076da:	f107 0318 	add.w	r3, r7, #24
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 fabe 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80076e8:	e29d      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80076ee:	e29a      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80076f0:	4b96      	ldr	r3, [pc, #600]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076fc:	d107      	bne.n	800770e <HAL_RCCEx_GetPeriphCLKFreq+0x32e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076fe:	f107 030c 	add.w	r3, r7, #12
 8007702:	4618      	mov	r0, r3
 8007704:	f000 fc00 	bl	8007f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800770c:	e28b      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800770e:	2300      	movs	r3, #0
 8007710:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007712:	e288      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007714:	4b8d      	ldr	r3, [pc, #564]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007718:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800771c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800771e:	4b8b      	ldr	r3, [pc, #556]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0304 	and.w	r3, r3, #4
 8007726:	2b04      	cmp	r3, #4
 8007728:	d10c      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
 800772a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x364>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007730:	4b86      	ldr	r3, [pc, #536]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	08db      	lsrs	r3, r3, #3
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	4a85      	ldr	r2, [pc, #532]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800773c:	fa22 f303 	lsr.w	r3, r2, r3
 8007740:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007742:	e01e      	b.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007744:	4b81      	ldr	r3, [pc, #516]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007750:	d106      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
 8007752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007758:	d102      	bne.n	8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x380>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800775a:	4b7e      	ldr	r3, [pc, #504]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800775c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800775e:	e010      	b.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007760:	4b7a      	ldr	r3, [pc, #488]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007768:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800776c:	d106      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 800776e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007774:	d102      	bne.n	800777c <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007776:	4b78      	ldr	r3, [pc, #480]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800777a:	e002      	b.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
          break;
 8007780:	e251      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007782:	e250      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007784:	4b75      	ldr	r3, [pc, #468]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007786:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007788:	e24d      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800778e:	e24a      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          break;
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007796:	f040 809c 	bne.w	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800779a:	4b6c      	ldr	r3, [pc, #432]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800779c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80077a2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80077a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077aa:	d054      	beq.n	8007856 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80077ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077b2:	f200 808b 	bhi.w	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80077b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077bc:	f000 8083 	beq.w	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
 80077c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077c6:	f200 8081 	bhi.w	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80077ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d0:	d02f      	beq.n	8007832 <HAL_RCCEx_GetPeriphCLKFreq+0x452>
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d8:	d878      	bhi.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80077da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x40a>
 80077e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e6:	d012      	beq.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
 80077e8:	e070      	b.n	80078cc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80077ea:	4b58      	ldr	r3, [pc, #352]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077f6:	d107      	bne.n	8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x428>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fcd7 	bl	80081b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007804:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007806:	e20e      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800780c:	e20b      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800780e:	4b4f      	ldr	r3, [pc, #316]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007816:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800781a:	d107      	bne.n	800782c <HAL_RCCEx_GetPeriphCLKFreq+0x44c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800781c:	f107 0318 	add.w	r3, r7, #24
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fa1d 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800782a:	e1fc      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 800782c:	2300      	movs	r3, #0
 800782e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007830:	e1f9      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007832:	4b46      	ldr	r3, [pc, #280]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800783a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800783e:	d107      	bne.n	8007850 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007840:	f107 030c 	add.w	r3, r7, #12
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fb5f 	bl	8007f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800784e:	e1ea      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007850:	2300      	movs	r3, #0
 8007852:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007854:	e1e7      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007856:	4b3d      	ldr	r3, [pc, #244]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800785e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007860:	4b3a      	ldr	r3, [pc, #232]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0304 	and.w	r3, r3, #4
 8007868:	2b04      	cmp	r3, #4
 800786a:	d10c      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 800786c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786e:	2b00      	cmp	r3, #0
 8007870:	d109      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007872:	4b36      	ldr	r3, [pc, #216]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	08db      	lsrs	r3, r3, #3
 8007878:	f003 0303 	and.w	r3, r3, #3
 800787c:	4a34      	ldr	r2, [pc, #208]	; (8007950 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800787e:	fa22 f303 	lsr.w	r3, r2, r3
 8007882:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007884:	e01e      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007886:	4b31      	ldr	r3, [pc, #196]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007892:	d106      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
 8007894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800789a:	d102      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800789c:	4b2d      	ldr	r3, [pc, #180]	; (8007954 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078a0:	e010      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80078a2:	4b2a      	ldr	r3, [pc, #168]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ae:	d106      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80078b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078b6:	d102      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80078b8:	4b27      	ldr	r3, [pc, #156]	; (8007958 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80078ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078bc:	e002      	b.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80078be:	2300      	movs	r3, #0
 80078c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80078c2:	e1b0      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80078c4:	e1af      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80078c6:	4b25      	ldr	r3, [pc, #148]	; (800795c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078ca:	e1ac      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80078d0:	e1a9      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80078d8:	d17d      	bne.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80078da:	4b1c      	ldr	r3, [pc, #112]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 80078dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078e2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ea:	d039      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078f2:	d86d      	bhi.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80078f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007900:	d012      	beq.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8007902:	e065      	b.n	80079d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007904:	4b11      	ldr	r3, [pc, #68]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800790c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007910:	d107      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007912:	f107 0318 	add.w	r3, r7, #24
 8007916:	4618      	mov	r0, r3
 8007918:	f000 f9a2 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007920:	e181      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007922:	2300      	movs	r3, #0
 8007924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007926:	e17e      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007928:	4b08      	ldr	r3, [pc, #32]	; (800794c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007934:	d107      	bne.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007936:	f107 030c 	add.w	r3, r7, #12
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fae4 	bl	8007f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007944:	e16f      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007946:	2300      	movs	r3, #0
 8007948:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800794a:	e16c      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 800794c:	58024400 	.word	0x58024400
 8007950:	03d09000 	.word	0x03d09000
 8007954:	003d0900 	.word	0x003d0900
 8007958:	007a1200 	.word	0x007a1200
 800795c:	00bb8000 	.word	0x00bb8000
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007960:	4ba0      	ldr	r3, [pc, #640]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007968:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800796a:	4b9e      	ldr	r3, [pc, #632]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b04      	cmp	r3, #4
 8007974:	d10c      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
 8007976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007978:	2b00      	cmp	r3, #0
 800797a:	d109      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800797c:	4b99      	ldr	r3, [pc, #612]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	08db      	lsrs	r3, r3, #3
 8007982:	f003 0303 	and.w	r3, r3, #3
 8007986:	4a98      	ldr	r2, [pc, #608]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007988:	fa22 f303 	lsr.w	r3, r2, r3
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800798e:	e01e      	b.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007990:	4b94      	ldr	r3, [pc, #592]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799c:	d106      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a4:	d102      	bne.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80079a6:	4b91      	ldr	r3, [pc, #580]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80079a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079aa:	e010      	b.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80079ac:	4b8d      	ldr	r3, [pc, #564]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079b8:	d106      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 80079ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c0:	d102      	bne.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80079c2:	4b8b      	ldr	r3, [pc, #556]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 80079c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079c6:	e002      	b.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80079cc:	e12b      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 80079ce:	e12a      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80079d4:	e127      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079dc:	d133      	bne.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80079de:	4b81      	ldr	r3, [pc, #516]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80079e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079e6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d004      	beq.n	80079f8 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 80079ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f4:	d012      	beq.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80079f6:	e023      	b.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079f8:	4b7a      	ldr	r3, [pc, #488]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a04:	d107      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fbd0 	bl	80081b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a14:	e107      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007a16:	2300      	movs	r3, #0
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a1a:	e104      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a1c:	4b71      	ldr	r3, [pc, #452]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a28:	d107      	bne.n	8007a3a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a2a:	f107 0318 	add.w	r3, r7, #24
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 f916 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007a38:	e0f5      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a3e:	e0f2      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }

      default :
        {
          frequency = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007a44:	e0ef      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a4c:	f040 8091 	bne.w	8007b72 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007a50:	4b64      	ldr	r3, [pc, #400]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a54:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8007a58:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007a60:	f000 8081 	beq.w	8007b66 <HAL_RCCEx_GetPeriphCLKFreq+0x786>
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8007a6a:	d87f      	bhi.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a72:	d06b      	beq.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007a7a:	d877      	bhi.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a82:	d056      	beq.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8a:	d86f      	bhi.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a92:	d03b      	beq.n	8007b0c <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8007a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007a9a:	d867      	bhi.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aa2:	d021      	beq.n	8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x708>
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aaa:	d85f      	bhi.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d004      	beq.n	8007abc <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8007ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ab8:	d004      	beq.n	8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
 8007aba:	e057      	b.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8007abc:	f000 f8ba 	bl	8007c34 <HAL_RCCEx_GetD3PCLK1Freq>
 8007ac0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007ac2:	e0b0      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ac4:	4b47      	ldr	r3, [pc, #284]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ad0:	d107      	bne.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ad2:	f107 0318 	add.w	r3, r7, #24
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 f8c2 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007ae0:	e0a1      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007ae6:	e09e      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ae8:	4b3e      	ldr	r3, [pc, #248]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007af4:	d107      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007af6:	f107 030c 	add.w	r3, r7, #12
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fa04 	bl	8007f08 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b04:	e08f      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b0a:	e08c      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007b0c:	4b35      	ldr	r3, [pc, #212]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	d109      	bne.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b18:	4b32      	ldr	r3, [pc, #200]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	08db      	lsrs	r3, r3, #3
 8007b1e:	f003 0303 	and.w	r3, r3, #3
 8007b22:	4a31      	ldr	r2, [pc, #196]	; (8007be8 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8007b24:	fa22 f303 	lsr.w	r3, r2, r3
 8007b28:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b2a:	e07c      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b30:	e079      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007b32:	4b2c      	ldr	r3, [pc, #176]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b3e:	d102      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
         {
          frequency = CSI_VALUE;
 8007b40:	4b2a      	ldr	r3, [pc, #168]	; (8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8007b42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007b44:	e06f      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
           frequency = 0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b4a:	e06c      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007b4c:	4b25      	ldr	r3, [pc, #148]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b58:	d102      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
         {
          frequency = HSE_VALUE;
 8007b5a:	4b25      	ldr	r3, [pc, #148]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007b5e:	e062      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b64:	e05f      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007b66:	4b23      	ldr	r3, [pc, #140]	; (8007bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x814>)
 8007b68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b6a:	e05c      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007b70:	e059      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b78:	d153      	bne.n	8007c22 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8007b7a:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007b82:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b8a:	d035      	beq.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b92:	d843      	bhi.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d004      	beq.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ba0:	d00d      	beq.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8007ba2:	e03b      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007ba4:	4b0f      	ldr	r3, [pc, #60]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bb0:	d102      	bne.n	8007bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
         {
          frequency = HSE_VALUE;
 8007bb2:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8007bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007bb6:	e036      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007bbc:	e033      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007bbe:	4b09      	ldr	r3, [pc, #36]	; (8007be4 <HAL_RCCEx_GetPeriphCLKFreq+0x804>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bc6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007bca:	d107      	bne.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f000 faed 	bl	80081b0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007bda:	e024      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007be0:	e021      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
 8007be2:	bf00      	nop
 8007be4:	58024400 	.word	0x58024400
 8007be8:	03d09000 	.word	0x03d09000
 8007bec:	003d0900 	.word	0x003d0900
 8007bf0:	007a1200 	.word	0x007a1200
 8007bf4:	00bb8000 	.word	0x00bb8000
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007bf8:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c04:	d107      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c06:	f107 0318 	add.w	r3, r7, #24
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f828 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007c14:	e007      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
          frequency = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c1a:	e004      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      default :
        {
          frequency = 0;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007c20:	e001      	b.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x846>
        }
      }
    }
  else
    {
      frequency = 0;
 8007c22:	2300      	movs	r3, #0
 8007c24:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3740      	adds	r7, #64	; 0x40
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	58024400 	.word	0x58024400

08007c34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8007c38:	f7fe fc6a 	bl	8006510 <HAL_RCC_GetHCLKFreq>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	091b      	lsrs	r3, r3, #4
 8007c44:	f003 0307 	and.w	r3, r3, #7
 8007c48:	4904      	ldr	r1, [pc, #16]	; (8007c5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007c4a:	5ccb      	ldrb	r3, [r1, r3]
 8007c4c:	f003 031f 	and.w	r3, r3, #31
 8007c50:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	58024400 	.word	0x58024400
 8007c5c:	0800a500 	.word	0x0800a500

08007c60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b089      	sub	sp, #36	; 0x24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c68:	4ba1      	ldr	r3, [pc, #644]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6c:	f003 0303 	and.w	r3, r3, #3
 8007c70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007c72:	4b9f      	ldr	r3, [pc, #636]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	0b1b      	lsrs	r3, r3, #12
 8007c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007c7e:	4b9c      	ldr	r3, [pc, #624]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c82:	091b      	lsrs	r3, r3, #4
 8007c84:	f003 0301 	and.w	r3, r3, #1
 8007c88:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007c8a:	4b99      	ldr	r3, [pc, #612]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8e:	08db      	lsrs	r3, r3, #3
 8007c90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	fb02 f303 	mul.w	r3, r2, r3
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8111 	beq.w	8007ed0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	f000 8083 	beq.w	8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	f200 80a1 	bhi.w	8007e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d003      	beq.n	8007ccc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007cc4:	69bb      	ldr	r3, [r7, #24]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d056      	beq.n	8007d78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007cca:	e099      	b.n	8007e00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ccc:	4b88      	ldr	r3, [pc, #544]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d02d      	beq.n	8007d34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cd8:	4b85      	ldr	r3, [pc, #532]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	08db      	lsrs	r3, r3, #3
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	4a84      	ldr	r2, [pc, #528]	; (8007ef4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	ee07 3a90 	vmov	s15, r3
 8007cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d02:	4b7b      	ldr	r3, [pc, #492]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d0a:	ee07 3a90 	vmov	s15, r3
 8007d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d32:	e087      	b.n	8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007efc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d46:	4b6a      	ldr	r3, [pc, #424]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4e:	ee07 3a90 	vmov	s15, r3
 8007d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d76:	e065      	b.n	8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d8a:	4b59      	ldr	r3, [pc, #356]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d92:	ee07 3a90 	vmov	s15, r3
 8007d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007daa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dba:	e043      	b.n	8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	ee07 3a90 	vmov	s15, r3
 8007dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007f04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dce:	4b48      	ldr	r3, [pc, #288]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dd6:	ee07 3a90 	vmov	s15, r3
 8007dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8007de2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007dfe:	e021      	b.n	8007e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e12:	4b37      	ldr	r3, [pc, #220]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1a:	ee07 3a90 	vmov	s15, r3
 8007e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007e44:	4b2a      	ldr	r3, [pc, #168]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	0a5b      	lsrs	r3, r3, #9
 8007e4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e6a:	ee17 2a90 	vmov	r2, s15
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007e72:	4b1f      	ldr	r3, [pc, #124]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e76:	0c1b      	lsrs	r3, r3, #16
 8007e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7c:	ee07 3a90 	vmov	s15, r3
 8007e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e98:	ee17 2a90 	vmov	r2, s15
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007ea0:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	0e1b      	lsrs	r3, r3, #24
 8007ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eba:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ebe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ec6:	ee17 2a90 	vmov	r2, s15
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007ece:	e008      	b.n	8007ee2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	609a      	str	r2, [r3, #8]
}
 8007ee2:	bf00      	nop
 8007ee4:	3724      	adds	r7, #36	; 0x24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	58024400 	.word	0x58024400
 8007ef4:	03d09000 	.word	0x03d09000
 8007ef8:	46000000 	.word	0x46000000
 8007efc:	4c742400 	.word	0x4c742400
 8007f00:	4a742400 	.word	0x4a742400
 8007f04:	4af42400 	.word	0x4af42400

08007f08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b089      	sub	sp, #36	; 0x24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f10:	4ba1      	ldr	r3, [pc, #644]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	f003 0303 	and.w	r3, r3, #3
 8007f18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007f1a:	4b9f      	ldr	r3, [pc, #636]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1e:	0d1b      	lsrs	r3, r3, #20
 8007f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007f26:	4b9c      	ldr	r3, [pc, #624]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	0a1b      	lsrs	r3, r3, #8
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007f32:	4b99      	ldr	r3, [pc, #612]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f36:	08db      	lsrs	r3, r3, #3
 8007f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	fb02 f303 	mul.w	r3, r2, r3
 8007f42:	ee07 3a90 	vmov	s15, r3
 8007f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 8111 	beq.w	8008178 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	f000 8083 	beq.w	8008064 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	f200 80a1 	bhi.w	80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d056      	beq.n	8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007f72:	e099      	b.n	80080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f74:	4b88      	ldr	r3, [pc, #544]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d02d      	beq.n	8007fdc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007f80:	4b85      	ldr	r3, [pc, #532]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	08db      	lsrs	r3, r3, #3
 8007f86:	f003 0303 	and.w	r3, r3, #3
 8007f8a:	4a84      	ldr	r2, [pc, #528]	; (800819c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f90:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	ee07 3a90 	vmov	s15, r3
 8007f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	ee07 3a90 	vmov	s15, r3
 8007fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007faa:	4b7b      	ldr	r3, [pc, #492]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb2:	ee07 3a90 	vmov	s15, r3
 8007fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007fba:	ed97 6a03 	vldr	s12, [r7, #12]
 8007fbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fd6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007fda:	e087      	b.n	80080ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	ee07 3a90 	vmov	s15, r3
 8007fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fe6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80081a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fee:	4b6a      	ldr	r3, [pc, #424]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ff6:	ee07 3a90 	vmov	s15, r3
 8007ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008002:	eddf 5a67 	vldr	s11, [pc, #412]	; 80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800800a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800800e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800801a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800801e:	e065      	b.n	80080ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80081a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800802e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008032:	4b59      	ldr	r3, [pc, #356]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800803a:	ee07 3a90 	vmov	s15, r3
 800803e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008042:	ed97 6a03 	vldr	s12, [r7, #12]
 8008046:	eddf 5a56 	vldr	s11, [pc, #344]	; 80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800804a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800804e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800805a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800805e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008062:	e043      	b.n	80080ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	ee07 3a90 	vmov	s15, r3
 800806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800806e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80081ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008076:	4b48      	ldr	r3, [pc, #288]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800807e:	ee07 3a90 	vmov	s15, r3
 8008082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008086:	ed97 6a03 	vldr	s12, [r7, #12]
 800808a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800808e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800809a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800809e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080a6:	e021      	b.n	80080ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	ee07 3a90 	vmov	s15, r3
 80080ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80081a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080ba:	4b37      	ldr	r3, [pc, #220]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080c2:	ee07 3a90 	vmov	s15, r3
 80080c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80081a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80080ec:	4b2a      	ldr	r3, [pc, #168]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f0:	0a5b      	lsrs	r3, r3, #9
 80080f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f6:	ee07 3a90 	vmov	s15, r3
 80080fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008102:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008106:	edd7 6a07 	vldr	s13, [r7, #28]
 800810a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800810e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008112:	ee17 2a90 	vmov	r2, s15
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800811a:	4b1f      	ldr	r3, [pc, #124]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800811c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811e:	0c1b      	lsrs	r3, r3, #16
 8008120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008124:	ee07 3a90 	vmov	s15, r3
 8008128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800812c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008130:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008134:	edd7 6a07 	vldr	s13, [r7, #28]
 8008138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800813c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008140:	ee17 2a90 	vmov	r2, s15
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008148:	4b13      	ldr	r3, [pc, #76]	; (8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814c:	0e1b      	lsrs	r3, r3, #24
 800814e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800815e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008162:	edd7 6a07 	vldr	s13, [r7, #28]
 8008166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800816a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800816e:	ee17 2a90 	vmov	r2, s15
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008176:	e008      	b.n	800818a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	609a      	str	r2, [r3, #8]
}
 800818a:	bf00      	nop
 800818c:	3724      	adds	r7, #36	; 0x24
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	58024400 	.word	0x58024400
 800819c:	03d09000 	.word	0x03d09000
 80081a0:	46000000 	.word	0x46000000
 80081a4:	4c742400 	.word	0x4c742400
 80081a8:	4a742400 	.word	0x4a742400
 80081ac:	4af42400 	.word	0x4af42400

080081b0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b089      	sub	sp, #36	; 0x24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081b8:	4ba0      	ldr	r3, [pc, #640]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081bc:	f003 0303 	and.w	r3, r3, #3
 80081c0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80081c2:	4b9e      	ldr	r3, [pc, #632]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c6:	091b      	lsrs	r3, r3, #4
 80081c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081cc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80081ce:	4b9b      	ldr	r3, [pc, #620]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80081d8:	4b98      	ldr	r3, [pc, #608]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80081da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081dc:	08db      	lsrs	r3, r3, #3
 80081de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081e2:	693a      	ldr	r2, [r7, #16]
 80081e4:	fb02 f303 	mul.w	r3, r2, r3
 80081e8:	ee07 3a90 	vmov	s15, r3
 80081ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f000 8111 	beq.w	800841e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	f000 8083 	beq.w	800830a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	2b02      	cmp	r3, #2
 8008208:	f200 80a1 	bhi.w	800834e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d056      	beq.n	80082c6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8008218:	e099      	b.n	800834e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800821a:	4b88      	ldr	r3, [pc, #544]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0320 	and.w	r3, r3, #32
 8008222:	2b00      	cmp	r3, #0
 8008224:	d02d      	beq.n	8008282 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008226:	4b85      	ldr	r3, [pc, #532]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	08db      	lsrs	r3, r3, #3
 800822c:	f003 0303 	and.w	r3, r3, #3
 8008230:	4a83      	ldr	r2, [pc, #524]	; (8008440 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008232:	fa22 f303 	lsr.w	r3, r2, r3
 8008236:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	ee07 3a90 	vmov	s15, r3
 800823e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	ee07 3a90 	vmov	s15, r3
 8008248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008250:	4b7a      	ldr	r3, [pc, #488]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008260:	ed97 6a03 	vldr	s12, [r7, #12]
 8008264:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008268:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800826c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800827c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008280:	e087      	b.n	8008392 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	ee07 3a90 	vmov	s15, r3
 8008288:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800828c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008448 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008294:	4b69      	ldr	r3, [pc, #420]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800829c:	ee07 3a90 	vmov	s15, r3
 80082a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80082a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082c4:	e065      	b.n	8008392 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	ee07 3a90 	vmov	s15, r3
 80082cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800844c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80082d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d8:	4b58      	ldr	r3, [pc, #352]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80082da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e0:	ee07 3a90 	vmov	s15, r3
 80082e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80082f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008308:	e043      	b.n	8008392 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	ee07 3a90 	vmov	s15, r3
 8008310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008314:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008450 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8008318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800831c:	4b47      	ldr	r3, [pc, #284]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800831e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800832c:	ed97 6a03 	vldr	s12, [r7, #12]
 8008330:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800833c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008348:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800834c:	e021      	b.n	8008392 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	ee07 3a90 	vmov	s15, r3
 8008354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008358:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008448 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800835c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008360:	4b36      	ldr	r3, [pc, #216]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008368:	ee07 3a90 	vmov	s15, r3
 800836c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008370:	ed97 6a03 	vldr	s12, [r7, #12]
 8008374:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008444 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800837c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800838c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008390:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8008392:	4b2a      	ldr	r3, [pc, #168]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008396:	0a5b      	lsrs	r3, r3, #9
 8008398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839c:	ee07 3a90 	vmov	s15, r3
 80083a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80083b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083b8:	ee17 2a90 	vmov	r2, s15
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80083c0:	4b1e      	ldr	r3, [pc, #120]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c4:	0c1b      	lsrs	r3, r3, #16
 80083c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ca:	ee07 3a90 	vmov	s15, r3
 80083ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083da:	edd7 6a07 	vldr	s13, [r7, #28]
 80083de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083e6:	ee17 2a90 	vmov	r2, s15
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80083ee:	4b13      	ldr	r3, [pc, #76]	; (800843c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80083f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f2:	0e1b      	lsrs	r3, r3, #24
 80083f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f8:	ee07 3a90 	vmov	s15, r3
 80083fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008400:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008404:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008408:	edd7 6a07 	vldr	s13, [r7, #28]
 800840c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008414:	ee17 2a90 	vmov	r2, s15
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800841c:	e008      	b.n	8008430 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	609a      	str	r2, [r3, #8]
}
 8008430:	bf00      	nop
 8008432:	3724      	adds	r7, #36	; 0x24
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	58024400 	.word	0x58024400
 8008440:	03d09000 	.word	0x03d09000
 8008444:	46000000 	.word	0x46000000
 8008448:	4c742400 	.word	0x4c742400
 800844c:	4a742400 	.word	0x4a742400
 8008450:	4af42400 	.word	0x4af42400

08008454 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008462:	4b53      	ldr	r3, [pc, #332]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	2b03      	cmp	r3, #3
 800846c:	d101      	bne.n	8008472 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e099      	b.n	80085a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008472:	4b4f      	ldr	r3, [pc, #316]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a4e      	ldr	r2, [pc, #312]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008478:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800847c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800847e:	f7f9 f963 	bl	8001748 <HAL_GetTick>
 8008482:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008484:	e008      	b.n	8008498 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008486:	f7f9 f95f 	bl	8001748 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	2b02      	cmp	r3, #2
 8008492:	d901      	bls.n	8008498 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e086      	b.n	80085a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008498:	4b45      	ldr	r3, [pc, #276]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1f0      	bne.n	8008486 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80084a4:	4b42      	ldr	r3, [pc, #264]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 80084a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	031b      	lsls	r3, r3, #12
 80084b2:	493f      	ldr	r1, [pc, #252]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	628b      	str	r3, [r1, #40]	; 0x28
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	3b01      	subs	r3, #1
 80084be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	025b      	lsls	r3, r3, #9
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	431a      	orrs	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	041b      	lsls	r3, r3, #16
 80084d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084da:	431a      	orrs	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	061b      	lsls	r3, r3, #24
 80084e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084e8:	4931      	ldr	r1, [pc, #196]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 80084ea:	4313      	orrs	r3, r2
 80084ec:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80084ee:	4b30      	ldr	r3, [pc, #192]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	492d      	ldr	r1, [pc, #180]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 80084fc:	4313      	orrs	r3, r2
 80084fe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008500:	4b2b      	ldr	r3, [pc, #172]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	f023 0220 	bic.w	r2, r3, #32
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	699b      	ldr	r3, [r3, #24]
 800850c:	4928      	ldr	r1, [pc, #160]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 800850e:	4313      	orrs	r3, r2
 8008510:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008512:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	4a26      	ldr	r2, [pc, #152]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008518:	f023 0310 	bic.w	r3, r3, #16
 800851c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800851e:	4b24      	ldr	r3, [pc, #144]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008522:	4b24      	ldr	r3, [pc, #144]	; (80085b4 <RCCEx_PLL2_Config+0x160>)
 8008524:	4013      	ands	r3, r2
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	69d2      	ldr	r2, [r2, #28]
 800852a:	00d2      	lsls	r2, r2, #3
 800852c:	4920      	ldr	r1, [pc, #128]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 800852e:	4313      	orrs	r3, r2
 8008530:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008532:	4b1f      	ldr	r3, [pc, #124]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	4a1e      	ldr	r2, [pc, #120]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008538:	f043 0310 	orr.w	r3, r3, #16
 800853c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d106      	bne.n	8008552 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008544:	4b1a      	ldr	r3, [pc, #104]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	4a19      	ldr	r2, [pc, #100]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 800854a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800854e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008550:	e00f      	b.n	8008572 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d106      	bne.n	8008566 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008558:	4b15      	ldr	r3, [pc, #84]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	4a14      	ldr	r2, [pc, #80]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 800855e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008562:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008564:	e005      	b.n	8008572 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008566:	4b12      	ldr	r3, [pc, #72]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	4a11      	ldr	r2, [pc, #68]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 800856c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008570:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008572:	4b0f      	ldr	r3, [pc, #60]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a0e      	ldr	r2, [pc, #56]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 8008578:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800857c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800857e:	f7f9 f8e3 	bl	8001748 <HAL_GetTick>
 8008582:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008584:	e008      	b.n	8008598 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008586:	f7f9 f8df 	bl	8001748 <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	2b02      	cmp	r3, #2
 8008592:	d901      	bls.n	8008598 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e006      	b.n	80085a6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008598:	4b05      	ldr	r3, [pc, #20]	; (80085b0 <RCCEx_PLL2_Config+0x15c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0f0      	beq.n	8008586 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	58024400 	.word	0x58024400
 80085b4:	ffff0007 	.word	0xffff0007

080085b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80085c6:	4b53      	ldr	r3, [pc, #332]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80085c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d101      	bne.n	80085d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e099      	b.n	800870a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80085d6:	4b4f      	ldr	r3, [pc, #316]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a4e      	ldr	r2, [pc, #312]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80085dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085e2:	f7f9 f8b1 	bl	8001748 <HAL_GetTick>
 80085e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085e8:	e008      	b.n	80085fc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80085ea:	f7f9 f8ad 	bl	8001748 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e086      	b.n	800870a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085fc:	4b45      	ldr	r3, [pc, #276]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d1f0      	bne.n	80085ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008608:	4b42      	ldr	r3, [pc, #264]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 800860a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	051b      	lsls	r3, r3, #20
 8008616:	493f      	ldr	r1, [pc, #252]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 8008618:	4313      	orrs	r3, r2
 800861a:	628b      	str	r3, [r1, #40]	; 0x28
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	3b01      	subs	r3, #1
 8008622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	3b01      	subs	r3, #1
 800862c:	025b      	lsls	r3, r3, #9
 800862e:	b29b      	uxth	r3, r3
 8008630:	431a      	orrs	r2, r3
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	3b01      	subs	r3, #1
 8008638:	041b      	lsls	r3, r3, #16
 800863a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800863e:	431a      	orrs	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	3b01      	subs	r3, #1
 8008646:	061b      	lsls	r3, r3, #24
 8008648:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800864c:	4931      	ldr	r1, [pc, #196]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 800864e:	4313      	orrs	r3, r2
 8008650:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008652:	4b30      	ldr	r3, [pc, #192]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 8008654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008656:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	695b      	ldr	r3, [r3, #20]
 800865e:	492d      	ldr	r1, [pc, #180]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 8008660:	4313      	orrs	r3, r2
 8008662:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008664:	4b2b      	ldr	r3, [pc, #172]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	4928      	ldr	r1, [pc, #160]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 8008672:	4313      	orrs	r3, r2
 8008674:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008676:	4b27      	ldr	r3, [pc, #156]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 8008678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867a:	4a26      	ldr	r2, [pc, #152]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 800867c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008680:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008682:	4b24      	ldr	r3, [pc, #144]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 8008684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008686:	4b24      	ldr	r3, [pc, #144]	; (8008718 <RCCEx_PLL3_Config+0x160>)
 8008688:	4013      	ands	r3, r2
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	69d2      	ldr	r2, [r2, #28]
 800868e:	00d2      	lsls	r2, r2, #3
 8008690:	4920      	ldr	r1, [pc, #128]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 8008692:	4313      	orrs	r3, r2
 8008694:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008696:	4b1f      	ldr	r3, [pc, #124]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 8008698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869a:	4a1e      	ldr	r2, [pc, #120]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 800869c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80086a8:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80086aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ac:	4a19      	ldr	r2, [pc, #100]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80086ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086b4:	e00f      	b.n	80086d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d106      	bne.n	80086ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80086bc:	4b15      	ldr	r3, [pc, #84]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	4a14      	ldr	r2, [pc, #80]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80086c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80086c8:	e005      	b.n	80086d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80086ca:	4b12      	ldr	r3, [pc, #72]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	4a11      	ldr	r2, [pc, #68]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80086d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80086d6:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a0e      	ldr	r2, [pc, #56]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80086dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086e2:	f7f9 f831 	bl	8001748 <HAL_GetTick>
 80086e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086e8:	e008      	b.n	80086fc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80086ea:	f7f9 f82d 	bl	8001748 <HAL_GetTick>
 80086ee:	4602      	mov	r2, r0
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	1ad3      	subs	r3, r2, r3
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d901      	bls.n	80086fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80086f8:	2303      	movs	r3, #3
 80086fa:	e006      	b.n	800870a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <RCCEx_PLL3_Config+0x15c>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d0f0      	beq.n	80086ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	58024400 	.word	0x58024400
 8008718:	ffff0007 	.word	0xffff0007

0800871c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	e049      	b.n	80087c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	d106      	bne.n	8008748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f7f8 fdc4 	bl	80012d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	3304      	adds	r3, #4
 8008758:	4619      	mov	r1, r3
 800875a:	4610      	mov	r0, r2
 800875c:	f000 fa90 	bl	8008c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d001      	beq.n	80087e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e04f      	b.n	8008884 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2202      	movs	r2, #2
 80087e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0201 	orr.w	r2, r2, #1
 80087fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a23      	ldr	r2, [pc, #140]	; (8008890 <HAL_TIM_Base_Start_IT+0xc4>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d01d      	beq.n	8008842 <HAL_TIM_Base_Start_IT+0x76>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800880e:	d018      	beq.n	8008842 <HAL_TIM_Base_Start_IT+0x76>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <HAL_TIM_Base_Start_IT+0xc8>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <HAL_TIM_Base_Start_IT+0x76>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a1e      	ldr	r2, [pc, #120]	; (8008898 <HAL_TIM_Base_Start_IT+0xcc>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d00e      	beq.n	8008842 <HAL_TIM_Base_Start_IT+0x76>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a1c      	ldr	r2, [pc, #112]	; (800889c <HAL_TIM_Base_Start_IT+0xd0>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d009      	beq.n	8008842 <HAL_TIM_Base_Start_IT+0x76>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a1b      	ldr	r2, [pc, #108]	; (80088a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d004      	beq.n	8008842 <HAL_TIM_Base_Start_IT+0x76>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a19      	ldr	r2, [pc, #100]	; (80088a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d115      	bne.n	800886e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	689a      	ldr	r2, [r3, #8]
 8008848:	4b17      	ldr	r3, [pc, #92]	; (80088a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800884a:	4013      	ands	r3, r2
 800884c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b06      	cmp	r3, #6
 8008852:	d015      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xb4>
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800885a:	d011      	beq.n	8008880 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f042 0201 	orr.w	r2, r2, #1
 800886a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886c:	e008      	b.n	8008880 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0201 	orr.w	r2, r2, #1
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	e000      	b.n	8008882 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008880:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	40010000 	.word	0x40010000
 8008894:	40000400 	.word	0x40000400
 8008898:	40000800 	.word	0x40000800
 800889c:	40000c00 	.word	0x40000c00
 80088a0:	40010400 	.word	0x40010400
 80088a4:	40001800 	.word	0x40001800
 80088a8:	00010007 	.word	0x00010007

080088ac <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e049      	b.n	8008952 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d106      	bne.n	80088d8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f841 	bl	800895a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2202      	movs	r2, #2
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3304      	adds	r3, #4
 80088e8:	4619      	mov	r1, r3
 80088ea:	4610      	mov	r0, r2
 80088ec:	f000 f9c8 	bl	8008c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2201      	movs	r2, #1
 8008934:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	3708      	adds	r7, #8
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800895a:	b480      	push	{r7}
 800895c:	b083      	sub	sp, #12
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008962:	bf00      	nop
 8008964:	370c      	adds	r7, #12
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b084      	sub	sp, #16
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008980:	2b01      	cmp	r3, #1
 8008982:	d101      	bne.n	8008988 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008984:	2302      	movs	r3, #2
 8008986:	e082      	b.n	8008a8e <HAL_TIM_IC_ConfigChannel+0x120>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d11b      	bne.n	80089ce <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6818      	ldr	r0, [r3, #0]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6819      	ldr	r1, [r3, #0]
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	685a      	ldr	r2, [r3, #4]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f000 fa05 	bl	8008db4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 020c 	bic.w	r2, r2, #12
 80089b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6999      	ldr	r1, [r3, #24]
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	689a      	ldr	r2, [r3, #8]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	430a      	orrs	r2, r1
 80089ca:	619a      	str	r2, [r3, #24]
 80089cc:	e05a      	b.n	8008a84 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	d11c      	bne.n	8008a0e <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	6819      	ldr	r1, [r3, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f000 fa89 	bl	8008efa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	699a      	ldr	r2, [r3, #24]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80089f6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6999      	ldr	r1, [r3, #24]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	021a      	lsls	r2, r3, #8
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	619a      	str	r2, [r3, #24]
 8008a0c:	e03a      	b.n	8008a84 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2b08      	cmp	r3, #8
 8008a12:	d11b      	bne.n	8008a4c <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6818      	ldr	r0, [r3, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	6819      	ldr	r1, [r3, #0]
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	f000 fad6 	bl	8008fd4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	69da      	ldr	r2, [r3, #28]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 020c 	bic.w	r2, r2, #12
 8008a36:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	69d9      	ldr	r1, [r3, #28]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	689a      	ldr	r2, [r3, #8]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	61da      	str	r2, [r3, #28]
 8008a4a:	e01b      	b.n	8008a84 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6818      	ldr	r0, [r3, #0]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	6819      	ldr	r1, [r3, #0]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	685a      	ldr	r2, [r3, #4]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	f000 faf6 	bl	800904c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	69da      	ldr	r2, [r3, #28]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008a6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	69d9      	ldr	r1, [r3, #28]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	021a      	lsls	r2, r3, #8
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}
	...

08008a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d101      	bne.n	8008ab0 <HAL_TIM_ConfigClockSource+0x18>
 8008aac:	2302      	movs	r3, #2
 8008aae:	e0db      	b.n	8008c68 <HAL_TIM_ConfigClockSource+0x1d0>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	4b69      	ldr	r3, [pc, #420]	; (8008c70 <HAL_TIM_ConfigClockSource+0x1d8>)
 8008acc:	4013      	ands	r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ad6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a63      	ldr	r2, [pc, #396]	; (8008c74 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	f000 80a9 	beq.w	8008c3e <HAL_TIM_ConfigClockSource+0x1a6>
 8008aec:	4a61      	ldr	r2, [pc, #388]	; (8008c74 <HAL_TIM_ConfigClockSource+0x1dc>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	f200 80ae 	bhi.w	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008af4:	4a60      	ldr	r2, [pc, #384]	; (8008c78 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	f000 80a1 	beq.w	8008c3e <HAL_TIM_ConfigClockSource+0x1a6>
 8008afc:	4a5e      	ldr	r2, [pc, #376]	; (8008c78 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	f200 80a6 	bhi.w	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b04:	4a5d      	ldr	r2, [pc, #372]	; (8008c7c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	f000 8099 	beq.w	8008c3e <HAL_TIM_ConfigClockSource+0x1a6>
 8008b0c:	4a5b      	ldr	r2, [pc, #364]	; (8008c7c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	f200 809e 	bhi.w	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b18:	f000 8091 	beq.w	8008c3e <HAL_TIM_ConfigClockSource+0x1a6>
 8008b1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008b20:	f200 8096 	bhi.w	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b28:	f000 8089 	beq.w	8008c3e <HAL_TIM_ConfigClockSource+0x1a6>
 8008b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b30:	f200 808e 	bhi.w	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b38:	d03e      	beq.n	8008bb8 <HAL_TIM_ConfigClockSource+0x120>
 8008b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b3e:	f200 8087 	bhi.w	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b46:	f000 8085 	beq.w	8008c54 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b4e:	d87f      	bhi.n	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b50:	2b70      	cmp	r3, #112	; 0x70
 8008b52:	d01a      	beq.n	8008b8a <HAL_TIM_ConfigClockSource+0xf2>
 8008b54:	2b70      	cmp	r3, #112	; 0x70
 8008b56:	d87b      	bhi.n	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b58:	2b60      	cmp	r3, #96	; 0x60
 8008b5a:	d050      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0x166>
 8008b5c:	2b60      	cmp	r3, #96	; 0x60
 8008b5e:	d877      	bhi.n	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b60:	2b50      	cmp	r3, #80	; 0x50
 8008b62:	d03c      	beq.n	8008bde <HAL_TIM_ConfigClockSource+0x146>
 8008b64:	2b50      	cmp	r3, #80	; 0x50
 8008b66:	d873      	bhi.n	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b68:	2b40      	cmp	r3, #64	; 0x40
 8008b6a:	d058      	beq.n	8008c1e <HAL_TIM_ConfigClockSource+0x186>
 8008b6c:	2b40      	cmp	r3, #64	; 0x40
 8008b6e:	d86f      	bhi.n	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b70:	2b30      	cmp	r3, #48	; 0x30
 8008b72:	d064      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x1a6>
 8008b74:	2b30      	cmp	r3, #48	; 0x30
 8008b76:	d86b      	bhi.n	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b78:	2b20      	cmp	r3, #32
 8008b7a:	d060      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x1a6>
 8008b7c:	2b20      	cmp	r3, #32
 8008b7e:	d867      	bhi.n	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d05c      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x1a6>
 8008b84:	2b10      	cmp	r3, #16
 8008b86:	d05a      	beq.n	8008c3e <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008b88:	e062      	b.n	8008c50 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6818      	ldr	r0, [r3, #0]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	6899      	ldr	r1, [r3, #8]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f000 fab3 	bl	8009104 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68fa      	ldr	r2, [r7, #12]
 8008bb4:	609a      	str	r2, [r3, #8]
      break;
 8008bb6:	e04e      	b.n	8008c56 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	6899      	ldr	r1, [r3, #8]
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f000 fa9c 	bl	8009104 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689a      	ldr	r2, [r3, #8]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008bda:	609a      	str	r2, [r3, #8]
      break;
 8008bdc:	e03b      	b.n	8008c56 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	6859      	ldr	r1, [r3, #4]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	461a      	mov	r2, r3
 8008bec:	f000 f956 	bl	8008e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2150      	movs	r1, #80	; 0x50
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fa66 	bl	80090c8 <TIM_ITRx_SetConfig>
      break;
 8008bfc:	e02b      	b.n	8008c56 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	6859      	ldr	r1, [r3, #4]
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f000 f9b2 	bl	8008f74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2160      	movs	r1, #96	; 0x60
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 fa56 	bl	80090c8 <TIM_ITRx_SetConfig>
      break;
 8008c1c:	e01b      	b.n	8008c56 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6818      	ldr	r0, [r3, #0]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	6859      	ldr	r1, [r3, #4]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f000 f936 	bl	8008e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2140      	movs	r1, #64	; 0x40
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fa46 	bl	80090c8 <TIM_ITRx_SetConfig>
      break;
 8008c3c:	e00b      	b.n	8008c56 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f000 fa3d 	bl	80090c8 <TIM_ITRx_SetConfig>
        break;
 8008c4e:	e002      	b.n	8008c56 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008c50:	bf00      	nop
 8008c52:	e000      	b.n	8008c56 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 8008c54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	ffceff88 	.word	0xffceff88
 8008c74:	00100040 	.word	0x00100040
 8008c78:	00100030 	.word	0x00100030
 8008c7c:	00100020 	.word	0x00100020

08008c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a40      	ldr	r2, [pc, #256]	; (8008d94 <TIM_Base_SetConfig+0x114>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d013      	beq.n	8008cc0 <TIM_Base_SetConfig+0x40>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9e:	d00f      	beq.n	8008cc0 <TIM_Base_SetConfig+0x40>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a3d      	ldr	r2, [pc, #244]	; (8008d98 <TIM_Base_SetConfig+0x118>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d00b      	beq.n	8008cc0 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a3c      	ldr	r2, [pc, #240]	; (8008d9c <TIM_Base_SetConfig+0x11c>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d007      	beq.n	8008cc0 <TIM_Base_SetConfig+0x40>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a3b      	ldr	r2, [pc, #236]	; (8008da0 <TIM_Base_SetConfig+0x120>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d003      	beq.n	8008cc0 <TIM_Base_SetConfig+0x40>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a3a      	ldr	r2, [pc, #232]	; (8008da4 <TIM_Base_SetConfig+0x124>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d108      	bne.n	8008cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a2f      	ldr	r2, [pc, #188]	; (8008d94 <TIM_Base_SetConfig+0x114>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d01f      	beq.n	8008d1a <TIM_Base_SetConfig+0x9a>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce0:	d01b      	beq.n	8008d1a <TIM_Base_SetConfig+0x9a>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a2c      	ldr	r2, [pc, #176]	; (8008d98 <TIM_Base_SetConfig+0x118>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d017      	beq.n	8008d1a <TIM_Base_SetConfig+0x9a>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a2b      	ldr	r2, [pc, #172]	; (8008d9c <TIM_Base_SetConfig+0x11c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d013      	beq.n	8008d1a <TIM_Base_SetConfig+0x9a>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a2a      	ldr	r2, [pc, #168]	; (8008da0 <TIM_Base_SetConfig+0x120>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d00f      	beq.n	8008d1a <TIM_Base_SetConfig+0x9a>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a29      	ldr	r2, [pc, #164]	; (8008da4 <TIM_Base_SetConfig+0x124>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d00b      	beq.n	8008d1a <TIM_Base_SetConfig+0x9a>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a28      	ldr	r2, [pc, #160]	; (8008da8 <TIM_Base_SetConfig+0x128>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d007      	beq.n	8008d1a <TIM_Base_SetConfig+0x9a>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a27      	ldr	r2, [pc, #156]	; (8008dac <TIM_Base_SetConfig+0x12c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d003      	beq.n	8008d1a <TIM_Base_SetConfig+0x9a>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a26      	ldr	r2, [pc, #152]	; (8008db0 <TIM_Base_SetConfig+0x130>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d108      	bne.n	8008d2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	4a10      	ldr	r2, [pc, #64]	; (8008d94 <TIM_Base_SetConfig+0x114>)
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d00f      	beq.n	8008d78 <TIM_Base_SetConfig+0xf8>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	4a12      	ldr	r2, [pc, #72]	; (8008da4 <TIM_Base_SetConfig+0x124>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d00b      	beq.n	8008d78 <TIM_Base_SetConfig+0xf8>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4a11      	ldr	r2, [pc, #68]	; (8008da8 <TIM_Base_SetConfig+0x128>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d007      	beq.n	8008d78 <TIM_Base_SetConfig+0xf8>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a10      	ldr	r2, [pc, #64]	; (8008dac <TIM_Base_SetConfig+0x12c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d003      	beq.n	8008d78 <TIM_Base_SetConfig+0xf8>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a0f      	ldr	r2, [pc, #60]	; (8008db0 <TIM_Base_SetConfig+0x130>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d103      	bne.n	8008d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	691a      	ldr	r2, [r3, #16]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	615a      	str	r2, [r3, #20]
}
 8008d86:	bf00      	nop
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	40010000 	.word	0x40010000
 8008d98:	40000400 	.word	0x40000400
 8008d9c:	40000800 	.word	0x40000800
 8008da0:	40000c00 	.word	0x40000c00
 8008da4:	40010400 	.word	0x40010400
 8008da8:	40014000 	.word	0x40014000
 8008dac:	40014400 	.word	0x40014400
 8008db0:	40014800 	.word	0x40014800

08008db4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6a1b      	ldr	r3, [r3, #32]
 8008dc6:	f023 0201 	bic.w	r2, r3, #1
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	699b      	ldr	r3, [r3, #24]
 8008dd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	6a1b      	ldr	r3, [r3, #32]
 8008dd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	4a28      	ldr	r2, [pc, #160]	; (8008e80 <TIM_TI1_SetConfig+0xcc>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d01b      	beq.n	8008e1a <TIM_TI1_SetConfig+0x66>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de8:	d017      	beq.n	8008e1a <TIM_TI1_SetConfig+0x66>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4a25      	ldr	r2, [pc, #148]	; (8008e84 <TIM_TI1_SetConfig+0xd0>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d013      	beq.n	8008e1a <TIM_TI1_SetConfig+0x66>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4a24      	ldr	r2, [pc, #144]	; (8008e88 <TIM_TI1_SetConfig+0xd4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d00f      	beq.n	8008e1a <TIM_TI1_SetConfig+0x66>
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4a23      	ldr	r2, [pc, #140]	; (8008e8c <TIM_TI1_SetConfig+0xd8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d00b      	beq.n	8008e1a <TIM_TI1_SetConfig+0x66>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4a22      	ldr	r2, [pc, #136]	; (8008e90 <TIM_TI1_SetConfig+0xdc>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d007      	beq.n	8008e1a <TIM_TI1_SetConfig+0x66>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	4a21      	ldr	r2, [pc, #132]	; (8008e94 <TIM_TI1_SetConfig+0xe0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d003      	beq.n	8008e1a <TIM_TI1_SetConfig+0x66>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a20      	ldr	r2, [pc, #128]	; (8008e98 <TIM_TI1_SetConfig+0xe4>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d101      	bne.n	8008e1e <TIM_TI1_SetConfig+0x6a>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e000      	b.n	8008e20 <TIM_TI1_SetConfig+0x6c>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d008      	beq.n	8008e36 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f023 0303 	bic.w	r3, r3, #3
 8008e2a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	617b      	str	r3, [r7, #20]
 8008e34:	e003      	b.n	8008e3e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f043 0301 	orr.w	r3, r3, #1
 8008e3c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	f023 030a 	bic.w	r3, r3, #10
 8008e58:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	f003 030a 	and.w	r3, r3, #10
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	693a      	ldr	r2, [r7, #16]
 8008e70:	621a      	str	r2, [r3, #32]
}
 8008e72:	bf00      	nop
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	40010000 	.word	0x40010000
 8008e84:	40000400 	.word	0x40000400
 8008e88:	40000800 	.word	0x40000800
 8008e8c:	40000c00 	.word	0x40000c00
 8008e90:	40010400 	.word	0x40010400
 8008e94:	40001800 	.word	0x40001800
 8008e98:	40014000 	.word	0x40014000

08008e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b087      	sub	sp, #28
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6a1b      	ldr	r3, [r3, #32]
 8008eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6a1b      	ldr	r3, [r3, #32]
 8008eb2:	f023 0201 	bic.w	r2, r3, #1
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	011b      	lsls	r3, r3, #4
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f023 030a 	bic.w	r3, r3, #10
 8008ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	621a      	str	r2, [r3, #32]
}
 8008eee:	bf00      	nop
 8008ef0:	371c      	adds	r7, #28
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr

08008efa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008efa:	b480      	push	{r7}
 8008efc:	b087      	sub	sp, #28
 8008efe:	af00      	add	r7, sp, #0
 8008f00:	60f8      	str	r0, [r7, #12]
 8008f02:	60b9      	str	r1, [r7, #8]
 8008f04:	607a      	str	r2, [r7, #4]
 8008f06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6a1b      	ldr	r3, [r3, #32]
 8008f0c:	f023 0210 	bic.w	r2, r3, #16
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	021b      	lsls	r3, r3, #8
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	031b      	lsls	r3, r3, #12
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	621a      	str	r2, [r3, #32]
}
 8008f68:	bf00      	nop
 8008f6a:	371c      	adds	r7, #28
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f72:	4770      	bx	lr

08008f74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f74:	b480      	push	{r7}
 8008f76:	b087      	sub	sp, #28
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	f023 0210 	bic.w	r2, r3, #16
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	031b      	lsls	r3, r3, #12
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	011b      	lsls	r3, r3, #4
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	621a      	str	r2, [r3, #32]
}
 8008fc8:	bf00      	nop
 8008fca:	371c      	adds	r7, #28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	f023 0303 	bic.w	r3, r3, #3
 8009000:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4313      	orrs	r3, r2
 8009008:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009010:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	011b      	lsls	r3, r3, #4
 8009016:	b2db      	uxtb	r3, r3
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4313      	orrs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009024:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	021b      	lsls	r3, r3, #8
 800902a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	4313      	orrs	r3, r2
 8009032:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	697a      	ldr	r2, [r7, #20]
 8009038:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	693a      	ldr	r2, [r7, #16]
 800903e:	621a      	str	r2, [r3, #32]
}
 8009040:	bf00      	nop
 8009042:	371c      	adds	r7, #28
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009078:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	021b      	lsls	r3, r3, #8
 800907e:	697a      	ldr	r2, [r7, #20]
 8009080:	4313      	orrs	r3, r2
 8009082:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800908a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	031b      	lsls	r3, r3, #12
 8009090:	b29b      	uxth	r3, r3
 8009092:	697a      	ldr	r2, [r7, #20]
 8009094:	4313      	orrs	r3, r2
 8009096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800909e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	031b      	lsls	r3, r3, #12
 80090a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	693a      	ldr	r2, [r7, #16]
 80090b8:	621a      	str	r2, [r3, #32]
}
 80090ba:	bf00      	nop
 80090bc:	371c      	adds	r7, #28
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
	...

080090c8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <TIM_ITRx_SetConfig+0x38>)
 80090dc:	4013      	ands	r3, r2
 80090de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090e0:	683a      	ldr	r2, [r7, #0]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	f043 0307 	orr.w	r3, r3, #7
 80090ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	609a      	str	r2, [r3, #8]
}
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	ffcfff8f 	.word	0xffcfff8f

08009104 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009104:	b480      	push	{r7}
 8009106:	b087      	sub	sp, #28
 8009108:	af00      	add	r7, sp, #0
 800910a:	60f8      	str	r0, [r7, #12]
 800910c:	60b9      	str	r1, [r7, #8]
 800910e:	607a      	str	r2, [r7, #4]
 8009110:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800911e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	021a      	lsls	r2, r3, #8
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	431a      	orrs	r2, r3
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4313      	orrs	r3, r2
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	4313      	orrs	r3, r2
 8009130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	609a      	str	r2, [r3, #8]
}
 8009138:	bf00      	nop
 800913a:	371c      	adds	r7, #28
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009154:	2b01      	cmp	r3, #1
 8009156:	d101      	bne.n	800915c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009158:	2302      	movs	r3, #2
 800915a:	e068      	b.n	800922e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2202      	movs	r2, #2
 8009168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a2e      	ldr	r2, [pc, #184]	; (800923c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d004      	beq.n	8009190 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a2d      	ldr	r2, [pc, #180]	; (8009240 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d108      	bne.n	80091a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009196:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a1e      	ldr	r2, [pc, #120]	; (800923c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d01d      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091ce:	d018      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a1b      	ldr	r2, [pc, #108]	; (8009244 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d013      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a1a      	ldr	r2, [pc, #104]	; (8009248 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00e      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a18      	ldr	r2, [pc, #96]	; (800924c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d009      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a13      	ldr	r2, [pc, #76]	; (8009240 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d004      	beq.n	8009202 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4a14      	ldr	r2, [pc, #80]	; (8009250 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d10c      	bne.n	800921c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	4313      	orrs	r3, r2
 8009212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68ba      	ldr	r2, [r7, #8]
 800921a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	40010000 	.word	0x40010000
 8009240:	40010400 	.word	0x40010400
 8009244:	40000400 	.word	0x40000400
 8009248:	40000800 	.word	0x40000800
 800924c:	40000c00 	.word	0x40000c00
 8009250:	40001800 	.word	0x40001800

08009254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d101      	bne.n	8009266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e042      	b.n	80092ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800926c:	2b00      	cmp	r3, #0
 800926e:	d106      	bne.n	800927e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f7f8 f889 	bl	8001390 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2224      	movs	r2, #36	; 0x24
 8009282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	681a      	ldr	r2, [r3, #0]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f022 0201 	bic.w	r2, r2, #1
 8009294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f82c 	bl	80092f4 <UART_SetConfig>
 800929c:	4603      	mov	r3, r0
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d101      	bne.n	80092a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e022      	b.n	80092ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d002      	beq.n	80092b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fe7e 	bl	8009fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80092c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	689a      	ldr	r2, [r3, #8]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80092d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f042 0201 	orr.w	r2, r2, #1
 80092e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 ff05 	bl	800a0f4 <UART_CheckIdleState>
 80092ea:	4603      	mov	r3, r0
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092f4:	b5b0      	push	{r4, r5, r7, lr}
 80092f6:	b08e      	sub	sp, #56	; 0x38
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	689a      	ldr	r2, [r3, #8]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	431a      	orrs	r2, r3
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	431a      	orrs	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	69db      	ldr	r3, [r3, #28]
 8009316:	4313      	orrs	r3, r2
 8009318:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	4bbf      	ldr	r3, [pc, #764]	; (8009620 <UART_SetConfig+0x32c>)
 8009322:	4013      	ands	r3, r2
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6812      	ldr	r2, [r2, #0]
 8009328:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800932a:	430b      	orrs	r3, r1
 800932c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68da      	ldr	r2, [r3, #12]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4ab5      	ldr	r2, [pc, #724]	; (8009624 <UART_SetConfig+0x330>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d004      	beq.n	800935e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a1b      	ldr	r3, [r3, #32]
 8009358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800935a:	4313      	orrs	r3, r2
 800935c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	689a      	ldr	r2, [r3, #8]
 8009364:	4bb0      	ldr	r3, [pc, #704]	; (8009628 <UART_SetConfig+0x334>)
 8009366:	4013      	ands	r3, r2
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6812      	ldr	r2, [r2, #0]
 800936c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800936e:	430b      	orrs	r3, r1
 8009370:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009378:	f023 010f 	bic.w	r1, r3, #15
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4aa7      	ldr	r2, [pc, #668]	; (800962c <UART_SetConfig+0x338>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d176      	bne.n	8009480 <UART_SetConfig+0x18c>
 8009392:	4ba7      	ldr	r3, [pc, #668]	; (8009630 <UART_SetConfig+0x33c>)
 8009394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800939a:	2b28      	cmp	r3, #40	; 0x28
 800939c:	d86c      	bhi.n	8009478 <UART_SetConfig+0x184>
 800939e:	a201      	add	r2, pc, #4	; (adr r2, 80093a4 <UART_SetConfig+0xb0>)
 80093a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a4:	08009449 	.word	0x08009449
 80093a8:	08009479 	.word	0x08009479
 80093ac:	08009479 	.word	0x08009479
 80093b0:	08009479 	.word	0x08009479
 80093b4:	08009479 	.word	0x08009479
 80093b8:	08009479 	.word	0x08009479
 80093bc:	08009479 	.word	0x08009479
 80093c0:	08009479 	.word	0x08009479
 80093c4:	08009451 	.word	0x08009451
 80093c8:	08009479 	.word	0x08009479
 80093cc:	08009479 	.word	0x08009479
 80093d0:	08009479 	.word	0x08009479
 80093d4:	08009479 	.word	0x08009479
 80093d8:	08009479 	.word	0x08009479
 80093dc:	08009479 	.word	0x08009479
 80093e0:	08009479 	.word	0x08009479
 80093e4:	08009459 	.word	0x08009459
 80093e8:	08009479 	.word	0x08009479
 80093ec:	08009479 	.word	0x08009479
 80093f0:	08009479 	.word	0x08009479
 80093f4:	08009479 	.word	0x08009479
 80093f8:	08009479 	.word	0x08009479
 80093fc:	08009479 	.word	0x08009479
 8009400:	08009479 	.word	0x08009479
 8009404:	08009461 	.word	0x08009461
 8009408:	08009479 	.word	0x08009479
 800940c:	08009479 	.word	0x08009479
 8009410:	08009479 	.word	0x08009479
 8009414:	08009479 	.word	0x08009479
 8009418:	08009479 	.word	0x08009479
 800941c:	08009479 	.word	0x08009479
 8009420:	08009479 	.word	0x08009479
 8009424:	08009469 	.word	0x08009469
 8009428:	08009479 	.word	0x08009479
 800942c:	08009479 	.word	0x08009479
 8009430:	08009479 	.word	0x08009479
 8009434:	08009479 	.word	0x08009479
 8009438:	08009479 	.word	0x08009479
 800943c:	08009479 	.word	0x08009479
 8009440:	08009479 	.word	0x08009479
 8009444:	08009471 	.word	0x08009471
 8009448:	2301      	movs	r3, #1
 800944a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800944e:	e326      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009450:	2304      	movs	r3, #4
 8009452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009456:	e322      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009458:	2308      	movs	r3, #8
 800945a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800945e:	e31e      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009460:	2310      	movs	r3, #16
 8009462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009466:	e31a      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009468:	2320      	movs	r3, #32
 800946a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800946e:	e316      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009470:	2340      	movs	r3, #64	; 0x40
 8009472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009476:	e312      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009478:	2380      	movs	r3, #128	; 0x80
 800947a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800947e:	e30e      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a6b      	ldr	r2, [pc, #428]	; (8009634 <UART_SetConfig+0x340>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d130      	bne.n	80094ec <UART_SetConfig+0x1f8>
 800948a:	4b69      	ldr	r3, [pc, #420]	; (8009630 <UART_SetConfig+0x33c>)
 800948c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948e:	f003 0307 	and.w	r3, r3, #7
 8009492:	2b05      	cmp	r3, #5
 8009494:	d826      	bhi.n	80094e4 <UART_SetConfig+0x1f0>
 8009496:	a201      	add	r2, pc, #4	; (adr r2, 800949c <UART_SetConfig+0x1a8>)
 8009498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800949c:	080094b5 	.word	0x080094b5
 80094a0:	080094bd 	.word	0x080094bd
 80094a4:	080094c5 	.word	0x080094c5
 80094a8:	080094cd 	.word	0x080094cd
 80094ac:	080094d5 	.word	0x080094d5
 80094b0:	080094dd 	.word	0x080094dd
 80094b4:	2300      	movs	r3, #0
 80094b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ba:	e2f0      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80094bc:	2304      	movs	r3, #4
 80094be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094c2:	e2ec      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80094c4:	2308      	movs	r3, #8
 80094c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ca:	e2e8      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80094cc:	2310      	movs	r3, #16
 80094ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094d2:	e2e4      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80094d4:	2320      	movs	r3, #32
 80094d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094da:	e2e0      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80094dc:	2340      	movs	r3, #64	; 0x40
 80094de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094e2:	e2dc      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80094e4:	2380      	movs	r3, #128	; 0x80
 80094e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80094ea:	e2d8      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a51      	ldr	r2, [pc, #324]	; (8009638 <UART_SetConfig+0x344>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d130      	bne.n	8009558 <UART_SetConfig+0x264>
 80094f6:	4b4e      	ldr	r3, [pc, #312]	; (8009630 <UART_SetConfig+0x33c>)
 80094f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fa:	f003 0307 	and.w	r3, r3, #7
 80094fe:	2b05      	cmp	r3, #5
 8009500:	d826      	bhi.n	8009550 <UART_SetConfig+0x25c>
 8009502:	a201      	add	r2, pc, #4	; (adr r2, 8009508 <UART_SetConfig+0x214>)
 8009504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009508:	08009521 	.word	0x08009521
 800950c:	08009529 	.word	0x08009529
 8009510:	08009531 	.word	0x08009531
 8009514:	08009539 	.word	0x08009539
 8009518:	08009541 	.word	0x08009541
 800951c:	08009549 	.word	0x08009549
 8009520:	2300      	movs	r3, #0
 8009522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009526:	e2ba      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009528:	2304      	movs	r3, #4
 800952a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800952e:	e2b6      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009530:	2308      	movs	r3, #8
 8009532:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009536:	e2b2      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009538:	2310      	movs	r3, #16
 800953a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800953e:	e2ae      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009540:	2320      	movs	r3, #32
 8009542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009546:	e2aa      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009548:	2340      	movs	r3, #64	; 0x40
 800954a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800954e:	e2a6      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009550:	2380      	movs	r3, #128	; 0x80
 8009552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009556:	e2a2      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a37      	ldr	r2, [pc, #220]	; (800963c <UART_SetConfig+0x348>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d130      	bne.n	80095c4 <UART_SetConfig+0x2d0>
 8009562:	4b33      	ldr	r3, [pc, #204]	; (8009630 <UART_SetConfig+0x33c>)
 8009564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009566:	f003 0307 	and.w	r3, r3, #7
 800956a:	2b05      	cmp	r3, #5
 800956c:	d826      	bhi.n	80095bc <UART_SetConfig+0x2c8>
 800956e:	a201      	add	r2, pc, #4	; (adr r2, 8009574 <UART_SetConfig+0x280>)
 8009570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009574:	0800958d 	.word	0x0800958d
 8009578:	08009595 	.word	0x08009595
 800957c:	0800959d 	.word	0x0800959d
 8009580:	080095a5 	.word	0x080095a5
 8009584:	080095ad 	.word	0x080095ad
 8009588:	080095b5 	.word	0x080095b5
 800958c:	2300      	movs	r3, #0
 800958e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009592:	e284      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009594:	2304      	movs	r3, #4
 8009596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800959a:	e280      	b.n	8009a9e <UART_SetConfig+0x7aa>
 800959c:	2308      	movs	r3, #8
 800959e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095a2:	e27c      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80095a4:	2310      	movs	r3, #16
 80095a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095aa:	e278      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80095ac:	2320      	movs	r3, #32
 80095ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095b2:	e274      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80095b4:	2340      	movs	r3, #64	; 0x40
 80095b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ba:	e270      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80095bc:	2380      	movs	r3, #128	; 0x80
 80095be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095c2:	e26c      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a1d      	ldr	r2, [pc, #116]	; (8009640 <UART_SetConfig+0x34c>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d142      	bne.n	8009654 <UART_SetConfig+0x360>
 80095ce:	4b18      	ldr	r3, [pc, #96]	; (8009630 <UART_SetConfig+0x33c>)
 80095d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095d2:	f003 0307 	and.w	r3, r3, #7
 80095d6:	2b05      	cmp	r3, #5
 80095d8:	d838      	bhi.n	800964c <UART_SetConfig+0x358>
 80095da:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <UART_SetConfig+0x2ec>)
 80095dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e0:	080095f9 	.word	0x080095f9
 80095e4:	08009601 	.word	0x08009601
 80095e8:	08009609 	.word	0x08009609
 80095ec:	08009611 	.word	0x08009611
 80095f0:	08009619 	.word	0x08009619
 80095f4:	08009645 	.word	0x08009645
 80095f8:	2300      	movs	r3, #0
 80095fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fe:	e24e      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009600:	2304      	movs	r3, #4
 8009602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009606:	e24a      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009608:	2308      	movs	r3, #8
 800960a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960e:	e246      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009610:	2310      	movs	r3, #16
 8009612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009616:	e242      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009618:	2320      	movs	r3, #32
 800961a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800961e:	e23e      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009620:	cfff69f3 	.word	0xcfff69f3
 8009624:	58000c00 	.word	0x58000c00
 8009628:	11fff4ff 	.word	0x11fff4ff
 800962c:	40011000 	.word	0x40011000
 8009630:	58024400 	.word	0x58024400
 8009634:	40004400 	.word	0x40004400
 8009638:	40004800 	.word	0x40004800
 800963c:	40004c00 	.word	0x40004c00
 8009640:	40005000 	.word	0x40005000
 8009644:	2340      	movs	r3, #64	; 0x40
 8009646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964a:	e228      	b.n	8009a9e <UART_SetConfig+0x7aa>
 800964c:	2380      	movs	r3, #128	; 0x80
 800964e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009652:	e224      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4ab1      	ldr	r2, [pc, #708]	; (8009920 <UART_SetConfig+0x62c>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d176      	bne.n	800974c <UART_SetConfig+0x458>
 800965e:	4bb1      	ldr	r3, [pc, #708]	; (8009924 <UART_SetConfig+0x630>)
 8009660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009662:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009666:	2b28      	cmp	r3, #40	; 0x28
 8009668:	d86c      	bhi.n	8009744 <UART_SetConfig+0x450>
 800966a:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <UART_SetConfig+0x37c>)
 800966c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009670:	08009715 	.word	0x08009715
 8009674:	08009745 	.word	0x08009745
 8009678:	08009745 	.word	0x08009745
 800967c:	08009745 	.word	0x08009745
 8009680:	08009745 	.word	0x08009745
 8009684:	08009745 	.word	0x08009745
 8009688:	08009745 	.word	0x08009745
 800968c:	08009745 	.word	0x08009745
 8009690:	0800971d 	.word	0x0800971d
 8009694:	08009745 	.word	0x08009745
 8009698:	08009745 	.word	0x08009745
 800969c:	08009745 	.word	0x08009745
 80096a0:	08009745 	.word	0x08009745
 80096a4:	08009745 	.word	0x08009745
 80096a8:	08009745 	.word	0x08009745
 80096ac:	08009745 	.word	0x08009745
 80096b0:	08009725 	.word	0x08009725
 80096b4:	08009745 	.word	0x08009745
 80096b8:	08009745 	.word	0x08009745
 80096bc:	08009745 	.word	0x08009745
 80096c0:	08009745 	.word	0x08009745
 80096c4:	08009745 	.word	0x08009745
 80096c8:	08009745 	.word	0x08009745
 80096cc:	08009745 	.word	0x08009745
 80096d0:	0800972d 	.word	0x0800972d
 80096d4:	08009745 	.word	0x08009745
 80096d8:	08009745 	.word	0x08009745
 80096dc:	08009745 	.word	0x08009745
 80096e0:	08009745 	.word	0x08009745
 80096e4:	08009745 	.word	0x08009745
 80096e8:	08009745 	.word	0x08009745
 80096ec:	08009745 	.word	0x08009745
 80096f0:	08009735 	.word	0x08009735
 80096f4:	08009745 	.word	0x08009745
 80096f8:	08009745 	.word	0x08009745
 80096fc:	08009745 	.word	0x08009745
 8009700:	08009745 	.word	0x08009745
 8009704:	08009745 	.word	0x08009745
 8009708:	08009745 	.word	0x08009745
 800970c:	08009745 	.word	0x08009745
 8009710:	0800973d 	.word	0x0800973d
 8009714:	2301      	movs	r3, #1
 8009716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800971a:	e1c0      	b.n	8009a9e <UART_SetConfig+0x7aa>
 800971c:	2304      	movs	r3, #4
 800971e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009722:	e1bc      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009724:	2308      	movs	r3, #8
 8009726:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972a:	e1b8      	b.n	8009a9e <UART_SetConfig+0x7aa>
 800972c:	2310      	movs	r3, #16
 800972e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009732:	e1b4      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009734:	2320      	movs	r3, #32
 8009736:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973a:	e1b0      	b.n	8009a9e <UART_SetConfig+0x7aa>
 800973c:	2340      	movs	r3, #64	; 0x40
 800973e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009742:	e1ac      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009744:	2380      	movs	r3, #128	; 0x80
 8009746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974a:	e1a8      	b.n	8009a9e <UART_SetConfig+0x7aa>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a75      	ldr	r2, [pc, #468]	; (8009928 <UART_SetConfig+0x634>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d130      	bne.n	80097b8 <UART_SetConfig+0x4c4>
 8009756:	4b73      	ldr	r3, [pc, #460]	; (8009924 <UART_SetConfig+0x630>)
 8009758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800975a:	f003 0307 	and.w	r3, r3, #7
 800975e:	2b05      	cmp	r3, #5
 8009760:	d826      	bhi.n	80097b0 <UART_SetConfig+0x4bc>
 8009762:	a201      	add	r2, pc, #4	; (adr r2, 8009768 <UART_SetConfig+0x474>)
 8009764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009768:	08009781 	.word	0x08009781
 800976c:	08009789 	.word	0x08009789
 8009770:	08009791 	.word	0x08009791
 8009774:	08009799 	.word	0x08009799
 8009778:	080097a1 	.word	0x080097a1
 800977c:	080097a9 	.word	0x080097a9
 8009780:	2300      	movs	r3, #0
 8009782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009786:	e18a      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009788:	2304      	movs	r3, #4
 800978a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800978e:	e186      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009790:	2308      	movs	r3, #8
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009796:	e182      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009798:	2310      	movs	r3, #16
 800979a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979e:	e17e      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80097a0:	2320      	movs	r3, #32
 80097a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a6:	e17a      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80097a8:	2340      	movs	r3, #64	; 0x40
 80097aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097ae:	e176      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80097b0:	2380      	movs	r3, #128	; 0x80
 80097b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b6:	e172      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a5b      	ldr	r2, [pc, #364]	; (800992c <UART_SetConfig+0x638>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d130      	bne.n	8009824 <UART_SetConfig+0x530>
 80097c2:	4b58      	ldr	r3, [pc, #352]	; (8009924 <UART_SetConfig+0x630>)
 80097c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c6:	f003 0307 	and.w	r3, r3, #7
 80097ca:	2b05      	cmp	r3, #5
 80097cc:	d826      	bhi.n	800981c <UART_SetConfig+0x528>
 80097ce:	a201      	add	r2, pc, #4	; (adr r2, 80097d4 <UART_SetConfig+0x4e0>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	080097ed 	.word	0x080097ed
 80097d8:	080097f5 	.word	0x080097f5
 80097dc:	080097fd 	.word	0x080097fd
 80097e0:	08009805 	.word	0x08009805
 80097e4:	0800980d 	.word	0x0800980d
 80097e8:	08009815 	.word	0x08009815
 80097ec:	2300      	movs	r3, #0
 80097ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097f2:	e154      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80097f4:	2304      	movs	r3, #4
 80097f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097fa:	e150      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80097fc:	2308      	movs	r3, #8
 80097fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009802:	e14c      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009804:	2310      	movs	r3, #16
 8009806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800980a:	e148      	b.n	8009a9e <UART_SetConfig+0x7aa>
 800980c:	2320      	movs	r3, #32
 800980e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009812:	e144      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800981a:	e140      	b.n	8009a9e <UART_SetConfig+0x7aa>
 800981c:	2380      	movs	r3, #128	; 0x80
 800981e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009822:	e13c      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a41      	ldr	r2, [pc, #260]	; (8009930 <UART_SetConfig+0x63c>)
 800982a:	4293      	cmp	r3, r2
 800982c:	f040 8082 	bne.w	8009934 <UART_SetConfig+0x640>
 8009830:	4b3c      	ldr	r3, [pc, #240]	; (8009924 <UART_SetConfig+0x630>)
 8009832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009838:	2b28      	cmp	r3, #40	; 0x28
 800983a:	d86d      	bhi.n	8009918 <UART_SetConfig+0x624>
 800983c:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <UART_SetConfig+0x550>)
 800983e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009842:	bf00      	nop
 8009844:	080098e9 	.word	0x080098e9
 8009848:	08009919 	.word	0x08009919
 800984c:	08009919 	.word	0x08009919
 8009850:	08009919 	.word	0x08009919
 8009854:	08009919 	.word	0x08009919
 8009858:	08009919 	.word	0x08009919
 800985c:	08009919 	.word	0x08009919
 8009860:	08009919 	.word	0x08009919
 8009864:	080098f1 	.word	0x080098f1
 8009868:	08009919 	.word	0x08009919
 800986c:	08009919 	.word	0x08009919
 8009870:	08009919 	.word	0x08009919
 8009874:	08009919 	.word	0x08009919
 8009878:	08009919 	.word	0x08009919
 800987c:	08009919 	.word	0x08009919
 8009880:	08009919 	.word	0x08009919
 8009884:	080098f9 	.word	0x080098f9
 8009888:	08009919 	.word	0x08009919
 800988c:	08009919 	.word	0x08009919
 8009890:	08009919 	.word	0x08009919
 8009894:	08009919 	.word	0x08009919
 8009898:	08009919 	.word	0x08009919
 800989c:	08009919 	.word	0x08009919
 80098a0:	08009919 	.word	0x08009919
 80098a4:	08009901 	.word	0x08009901
 80098a8:	08009919 	.word	0x08009919
 80098ac:	08009919 	.word	0x08009919
 80098b0:	08009919 	.word	0x08009919
 80098b4:	08009919 	.word	0x08009919
 80098b8:	08009919 	.word	0x08009919
 80098bc:	08009919 	.word	0x08009919
 80098c0:	08009919 	.word	0x08009919
 80098c4:	08009909 	.word	0x08009909
 80098c8:	08009919 	.word	0x08009919
 80098cc:	08009919 	.word	0x08009919
 80098d0:	08009919 	.word	0x08009919
 80098d4:	08009919 	.word	0x08009919
 80098d8:	08009919 	.word	0x08009919
 80098dc:	08009919 	.word	0x08009919
 80098e0:	08009919 	.word	0x08009919
 80098e4:	08009911 	.word	0x08009911
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ee:	e0d6      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80098f0:	2304      	movs	r3, #4
 80098f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f6:	e0d2      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80098f8:	2308      	movs	r3, #8
 80098fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fe:	e0ce      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009900:	2310      	movs	r3, #16
 8009902:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009906:	e0ca      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009908:	2320      	movs	r3, #32
 800990a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990e:	e0c6      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009910:	2340      	movs	r3, #64	; 0x40
 8009912:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009916:	e0c2      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009918:	2380      	movs	r3, #128	; 0x80
 800991a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991e:	e0be      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009920:	40011400 	.word	0x40011400
 8009924:	58024400 	.word	0x58024400
 8009928:	40007800 	.word	0x40007800
 800992c:	40007c00 	.word	0x40007c00
 8009930:	40011800 	.word	0x40011800
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4aad      	ldr	r2, [pc, #692]	; (8009bf0 <UART_SetConfig+0x8fc>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d176      	bne.n	8009a2c <UART_SetConfig+0x738>
 800993e:	4bad      	ldr	r3, [pc, #692]	; (8009bf4 <UART_SetConfig+0x900>)
 8009940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009946:	2b28      	cmp	r3, #40	; 0x28
 8009948:	d86c      	bhi.n	8009a24 <UART_SetConfig+0x730>
 800994a:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <UART_SetConfig+0x65c>)
 800994c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009950:	080099f5 	.word	0x080099f5
 8009954:	08009a25 	.word	0x08009a25
 8009958:	08009a25 	.word	0x08009a25
 800995c:	08009a25 	.word	0x08009a25
 8009960:	08009a25 	.word	0x08009a25
 8009964:	08009a25 	.word	0x08009a25
 8009968:	08009a25 	.word	0x08009a25
 800996c:	08009a25 	.word	0x08009a25
 8009970:	080099fd 	.word	0x080099fd
 8009974:	08009a25 	.word	0x08009a25
 8009978:	08009a25 	.word	0x08009a25
 800997c:	08009a25 	.word	0x08009a25
 8009980:	08009a25 	.word	0x08009a25
 8009984:	08009a25 	.word	0x08009a25
 8009988:	08009a25 	.word	0x08009a25
 800998c:	08009a25 	.word	0x08009a25
 8009990:	08009a05 	.word	0x08009a05
 8009994:	08009a25 	.word	0x08009a25
 8009998:	08009a25 	.word	0x08009a25
 800999c:	08009a25 	.word	0x08009a25
 80099a0:	08009a25 	.word	0x08009a25
 80099a4:	08009a25 	.word	0x08009a25
 80099a8:	08009a25 	.word	0x08009a25
 80099ac:	08009a25 	.word	0x08009a25
 80099b0:	08009a0d 	.word	0x08009a0d
 80099b4:	08009a25 	.word	0x08009a25
 80099b8:	08009a25 	.word	0x08009a25
 80099bc:	08009a25 	.word	0x08009a25
 80099c0:	08009a25 	.word	0x08009a25
 80099c4:	08009a25 	.word	0x08009a25
 80099c8:	08009a25 	.word	0x08009a25
 80099cc:	08009a25 	.word	0x08009a25
 80099d0:	08009a15 	.word	0x08009a15
 80099d4:	08009a25 	.word	0x08009a25
 80099d8:	08009a25 	.word	0x08009a25
 80099dc:	08009a25 	.word	0x08009a25
 80099e0:	08009a25 	.word	0x08009a25
 80099e4:	08009a25 	.word	0x08009a25
 80099e8:	08009a25 	.word	0x08009a25
 80099ec:	08009a25 	.word	0x08009a25
 80099f0:	08009a1d 	.word	0x08009a1d
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fa:	e050      	b.n	8009a9e <UART_SetConfig+0x7aa>
 80099fc:	2304      	movs	r3, #4
 80099fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a02:	e04c      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a04:	2308      	movs	r3, #8
 8009a06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a0a:	e048      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a12:	e044      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a14:	2320      	movs	r3, #32
 8009a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a1a:	e040      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a1c:	2340      	movs	r3, #64	; 0x40
 8009a1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a22:	e03c      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a24:	2380      	movs	r3, #128	; 0x80
 8009a26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a2a:	e038      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a71      	ldr	r2, [pc, #452]	; (8009bf8 <UART_SetConfig+0x904>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d130      	bne.n	8009a98 <UART_SetConfig+0x7a4>
 8009a36:	4b6f      	ldr	r3, [pc, #444]	; (8009bf4 <UART_SetConfig+0x900>)
 8009a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	2b05      	cmp	r3, #5
 8009a40:	d826      	bhi.n	8009a90 <UART_SetConfig+0x79c>
 8009a42:	a201      	add	r2, pc, #4	; (adr r2, 8009a48 <UART_SetConfig+0x754>)
 8009a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a48:	08009a61 	.word	0x08009a61
 8009a4c:	08009a69 	.word	0x08009a69
 8009a50:	08009a71 	.word	0x08009a71
 8009a54:	08009a79 	.word	0x08009a79
 8009a58:	08009a81 	.word	0x08009a81
 8009a5c:	08009a89 	.word	0x08009a89
 8009a60:	2302      	movs	r3, #2
 8009a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a66:	e01a      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a68:	2304      	movs	r3, #4
 8009a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6e:	e016      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a70:	2308      	movs	r3, #8
 8009a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a76:	e012      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a7e:	e00e      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a80:	2320      	movs	r3, #32
 8009a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a86:	e00a      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a88:	2340      	movs	r3, #64	; 0x40
 8009a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8e:	e006      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a90:	2380      	movs	r3, #128	; 0x80
 8009a92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a96:	e002      	b.n	8009a9e <UART_SetConfig+0x7aa>
 8009a98:	2380      	movs	r3, #128	; 0x80
 8009a9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a55      	ldr	r2, [pc, #340]	; (8009bf8 <UART_SetConfig+0x904>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	f040 80f0 	bne.w	8009c8a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009aaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009aae:	2b20      	cmp	r3, #32
 8009ab0:	dc46      	bgt.n	8009b40 <UART_SetConfig+0x84c>
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	db75      	blt.n	8009ba2 <UART_SetConfig+0x8ae>
 8009ab6:	3b02      	subs	r3, #2
 8009ab8:	2b1e      	cmp	r3, #30
 8009aba:	d872      	bhi.n	8009ba2 <UART_SetConfig+0x8ae>
 8009abc:	a201      	add	r2, pc, #4	; (adr r2, 8009ac4 <UART_SetConfig+0x7d0>)
 8009abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac2:	bf00      	nop
 8009ac4:	08009b47 	.word	0x08009b47
 8009ac8:	08009ba3 	.word	0x08009ba3
 8009acc:	08009b4f 	.word	0x08009b4f
 8009ad0:	08009ba3 	.word	0x08009ba3
 8009ad4:	08009ba3 	.word	0x08009ba3
 8009ad8:	08009ba3 	.word	0x08009ba3
 8009adc:	08009b5f 	.word	0x08009b5f
 8009ae0:	08009ba3 	.word	0x08009ba3
 8009ae4:	08009ba3 	.word	0x08009ba3
 8009ae8:	08009ba3 	.word	0x08009ba3
 8009aec:	08009ba3 	.word	0x08009ba3
 8009af0:	08009ba3 	.word	0x08009ba3
 8009af4:	08009ba3 	.word	0x08009ba3
 8009af8:	08009ba3 	.word	0x08009ba3
 8009afc:	08009b6f 	.word	0x08009b6f
 8009b00:	08009ba3 	.word	0x08009ba3
 8009b04:	08009ba3 	.word	0x08009ba3
 8009b08:	08009ba3 	.word	0x08009ba3
 8009b0c:	08009ba3 	.word	0x08009ba3
 8009b10:	08009ba3 	.word	0x08009ba3
 8009b14:	08009ba3 	.word	0x08009ba3
 8009b18:	08009ba3 	.word	0x08009ba3
 8009b1c:	08009ba3 	.word	0x08009ba3
 8009b20:	08009ba3 	.word	0x08009ba3
 8009b24:	08009ba3 	.word	0x08009ba3
 8009b28:	08009ba3 	.word	0x08009ba3
 8009b2c:	08009ba3 	.word	0x08009ba3
 8009b30:	08009ba3 	.word	0x08009ba3
 8009b34:	08009ba3 	.word	0x08009ba3
 8009b38:	08009ba3 	.word	0x08009ba3
 8009b3c:	08009b95 	.word	0x08009b95
 8009b40:	2b40      	cmp	r3, #64	; 0x40
 8009b42:	d02a      	beq.n	8009b9a <UART_SetConfig+0x8a6>
 8009b44:	e02d      	b.n	8009ba2 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b46:	f7fe f875 	bl	8007c34 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009b4c:	e02f      	b.n	8009bae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b4e:	f107 0314 	add.w	r3, r7, #20
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe f884 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b5c:	e027      	b.n	8009bae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b5e:	f107 0308 	add.w	r3, r7, #8
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fe f9d0 	bl	8007f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b6c:	e01f      	b.n	8009bae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b6e:	4b21      	ldr	r3, [pc, #132]	; (8009bf4 <UART_SetConfig+0x900>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d009      	beq.n	8009b8e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b7a:	4b1e      	ldr	r3, [pc, #120]	; (8009bf4 <UART_SetConfig+0x900>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	08db      	lsrs	r3, r3, #3
 8009b80:	f003 0303 	and.w	r3, r3, #3
 8009b84:	4a1d      	ldr	r2, [pc, #116]	; (8009bfc <UART_SetConfig+0x908>)
 8009b86:	fa22 f303 	lsr.w	r3, r2, r3
 8009b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009b8c:	e00f      	b.n	8009bae <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8009b8e:	4b1b      	ldr	r3, [pc, #108]	; (8009bfc <UART_SetConfig+0x908>)
 8009b90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b92:	e00c      	b.n	8009bae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009b94:	4b1a      	ldr	r3, [pc, #104]	; (8009c00 <UART_SetConfig+0x90c>)
 8009b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009b98:	e009      	b.n	8009bae <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ba0:	e005      	b.n	8009bae <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009bac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	f000 81e6 	beq.w	8009f82 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	4a12      	ldr	r2, [pc, #72]	; (8009c04 <UART_SetConfig+0x910>)
 8009bbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009bc8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	4613      	mov	r3, r2
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	4413      	add	r3, r2
 8009bd4:	6a3a      	ldr	r2, [r7, #32]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d305      	bcc.n	8009be6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009be0:	6a3a      	ldr	r2, [r7, #32]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d910      	bls.n	8009c08 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009bec:	e1c9      	b.n	8009f82 <UART_SetConfig+0xc8e>
 8009bee:	bf00      	nop
 8009bf0:	40011c00 	.word	0x40011c00
 8009bf4:	58024400 	.word	0x58024400
 8009bf8:	58000c00 	.word	0x58000c00
 8009bfc:	03d09000 	.word	0x03d09000
 8009c00:	003d0900 	.word	0x003d0900
 8009c04:	0800a518 	.word	0x0800a518
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f04f 0100 	mov.w	r1, #0
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	4ac1      	ldr	r2, [pc, #772]	; (8009f1c <UART_SetConfig+0xc28>)
 8009c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	f04f 0300 	mov.w	r3, #0
 8009c20:	f7f6 fb64 	bl	80002ec <__aeabi_uldivmod>
 8009c24:	4602      	mov	r2, r0
 8009c26:	460b      	mov	r3, r1
 8009c28:	4610      	mov	r0, r2
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	f04f 0300 	mov.w	r3, #0
 8009c34:	020b      	lsls	r3, r1, #8
 8009c36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c3a:	0202      	lsls	r2, r0, #8
 8009c3c:	6879      	ldr	r1, [r7, #4]
 8009c3e:	6849      	ldr	r1, [r1, #4]
 8009c40:	0849      	lsrs	r1, r1, #1
 8009c42:	4608      	mov	r0, r1
 8009c44:	f04f 0100 	mov.w	r1, #0
 8009c48:	1814      	adds	r4, r2, r0
 8009c4a:	eb43 0501 	adc.w	r5, r3, r1
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	461a      	mov	r2, r3
 8009c54:	f04f 0300 	mov.w	r3, #0
 8009c58:	4620      	mov	r0, r4
 8009c5a:	4629      	mov	r1, r5
 8009c5c:	f7f6 fb46 	bl	80002ec <__aeabi_uldivmod>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4613      	mov	r3, r2
 8009c66:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c6e:	d308      	bcc.n	8009c82 <UART_SetConfig+0x98e>
 8009c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c76:	d204      	bcs.n	8009c82 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c7e:	60da      	str	r2, [r3, #12]
 8009c80:	e17f      	b.n	8009f82 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009c88:	e17b      	b.n	8009f82 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	69db      	ldr	r3, [r3, #28]
 8009c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c92:	f040 80be 	bne.w	8009e12 <UART_SetConfig+0xb1e>
  {
    switch (clocksource)
 8009c96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c9a:	2b20      	cmp	r3, #32
 8009c9c:	dc48      	bgt.n	8009d30 <UART_SetConfig+0xa3c>
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	db7b      	blt.n	8009d9a <UART_SetConfig+0xaa6>
 8009ca2:	2b20      	cmp	r3, #32
 8009ca4:	d879      	bhi.n	8009d9a <UART_SetConfig+0xaa6>
 8009ca6:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <UART_SetConfig+0x9b8>)
 8009ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cac:	08009d37 	.word	0x08009d37
 8009cb0:	08009d3f 	.word	0x08009d3f
 8009cb4:	08009d9b 	.word	0x08009d9b
 8009cb8:	08009d9b 	.word	0x08009d9b
 8009cbc:	08009d47 	.word	0x08009d47
 8009cc0:	08009d9b 	.word	0x08009d9b
 8009cc4:	08009d9b 	.word	0x08009d9b
 8009cc8:	08009d9b 	.word	0x08009d9b
 8009ccc:	08009d57 	.word	0x08009d57
 8009cd0:	08009d9b 	.word	0x08009d9b
 8009cd4:	08009d9b 	.word	0x08009d9b
 8009cd8:	08009d9b 	.word	0x08009d9b
 8009cdc:	08009d9b 	.word	0x08009d9b
 8009ce0:	08009d9b 	.word	0x08009d9b
 8009ce4:	08009d9b 	.word	0x08009d9b
 8009ce8:	08009d9b 	.word	0x08009d9b
 8009cec:	08009d67 	.word	0x08009d67
 8009cf0:	08009d9b 	.word	0x08009d9b
 8009cf4:	08009d9b 	.word	0x08009d9b
 8009cf8:	08009d9b 	.word	0x08009d9b
 8009cfc:	08009d9b 	.word	0x08009d9b
 8009d00:	08009d9b 	.word	0x08009d9b
 8009d04:	08009d9b 	.word	0x08009d9b
 8009d08:	08009d9b 	.word	0x08009d9b
 8009d0c:	08009d9b 	.word	0x08009d9b
 8009d10:	08009d9b 	.word	0x08009d9b
 8009d14:	08009d9b 	.word	0x08009d9b
 8009d18:	08009d9b 	.word	0x08009d9b
 8009d1c:	08009d9b 	.word	0x08009d9b
 8009d20:	08009d9b 	.word	0x08009d9b
 8009d24:	08009d9b 	.word	0x08009d9b
 8009d28:	08009d9b 	.word	0x08009d9b
 8009d2c:	08009d8d 	.word	0x08009d8d
 8009d30:	2b40      	cmp	r3, #64	; 0x40
 8009d32:	d02e      	beq.n	8009d92 <UART_SetConfig+0xa9e>
 8009d34:	e031      	b.n	8009d9a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d36:	f7fc fc1b 	bl	8006570 <HAL_RCC_GetPCLK1Freq>
 8009d3a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d3c:	e033      	b.n	8009da6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d3e:	f7fc fc2d 	bl	800659c <HAL_RCC_GetPCLK2Freq>
 8009d42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d44:	e02f      	b.n	8009da6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d46:	f107 0314 	add.w	r3, r7, #20
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fd ff88 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d54:	e027      	b.n	8009da6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d56:	f107 0308 	add.w	r3, r7, #8
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7fe f8d4 	bl	8007f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d64:	e01f      	b.n	8009da6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d66:	4b6e      	ldr	r3, [pc, #440]	; (8009f20 <UART_SetConfig+0xc2c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f003 0320 	and.w	r3, r3, #32
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d009      	beq.n	8009d86 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d72:	4b6b      	ldr	r3, [pc, #428]	; (8009f20 <UART_SetConfig+0xc2c>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	08db      	lsrs	r3, r3, #3
 8009d78:	f003 0303 	and.w	r3, r3, #3
 8009d7c:	4a69      	ldr	r2, [pc, #420]	; (8009f24 <UART_SetConfig+0xc30>)
 8009d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d84:	e00f      	b.n	8009da6 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8009d86:	4b67      	ldr	r3, [pc, #412]	; (8009f24 <UART_SetConfig+0xc30>)
 8009d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d8a:	e00c      	b.n	8009da6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d8c:	4b66      	ldr	r3, [pc, #408]	; (8009f28 <UART_SetConfig+0xc34>)
 8009d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d90:	e009      	b.n	8009da6 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d98:	e005      	b.n	8009da6 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009da4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 80ea 	beq.w	8009f82 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	4a5a      	ldr	r2, [pc, #360]	; (8009f1c <UART_SetConfig+0xc28>)
 8009db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009db8:	461a      	mov	r2, r3
 8009dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dc0:	005a      	lsls	r2, r3, #1
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	085b      	lsrs	r3, r3, #1
 8009dc8:	441a      	add	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd8:	2b0f      	cmp	r3, #15
 8009dda:	d916      	bls.n	8009e0a <UART_SetConfig+0xb16>
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009de2:	d212      	bcs.n	8009e0a <UART_SetConfig+0xb16>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f023 030f 	bic.w	r3, r3, #15
 8009dec:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df0:	085b      	lsrs	r3, r3, #1
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	f003 0307 	and.w	r3, r3, #7
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e06:	60da      	str	r2, [r3, #12]
 8009e08:	e0bb      	b.n	8009f82 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e10:	e0b7      	b.n	8009f82 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e16:	2b20      	cmp	r3, #32
 8009e18:	dc4a      	bgt.n	8009eb0 <UART_SetConfig+0xbbc>
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f2c0 8086 	blt.w	8009f2c <UART_SetConfig+0xc38>
 8009e20:	2b20      	cmp	r3, #32
 8009e22:	f200 8083 	bhi.w	8009f2c <UART_SetConfig+0xc38>
 8009e26:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <UART_SetConfig+0xb38>)
 8009e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2c:	08009eb7 	.word	0x08009eb7
 8009e30:	08009ebf 	.word	0x08009ebf
 8009e34:	08009f2d 	.word	0x08009f2d
 8009e38:	08009f2d 	.word	0x08009f2d
 8009e3c:	08009ec7 	.word	0x08009ec7
 8009e40:	08009f2d 	.word	0x08009f2d
 8009e44:	08009f2d 	.word	0x08009f2d
 8009e48:	08009f2d 	.word	0x08009f2d
 8009e4c:	08009ed7 	.word	0x08009ed7
 8009e50:	08009f2d 	.word	0x08009f2d
 8009e54:	08009f2d 	.word	0x08009f2d
 8009e58:	08009f2d 	.word	0x08009f2d
 8009e5c:	08009f2d 	.word	0x08009f2d
 8009e60:	08009f2d 	.word	0x08009f2d
 8009e64:	08009f2d 	.word	0x08009f2d
 8009e68:	08009f2d 	.word	0x08009f2d
 8009e6c:	08009ee7 	.word	0x08009ee7
 8009e70:	08009f2d 	.word	0x08009f2d
 8009e74:	08009f2d 	.word	0x08009f2d
 8009e78:	08009f2d 	.word	0x08009f2d
 8009e7c:	08009f2d 	.word	0x08009f2d
 8009e80:	08009f2d 	.word	0x08009f2d
 8009e84:	08009f2d 	.word	0x08009f2d
 8009e88:	08009f2d 	.word	0x08009f2d
 8009e8c:	08009f2d 	.word	0x08009f2d
 8009e90:	08009f2d 	.word	0x08009f2d
 8009e94:	08009f2d 	.word	0x08009f2d
 8009e98:	08009f2d 	.word	0x08009f2d
 8009e9c:	08009f2d 	.word	0x08009f2d
 8009ea0:	08009f2d 	.word	0x08009f2d
 8009ea4:	08009f2d 	.word	0x08009f2d
 8009ea8:	08009f2d 	.word	0x08009f2d
 8009eac:	08009f0d 	.word	0x08009f0d
 8009eb0:	2b40      	cmp	r3, #64	; 0x40
 8009eb2:	d02e      	beq.n	8009f12 <UART_SetConfig+0xc1e>
 8009eb4:	e03a      	b.n	8009f2c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eb6:	f7fc fb5b 	bl	8006570 <HAL_RCC_GetPCLK1Freq>
 8009eba:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ebc:	e03c      	b.n	8009f38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ebe:	f7fc fb6d 	bl	800659c <HAL_RCC_GetPCLK2Freq>
 8009ec2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ec4:	e038      	b.n	8009f38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ec6:	f107 0314 	add.w	r3, r7, #20
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fd fec8 	bl	8007c60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ed0:	69bb      	ldr	r3, [r7, #24]
 8009ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ed4:	e030      	b.n	8009f38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ed6:	f107 0308 	add.w	r3, r7, #8
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fe f814 	bl	8007f08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ee4:	e028      	b.n	8009f38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ee6:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <UART_SetConfig+0xc2c>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f003 0320 	and.w	r3, r3, #32
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d009      	beq.n	8009f06 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <UART_SetConfig+0xc2c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	08db      	lsrs	r3, r3, #3
 8009ef8:	f003 0303 	and.w	r3, r3, #3
 8009efc:	4a09      	ldr	r2, [pc, #36]	; (8009f24 <UART_SetConfig+0xc30>)
 8009efe:	fa22 f303 	lsr.w	r3, r2, r3
 8009f02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f04:	e018      	b.n	8009f38 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8009f06:	4b07      	ldr	r3, [pc, #28]	; (8009f24 <UART_SetConfig+0xc30>)
 8009f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f0a:	e015      	b.n	8009f38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f0c:	4b06      	ldr	r3, [pc, #24]	; (8009f28 <UART_SetConfig+0xc34>)
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f10:	e012      	b.n	8009f38 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f18:	e00e      	b.n	8009f38 <UART_SetConfig+0xc44>
 8009f1a:	bf00      	nop
 8009f1c:	0800a518 	.word	0x0800a518
 8009f20:	58024400 	.word	0x58024400
 8009f24:	03d09000 	.word	0x03d09000
 8009f28:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f36:	bf00      	nop
    }

    if (pclk != 0U)
 8009f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d021      	beq.n	8009f82 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f42:	4a1a      	ldr	r2, [pc, #104]	; (8009fac <UART_SetConfig+0xcb8>)
 8009f44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	085b      	lsrs	r3, r3, #1
 8009f56:	441a      	add	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f66:	2b0f      	cmp	r3, #15
 8009f68:	d908      	bls.n	8009f7c <UART_SetConfig+0xc88>
 8009f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f70:	d204      	bcs.n	8009f7c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = usartdiv;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f78:	60da      	str	r2, [r3, #12]
 8009f7a:	e002      	b.n	8009f82 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009f9e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3738      	adds	r7, #56	; 0x38
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8009faa:	bf00      	nop
 8009fac:	0800a518 	.word	0x0800a518

08009fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b083      	sub	sp, #12
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d00a      	beq.n	8009fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fde:	f003 0302 	and.w	r3, r3, #2
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00a      	beq.n	8009ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a000:	f003 0304 	and.w	r3, r3, #4
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00a      	beq.n	800a01e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	430a      	orrs	r2, r1
 800a01c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a022:	f003 0308 	and.w	r3, r3, #8
 800a026:	2b00      	cmp	r3, #0
 800a028:	d00a      	beq.n	800a040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	430a      	orrs	r2, r1
 800a03e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a044:	f003 0310 	and.w	r3, r3, #16
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00a      	beq.n	800a062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	430a      	orrs	r2, r1
 800a060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a066:	f003 0320 	and.w	r3, r3, #32
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00a      	beq.n	800a084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	430a      	orrs	r2, r1
 800a082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d01a      	beq.n	800a0c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	685b      	ldr	r3, [r3, #4]
 800a096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	430a      	orrs	r2, r1
 800a0a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0ae:	d10a      	bne.n	800a0c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	430a      	orrs	r2, r1
 800a0c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d00a      	beq.n	800a0e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	430a      	orrs	r2, r1
 800a0e6:	605a      	str	r2, [r3, #4]
  }
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b086      	sub	sp, #24
 800a0f8:	af02      	add	r7, sp, #8
 800a0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a104:	f7f7 fb20 	bl	8001748 <HAL_GetTick>
 800a108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0308 	and.w	r3, r3, #8
 800a114:	2b08      	cmp	r3, #8
 800a116:	d10e      	bne.n	800a136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f82f 	bl	800a18a <UART_WaitOnFlagUntilTimeout>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a132:	2303      	movs	r3, #3
 800a134:	e025      	b.n	800a182 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0304 	and.w	r3, r3, #4
 800a140:	2b04      	cmp	r3, #4
 800a142:	d10e      	bne.n	800a162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f819 	bl	800a18a <UART_WaitOnFlagUntilTimeout>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e00f      	b.n	800a182 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2220      	movs	r2, #32
 800a166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2220      	movs	r2, #32
 800a16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3710      	adds	r7, #16
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b084      	sub	sp, #16
 800a18e:	af00      	add	r7, sp, #0
 800a190:	60f8      	str	r0, [r7, #12]
 800a192:	60b9      	str	r1, [r7, #8]
 800a194:	603b      	str	r3, [r7, #0]
 800a196:	4613      	mov	r3, r2
 800a198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a19a:	e062      	b.n	800a262 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a2:	d05e      	beq.n	800a262 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1a4:	f7f7 fad0 	bl	8001748 <HAL_GetTick>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	1ad3      	subs	r3, r2, r3
 800a1ae:	69ba      	ldr	r2, [r7, #24]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d302      	bcc.n	800a1ba <UART_WaitOnFlagUntilTimeout+0x30>
 800a1b4:	69bb      	ldr	r3, [r7, #24]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d11d      	bne.n	800a1f6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a1c8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f022 0201 	bic.w	r2, r2, #1
 800a1d8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2220      	movs	r2, #32
 800a1de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e045      	b.n	800a282 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0304 	and.w	r3, r3, #4
 800a200:	2b00      	cmp	r3, #0
 800a202:	d02e      	beq.n	800a262 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a20e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a212:	d126      	bne.n	800a262 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a21c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a22c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689a      	ldr	r2, [r3, #8]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f022 0201 	bic.w	r2, r2, #1
 800a23c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2220      	movs	r2, #32
 800a242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2220      	movs	r2, #32
 800a24a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2220      	movs	r2, #32
 800a252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2200      	movs	r2, #0
 800a25a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e00f      	b.n	800a282 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	69da      	ldr	r2, [r3, #28]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	4013      	ands	r3, r2
 800a26c:	68ba      	ldr	r2, [r7, #8]
 800a26e:	429a      	cmp	r2, r3
 800a270:	bf0c      	ite	eq
 800a272:	2301      	moveq	r3, #1
 800a274:	2300      	movne	r3, #0
 800a276:	b2db      	uxtb	r3, r3
 800a278:	461a      	mov	r2, r3
 800a27a:	79fb      	ldrb	r3, [r7, #7]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d08d      	beq.n	800a19c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b085      	sub	sp, #20
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d101      	bne.n	800a2a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800a29c:	2302      	movs	r3, #2
 800a29e:	e027      	b.n	800a2f0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2224      	movs	r2, #36	; 0x24
 800a2ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f022 0201 	bic.w	r2, r2, #1
 800a2c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2220      	movs	r2, #32
 800a2e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d101      	bne.n	800a314 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a310:	2302      	movs	r3, #2
 800a312:	e02d      	b.n	800a370 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2201      	movs	r2, #1
 800a318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2224      	movs	r2, #36	; 0x24
 800a320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f022 0201 	bic.w	r2, r2, #1
 800a33a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	430a      	orrs	r2, r1
 800a34e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f84f 	bl	800a3f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	68fa      	ldr	r2, [r7, #12]
 800a35c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2220      	movs	r2, #32
 800a362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2200      	movs	r2, #0
 800a36a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3710      	adds	r7, #16
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}

0800a378 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d101      	bne.n	800a390 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a38c:	2302      	movs	r3, #2
 800a38e:	e02d      	b.n	800a3ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2224      	movs	r2, #36	; 0x24
 800a39c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f022 0201 	bic.w	r2, r2, #1
 800a3b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 f811 	bl	800a3f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68fa      	ldr	r2, [r7, #12]
 800a3d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2220      	movs	r2, #32
 800a3de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a400:	2b00      	cmp	r3, #0
 800a402:	d108      	bne.n	800a416 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2201      	movs	r2, #1
 800a408:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2201      	movs	r2, #1
 800a410:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a414:	e031      	b.n	800a47a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a416:	2310      	movs	r3, #16
 800a418:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a41a:	2310      	movs	r3, #16
 800a41c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	0e5b      	lsrs	r3, r3, #25
 800a426:	b2db      	uxtb	r3, r3
 800a428:	f003 0307 	and.w	r3, r3, #7
 800a42c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	0f5b      	lsrs	r3, r3, #29
 800a436:	b2db      	uxtb	r3, r3
 800a438:	f003 0307 	and.w	r3, r3, #7
 800a43c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	7b3a      	ldrb	r2, [r7, #12]
 800a442:	4911      	ldr	r1, [pc, #68]	; (800a488 <UARTEx_SetNbDataToProcess+0x94>)
 800a444:	5c8a      	ldrb	r2, [r1, r2]
 800a446:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a44a:	7b3a      	ldrb	r2, [r7, #12]
 800a44c:	490f      	ldr	r1, [pc, #60]	; (800a48c <UARTEx_SetNbDataToProcess+0x98>)
 800a44e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a450:	fb93 f3f2 	sdiv	r3, r3, r2
 800a454:	b29a      	uxth	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	7b7a      	ldrb	r2, [r7, #13]
 800a460:	4909      	ldr	r1, [pc, #36]	; (800a488 <UARTEx_SetNbDataToProcess+0x94>)
 800a462:	5c8a      	ldrb	r2, [r1, r2]
 800a464:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a468:	7b7a      	ldrb	r2, [r7, #13]
 800a46a:	4908      	ldr	r1, [pc, #32]	; (800a48c <UARTEx_SetNbDataToProcess+0x98>)
 800a46c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a46e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a472:	b29a      	uxth	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a47a:	bf00      	nop
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	0800a530 	.word	0x0800a530
 800a48c:	0800a538 	.word	0x0800a538

0800a490 <__libc_init_array>:
 800a490:	b570      	push	{r4, r5, r6, lr}
 800a492:	4d0d      	ldr	r5, [pc, #52]	; (800a4c8 <__libc_init_array+0x38>)
 800a494:	4c0d      	ldr	r4, [pc, #52]	; (800a4cc <__libc_init_array+0x3c>)
 800a496:	1b64      	subs	r4, r4, r5
 800a498:	10a4      	asrs	r4, r4, #2
 800a49a:	2600      	movs	r6, #0
 800a49c:	42a6      	cmp	r6, r4
 800a49e:	d109      	bne.n	800a4b4 <__libc_init_array+0x24>
 800a4a0:	4d0b      	ldr	r5, [pc, #44]	; (800a4d0 <__libc_init_array+0x40>)
 800a4a2:	4c0c      	ldr	r4, [pc, #48]	; (800a4d4 <__libc_init_array+0x44>)
 800a4a4:	f000 f820 	bl	800a4e8 <_init>
 800a4a8:	1b64      	subs	r4, r4, r5
 800a4aa:	10a4      	asrs	r4, r4, #2
 800a4ac:	2600      	movs	r6, #0
 800a4ae:	42a6      	cmp	r6, r4
 800a4b0:	d105      	bne.n	800a4be <__libc_init_array+0x2e>
 800a4b2:	bd70      	pop	{r4, r5, r6, pc}
 800a4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b8:	4798      	blx	r3
 800a4ba:	3601      	adds	r6, #1
 800a4bc:	e7ee      	b.n	800a49c <__libc_init_array+0xc>
 800a4be:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c2:	4798      	blx	r3
 800a4c4:	3601      	adds	r6, #1
 800a4c6:	e7f2      	b.n	800a4ae <__libc_init_array+0x1e>
 800a4c8:	0800a548 	.word	0x0800a548
 800a4cc:	0800a548 	.word	0x0800a548
 800a4d0:	0800a548 	.word	0x0800a548
 800a4d4:	0800a54c 	.word	0x0800a54c

0800a4d8 <memset>:
 800a4d8:	4402      	add	r2, r0
 800a4da:	4603      	mov	r3, r0
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d100      	bne.n	800a4e2 <memset+0xa>
 800a4e0:	4770      	bx	lr
 800a4e2:	f803 1b01 	strb.w	r1, [r3], #1
 800a4e6:	e7f9      	b.n	800a4dc <memset+0x4>

0800a4e8 <_init>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	bf00      	nop
 800a4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ee:	bc08      	pop	{r3}
 800a4f0:	469e      	mov	lr, r3
 800a4f2:	4770      	bx	lr

0800a4f4 <_fini>:
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	bf00      	nop
 800a4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fa:	bc08      	pop	{r3}
 800a4fc:	469e      	mov	lr, r3
 800a4fe:	4770      	bx	lr
